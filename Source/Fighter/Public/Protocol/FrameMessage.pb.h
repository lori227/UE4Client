// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameMessage.proto

#ifndef PROTOBUF_INCLUDED_FrameMessage_2eproto
#define PROTOBUF_INCLUDED_FrameMessage_2eproto

#ifdef _MSC_VER
	#pragma warning(push)
	#pragma warning(disable : 4946)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FrameMessage_2eproto LIBPROTOC_EXPORT

namespace protobuf_FrameMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[64];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_FrameMessage_2eproto
namespace KFMsg {
class ListenData;
class ListenDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern ListenDataDefaultTypeInternal _ListenData_default_instance_;
class PBDeployCommand;
class PBDeployCommandDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBDeployCommandDefaultTypeInternal _PBDeployCommand_default_instance_;
class PBMySQLData;
class PBMySQLDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBMySQLDataDefaultTypeInternal _PBMySQLData_default_instance_;
class PBMySQLData_ValuesEntry_DoNotUse;
class PBMySQLData_ValuesEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBMySQLData_ValuesEntry_DoNotUseDefaultTypeInternal _PBMySQLData_ValuesEntry_DoNotUse_default_instance_;
class PBMySQLDatas;
class PBMySQLDatasDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBMySQLDatasDefaultTypeInternal _PBMySQLDatas_default_instance_;
class PBRemoteLog;
class PBRemoteLogDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBRemoteLogDefaultTypeInternal _PBRemoteLog_default_instance_;
class PBRoute;
class PBRouteDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBRouteDefaultTypeInternal _PBRoute_default_instance_;
class RegisterToServerAck;
class RegisterToServerAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RegisterToServerAckDefaultTypeInternal _RegisterToServerAck_default_instance_;
class RegisterToServerReq;
class RegisterToServerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern RegisterToServerReqDefaultTypeInternal _RegisterToServerReq_default_instance_;
class S2SClusterAuthToClientAck;
class S2SClusterAuthToClientAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterAuthToClientAckDefaultTypeInternal _S2SClusterAuthToClientAck_default_instance_;
class S2SClusterAuthToMasterReq;
class S2SClusterAuthToMasterReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterAuthToMasterReqDefaultTypeInternal _S2SClusterAuthToMasterReq_default_instance_;
class S2SClusterClientDiscoverToShardReq;
class S2SClusterClientDiscoverToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterClientDiscoverToShardReqDefaultTypeInternal _S2SClusterClientDiscoverToShardReq_default_instance_;
class S2SClusterClientLostToShardReq;
class S2SClusterClientLostToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterClientLostToShardReqDefaultTypeInternal _S2SClusterClientLostToShardReq_default_instance_;
class S2SClusterLostProxyToMasterReq;
class S2SClusterLostProxyToMasterReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterLostProxyToMasterReqDefaultTypeInternal _S2SClusterLostProxyToMasterReq_default_instance_;
class S2SClusterRegisterToMasterReq;
class S2SClusterRegisterToMasterReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterRegisterToMasterReqDefaultTypeInternal _S2SClusterRegisterToMasterReq_default_instance_;
class S2SClusterSyncProxyToMasterReq;
class S2SClusterSyncProxyToMasterReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterSyncProxyToMasterReqDefaultTypeInternal _S2SClusterSyncProxyToMasterReq_default_instance_;
class S2SClusterTokenToMasterAck;
class S2SClusterTokenToMasterAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterTokenToMasterAckDefaultTypeInternal _S2SClusterTokenToMasterAck_default_instance_;
class S2SClusterTokenToMasterReq;
class S2SClusterTokenToMasterReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterTokenToMasterReqDefaultTypeInternal _S2SClusterTokenToMasterReq_default_instance_;
class S2SClusterTokenToProxyAck;
class S2SClusterTokenToProxyAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterTokenToProxyAckDefaultTypeInternal _S2SClusterTokenToProxyAck_default_instance_;
class S2SClusterTokenToProxyReq;
class S2SClusterTokenToProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterTokenToProxyReqDefaultTypeInternal _S2SClusterTokenToProxyReq_default_instance_;
class S2SClusterVerifyToClientAck;
class S2SClusterVerifyToClientAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterVerifyToClientAckDefaultTypeInternal _S2SClusterVerifyToClientAck_default_instance_;
class S2SClusterVerifyToProxyReq;
class S2SClusterVerifyToProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SClusterVerifyToProxyReqDefaultTypeInternal _S2SClusterVerifyToProxyReq_default_instance_;
class S2SDeployCommandToAgentReq;
class S2SDeployCommandToAgentReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployCommandToAgentReqDefaultTypeInternal _S2SDeployCommandToAgentReq_default_instance_;
class S2SDeployCommandToClientReq;
class S2SDeployCommandToClientReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployCommandToClientReqDefaultTypeInternal _S2SDeployCommandToClientReq_default_instance_;
class S2SDeployHeartbeatToAgentReq;
class S2SDeployHeartbeatToAgentReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployHeartbeatToAgentReqDefaultTypeInternal _S2SDeployHeartbeatToAgentReq_default_instance_;
class S2SDeployLogToServerAck;
class S2SDeployLogToServerAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployLogToServerAckDefaultTypeInternal _S2SDeployLogToServerAck_default_instance_;
class S2SDeployLogToToolAck;
class S2SDeployLogToToolAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployLogToToolAckDefaultTypeInternal _S2SDeployLogToToolAck_default_instance_;
class S2SDeployToolCommandReq;
class S2SDeployToolCommandReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolCommandReqDefaultTypeInternal _S2SDeployToolCommandReq_default_instance_;
class S2SDeployToolDeleteMySQLAck;
class S2SDeployToolDeleteMySQLAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolDeleteMySQLAckDefaultTypeInternal _S2SDeployToolDeleteMySQLAck_default_instance_;
class S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse;
class S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUseDefaultTypeInternal _S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse_default_instance_;
class S2SDeployToolDeleteMySQLReq;
class S2SDeployToolDeleteMySQLReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolDeleteMySQLReqDefaultTypeInternal _S2SDeployToolDeleteMySQLReq_default_instance_;
class S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse;
class S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUseDefaultTypeInternal _S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse_default_instance_;
class S2SDeployToolExecuteMySQLAck;
class S2SDeployToolExecuteMySQLAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolExecuteMySQLAckDefaultTypeInternal _S2SDeployToolExecuteMySQLAck_default_instance_;
class S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse;
class S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUseDefaultTypeInternal _S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse_default_instance_;
class S2SDeployToolExecuteMySQLReq;
class S2SDeployToolExecuteMySQLReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolExecuteMySQLReqDefaultTypeInternal _S2SDeployToolExecuteMySQLReq_default_instance_;
class S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse;
class S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUseDefaultTypeInternal _S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse_default_instance_;
class S2SDeployToolQueryMySQLAck;
class S2SDeployToolQueryMySQLAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolQueryMySQLAckDefaultTypeInternal _S2SDeployToolQueryMySQLAck_default_instance_;
class S2SDeployToolQueryMySQLReq;
class S2SDeployToolQueryMySQLReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolQueryMySQLReqDefaultTypeInternal _S2SDeployToolQueryMySQLReq_default_instance_;
class S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse;
class S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUseDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUseDefaultTypeInternal _S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse_default_instance_;
class S2SDeployToolQueryToolIdAck;
class S2SDeployToolQueryToolIdAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolQueryToolIdAckDefaultTypeInternal _S2SDeployToolQueryToolIdAck_default_instance_;
class S2SDeployToolQueryToolIdReq;
class S2SDeployToolQueryToolIdReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployToolQueryToolIdReqDefaultTypeInternal _S2SDeployToolQueryToolIdReq_default_instance_;
class S2SRegisterAgentToServerReq;
class S2SRegisterAgentToServerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRegisterAgentToServerReqDefaultTypeInternal _S2SRegisterAgentToServerReq_default_instance_;
class S2SRemoteLogToServerReq;
class S2SRemoteLogToServerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRemoteLogToServerReqDefaultTypeInternal _S2SRemoteLogToServerReq_default_instance_;
class S2SRouteAddObjectToProxyReq;
class S2SRouteAddObjectToProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteAddObjectToProxyReqDefaultTypeInternal _S2SRouteAddObjectToProxyReq_default_instance_;
class S2SRouteAddObjectToShardReq;
class S2SRouteAddObjectToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteAddObjectToShardReqDefaultTypeInternal _S2SRouteAddObjectToShardReq_default_instance_;
class S2SRouteClientLostToShardReq;
class S2SRouteClientLostToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteClientLostToShardReqDefaultTypeInternal _S2SRouteClientLostToShardReq_default_instance_;
class S2SRouteDiscoverToClientReq;
class S2SRouteDiscoverToClientReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteDiscoverToClientReqDefaultTypeInternal _S2SRouteDiscoverToClientReq_default_instance_;
class S2SRouteMessageToClientAck;
class S2SRouteMessageToClientAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteMessageToClientAckDefaultTypeInternal _S2SRouteMessageToClientAck_default_instance_;
class S2SRouteMessageToNameAllReq;
class S2SRouteMessageToNameAllReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteMessageToNameAllReqDefaultTypeInternal _S2SRouteMessageToNameAllReq_default_instance_;
class S2SRouteMessageToNameBalanceReq;
class S2SRouteMessageToNameBalanceReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteMessageToNameBalanceReqDefaultTypeInternal _S2SRouteMessageToNameBalanceReq_default_instance_;
class S2SRouteMessageToNameObjectReq;
class S2SRouteMessageToNameObjectReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteMessageToNameObjectReqDefaultTypeInternal _S2SRouteMessageToNameObjectReq_default_instance_;
class S2SRouteMessageToNameRandReq;
class S2SRouteMessageToNameRandReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteMessageToNameRandReqDefaultTypeInternal _S2SRouteMessageToNameRandReq_default_instance_;
class S2SRouteMessageToPlayerReq;
class S2SRouteMessageToPlayerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteMessageToPlayerReqDefaultTypeInternal _S2SRouteMessageToPlayerReq_default_instance_;
class S2SRouteMessageToServerReq;
class S2SRouteMessageToServerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteMessageToServerReqDefaultTypeInternal _S2SRouteMessageToServerReq_default_instance_;
class S2SRouteRemoveObjectToProxyReq;
class S2SRouteRemoveObjectToProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteRemoveObjectToProxyReqDefaultTypeInternal _S2SRouteRemoveObjectToProxyReq_default_instance_;
class S2SRouteRemoveObjectToShardReq;
class S2SRouteRemoveObjectToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteRemoveObjectToShardReqDefaultTypeInternal _S2SRouteRemoveObjectToShardReq_default_instance_;
class S2SRouteSyncObjectToProxyReq;
class S2SRouteSyncObjectToProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteSyncObjectToProxyReqDefaultTypeInternal _S2SRouteSyncObjectToProxyReq_default_instance_;
class S2SRouteSyncObjectToShardReq;
class S2SRouteSyncObjectToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRouteSyncObjectToShardReqDefaultTypeInternal _S2SRouteSyncObjectToShardReq_default_instance_;
class S2STellDiscoverServerToMaster;
class S2STellDiscoverServerToMasterDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STellDiscoverServerToMasterDefaultTypeInternal _S2STellDiscoverServerToMaster_default_instance_;
class S2STellLostServerToMaster;
class S2STellLostServerToMasterDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STellLostServerToMasterDefaultTypeInternal _S2STellLostServerToMaster_default_instance_;
class S2STellRegisterServerToMaster;
class S2STellRegisterServerToMasterDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STellRegisterServerToMasterDefaultTypeInternal _S2STellRegisterServerToMaster_default_instance_;
class S2STellServerListToMaster;
class S2STellServerListToMasterDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STellServerListToMasterDefaultTypeInternal _S2STellServerListToMaster_default_instance_;
class TellRegisterToServer;
class TellRegisterToServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern TellRegisterToServerDefaultTypeInternal _TellRegisterToServer_default_instance_;
class TellUnRegisterFromServer;
class TellUnRegisterFromServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern TellUnRegisterFromServerDefaultTypeInternal _TellUnRegisterFromServer_default_instance_;
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::KFMsg::ListenData* Arena::CreateMaybeMessage<::KFMsg::ListenData>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBDeployCommand* Arena::CreateMaybeMessage<::KFMsg::PBDeployCommand>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBMySQLData* Arena::CreateMaybeMessage<::KFMsg::PBMySQLData>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBMySQLData_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::KFMsg::PBMySQLData_ValuesEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBMySQLDatas* Arena::CreateMaybeMessage<::KFMsg::PBMySQLDatas>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBRemoteLog* Arena::CreateMaybeMessage<::KFMsg::PBRemoteLog>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBRoute* Arena::CreateMaybeMessage<::KFMsg::PBRoute>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::RegisterToServerAck* Arena::CreateMaybeMessage<::KFMsg::RegisterToServerAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::RegisterToServerReq* Arena::CreateMaybeMessage<::KFMsg::RegisterToServerReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterAuthToClientAck* Arena::CreateMaybeMessage<::KFMsg::S2SClusterAuthToClientAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterAuthToMasterReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterAuthToMasterReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterClientDiscoverToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterClientDiscoverToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterClientLostToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterClientLostToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterLostProxyToMasterReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterLostProxyToMasterReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterRegisterToMasterReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterRegisterToMasterReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterSyncProxyToMasterReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterSyncProxyToMasterReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterTokenToMasterAck* Arena::CreateMaybeMessage<::KFMsg::S2SClusterTokenToMasterAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterTokenToMasterReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterTokenToMasterReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterTokenToProxyAck* Arena::CreateMaybeMessage<::KFMsg::S2SClusterTokenToProxyAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterTokenToProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterTokenToProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterVerifyToClientAck* Arena::CreateMaybeMessage<::KFMsg::S2SClusterVerifyToClientAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SClusterVerifyToProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SClusterVerifyToProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployCommandToAgentReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployCommandToAgentReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployCommandToClientReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployCommandToClientReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployHeartbeatToAgentReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployHeartbeatToAgentReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployLogToServerAck* Arena::CreateMaybeMessage<::KFMsg::S2SDeployLogToServerAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployLogToToolAck* Arena::CreateMaybeMessage<::KFMsg::S2SDeployLogToToolAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolCommandReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolCommandReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolDeleteMySQLAck* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolDeleteMySQLAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolDeleteMySQLReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolDeleteMySQLReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolExecuteMySQLAck* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolExecuteMySQLAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolExecuteMySQLReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolExecuteMySQLReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolQueryMySQLAck* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolQueryMySQLAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolQueryMySQLReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolQueryMySQLReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolQueryToolIdAck* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolQueryToolIdAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployToolQueryToolIdReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployToolQueryToolIdReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRegisterAgentToServerReq* Arena::CreateMaybeMessage<::KFMsg::S2SRegisterAgentToServerReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRemoteLogToServerReq* Arena::CreateMaybeMessage<::KFMsg::S2SRemoteLogToServerReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteAddObjectToProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteAddObjectToProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteAddObjectToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteAddObjectToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteClientLostToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteClientLostToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteDiscoverToClientReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteDiscoverToClientReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteMessageToClientAck* Arena::CreateMaybeMessage<::KFMsg::S2SRouteMessageToClientAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteMessageToNameAllReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteMessageToNameAllReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteMessageToNameBalanceReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteMessageToNameBalanceReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteMessageToNameObjectReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteMessageToNameObjectReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteMessageToNameRandReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteMessageToNameRandReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteMessageToPlayerReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteMessageToPlayerReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteMessageToServerReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteMessageToServerReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteRemoveObjectToProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteRemoveObjectToProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteRemoveObjectToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteRemoveObjectToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteSyncObjectToProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteSyncObjectToProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRouteSyncObjectToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SRouteSyncObjectToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STellDiscoverServerToMaster* Arena::CreateMaybeMessage<::KFMsg::S2STellDiscoverServerToMaster>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STellLostServerToMaster* Arena::CreateMaybeMessage<::KFMsg::S2STellLostServerToMaster>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STellRegisterServerToMaster* Arena::CreateMaybeMessage<::KFMsg::S2STellRegisterServerToMaster>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STellServerListToMaster* Arena::CreateMaybeMessage<::KFMsg::S2STellServerListToMaster>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::TellRegisterToServer* Arena::CreateMaybeMessage<::KFMsg::TellRegisterToServer>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::TellUnRegisterFromServer* Arena::CreateMaybeMessage<::KFMsg::TellUnRegisterFromServer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KFMsg {

enum FrameProtocol {
  S2S_FRAME_PROTOCOL_BEGIN = 0,
  S2S_REGISTER_TO_SERVER_REQ = 10001,
  S2S_REGISTER_TO_SERVER_ACK = 10002,
  S2S_TELL_REGISTER_TO_SERVER = 10003,
  S2S_TELL_UNREGISTER_FROM_SERVER = 10004,
  S2S_TELL_DISCOVER_SERVER_TO_MASTER = 10005,
  S2S_TELL_LOST_SERVER_TO_MASTER = 10006,
  S2S_TELL_REGISTER_SERVER_TO_MASTER = 10007,
  S2S_TELL_SERVER_LIST_TO_MASTER = 10008,
  S2S_REMOTE_LOG_TO_SERVER_REQ = 10010,
  S2S_REGISTER_AGENT_TO_SERVER_REQ = 10011,
  S2S_DEPLOY_COMMAND_TO_AGENT_REQ = 10012,
  S2S_DEPLOY_COMMAND_TO_CLIENT_REQ = 10013,
  S2S_DEPLOY_TOOL_EXECUTE_MYSQL_REQ = 10014,
  S2S_DEPLOY_TOOL_EXECUTE_MYSQL_ACK = 10015,
  S2S_DEPLOY_TOOL_QUERY_MYSQL_REQ = 10016,
  S2S_DEPLOY_TOOL_QUERY_MYSQL_ACK = 10017,
  S2S_DEPLOY_TOOL_COMMAND_REQ = 10018,
  S2S_DEPLOY_LOG_TO_TOOL_ACK = 10019,
  S2S_DEPLOY_LOG_TO_SERVER_ACK = 10020,
  S2S_DEPLOY_TOOL_DELETE_MYSQL_REQ = 10021,
  S2S_DEPLOY_TOOL_DELETE_MYSQL_ACK = 10022,
  S2S_DEPLOY_TOOL_QUERY_TOOL_ID_REQ = 10023,
  S2S_DEPLOY_TOOL_QUERY_TOOL_ID_ACK = 10024,
  S2S_DEPLOY_HEARTBEAT_TO_AGENT_REQ = 10025,
  S2S_CLUSTER_REGISTER_TO_MASTER_REQ = 10101,
  S2S_CLUSTER_SYNC_PROXY_TO_MASTER_REQ = 10102,
  S2S_CLUSTER_AUTH_TO_MASTER_REQ = 10103,
  S2S_CLUSTER_AUTH_TO_CLIENT_ACK = 10104,
  S2S_CLUSTER_TOKEN_TO_PROXY_REQ = 10105,
  S2S_CLUSTER_VERIFY_TO_PROXY_REQ = 10106,
  S2S_CLUSTER_VERIFY_TO_CLIENT_ACK = 10107,
  S2S_CLUSTER_CLIENT_DISCOVER_TO_SHARD_REQ = 10108,
  S2S_CLUSTER_CLIENT_LOST_TO_SHARD_REQ = 10109,
  S2S_CLUSTER_LOST_PROXY_TO_MASTER_REQ = 10110,
  S2S_CLUSTER_TOKEN_TO_MASTER_REQ = 10111,
  S2S_CLUSTER_TOKEN_TO_PROXY_ACK = 10112,
  S2S_CLUSTER_TOKEN_TO_MASTER_ACK = 10113,
  S2S_ROUTE_MESSAGE_TO_CLIENT_ACK = 10201,
  S2S_ROUTE_MESSAGE_TO_NAME_ALL_REQ = 10202,
  S2S_ROUTE_MESSAGE_TO_NAME_RAND_REQ = 10203,
  S2S_ROUTE_MESSAGE_TO_NAME_BALANCE_REQ = 10204,
  S2S_ROUTE_MESSAGE_TO_NAME_OBJECT_REQ = 10205,
  S2S_ROUTE_MESSAGE_TO_SERVER_REQ = 10206,
  S2S_ROUTE_MESSAGE_TO_PLAYER_REQ = 10207,
  S2S_ROUTE_CLIENT_LOST_TO_SHARD_REQ = 10208,
  S2S_ROUTE_DISCOVER_TO_CLIENT_REQ = 10209,
  S2S_ROUTE_SYNC_OBJECT_TO_PROXY_REQ = 10210,
  S2S_ROUTE_ADD_OBJECT_TO_PROXY_REQ = 10211,
  S2S_ROUTE_REMOVE_OBJECT_TO_PROXY_REQ = 10212,
  S2S_ROUTE_SYNC_OBJECT_TO_SHARD_REQ = 10213,
  S2S_ROUTE_ADD_OBJECT_TO_SHARD_REQ = 10214,
  S2S_ROUTE_REMOVE_OBJECT_TO_SHARD_REQ = 10215,
  FrameProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FrameProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool FrameProtocol_IsValid(int value);
const FrameProtocol FrameProtocol_MIN = S2S_FRAME_PROTOCOL_BEGIN;
const FrameProtocol FrameProtocol_MAX = S2S_ROUTE_REMOVE_OBJECT_TO_SHARD_REQ;
const int FrameProtocol_ARRAYSIZE = FrameProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* FrameProtocol_descriptor();
inline const ::std::string& FrameProtocol_Name(FrameProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameProtocol_descriptor(), value);
}
inline bool FrameProtocol_Parse(
    const ::std::string& name, FrameProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameProtocol>(
    FrameProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ListenData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.ListenData) */ {
 public:
  ListenData();
  virtual ~ListenData();

  ListenData(const ListenData& from);

  inline ListenData& operator=(const ListenData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListenData(ListenData&& from) noexcept
    : ListenData() {
    *this = ::std::move(from);
  }

  inline ListenData& operator=(ListenData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListenData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListenData* internal_default_instance() {
    return reinterpret_cast<const ListenData*>(
               &_ListenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ListenData* other);
  friend void swap(ListenData& a, ListenData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListenData* New() const final {
    return CreateMaybeMessage<ListenData>(NULL);
  }

  ListenData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListenData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListenData& from);
  void MergeFrom(const ListenData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListenData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes appname = 1;
  void clear_appname();
  static const int kAppnameFieldNumber = 1;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 2;
  void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // bytes ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 appid = 3;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // uint32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.ListenData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 appid_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.RegisterToServerReq) */ {
 public:
  RegisterToServerReq();
  virtual ~RegisterToServerReq();

  RegisterToServerReq(const RegisterToServerReq& from);

  inline RegisterToServerReq& operator=(const RegisterToServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterToServerReq(RegisterToServerReq&& from) noexcept
    : RegisterToServerReq() {
    *this = ::std::move(from);
  }

  inline RegisterToServerReq& operator=(RegisterToServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterToServerReq* internal_default_instance() {
    return reinterpret_cast<const RegisterToServerReq*>(
               &_RegisterToServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterToServerReq* other);
  friend void swap(RegisterToServerReq& a, RegisterToServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterToServerReq* New() const final {
    return CreateMaybeMessage<RegisterToServerReq>(NULL);
  }

  RegisterToServerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterToServerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterToServerReq& from);
  void MergeFrom(const RegisterToServerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterToServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.ListenData listen = 1;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 1;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::ListenData* listen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.RegisterToServerAck) */ {
 public:
  RegisterToServerAck();
  virtual ~RegisterToServerAck();

  RegisterToServerAck(const RegisterToServerAck& from);

  inline RegisterToServerAck& operator=(const RegisterToServerAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterToServerAck(RegisterToServerAck&& from) noexcept
    : RegisterToServerAck() {
    *this = ::std::move(from);
  }

  inline RegisterToServerAck& operator=(RegisterToServerAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterToServerAck* internal_default_instance() {
    return reinterpret_cast<const RegisterToServerAck*>(
               &_RegisterToServerAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RegisterToServerAck* other);
  friend void swap(RegisterToServerAck& a, RegisterToServerAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterToServerAck* New() const final {
    return CreateMaybeMessage<RegisterToServerAck>(NULL);
  }

  RegisterToServerAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterToServerAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterToServerAck& from);
  void MergeFrom(const RegisterToServerAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterToServerAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes appname = 2;
  void clear_appname();
  static const int kAppnameFieldNumber = 2;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 3;
  void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // uint64 appid = 1;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::uint64 appid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellRegisterToServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.TellRegisterToServer) */ {
 public:
  TellRegisterToServer();
  virtual ~TellRegisterToServer();

  TellRegisterToServer(const TellRegisterToServer& from);

  inline TellRegisterToServer& operator=(const TellRegisterToServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellRegisterToServer(TellRegisterToServer&& from) noexcept
    : TellRegisterToServer() {
    *this = ::std::move(from);
  }

  inline TellRegisterToServer& operator=(TellRegisterToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TellRegisterToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellRegisterToServer* internal_default_instance() {
    return reinterpret_cast<const TellRegisterToServer*>(
               &_TellRegisterToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TellRegisterToServer* other);
  friend void swap(TellRegisterToServer& a, TellRegisterToServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellRegisterToServer* New() const final {
    return CreateMaybeMessage<TellRegisterToServer>(NULL);
  }

  TellRegisterToServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellRegisterToServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellRegisterToServer& from);
  void MergeFrom(const TellRegisterToServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellRegisterToServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.ListenData listen = 1;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 1;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.TellRegisterToServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::ListenData* listen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellUnRegisterFromServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.TellUnRegisterFromServer) */ {
 public:
  TellUnRegisterFromServer();
  virtual ~TellUnRegisterFromServer();

  TellUnRegisterFromServer(const TellUnRegisterFromServer& from);

  inline TellUnRegisterFromServer& operator=(const TellUnRegisterFromServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellUnRegisterFromServer(TellUnRegisterFromServer&& from) noexcept
    : TellUnRegisterFromServer() {
    *this = ::std::move(from);
  }

  inline TellUnRegisterFromServer& operator=(TellUnRegisterFromServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TellUnRegisterFromServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellUnRegisterFromServer* internal_default_instance() {
    return reinterpret_cast<const TellUnRegisterFromServer*>(
               &_TellUnRegisterFromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TellUnRegisterFromServer* other);
  friend void swap(TellUnRegisterFromServer& a, TellUnRegisterFromServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellUnRegisterFromServer* New() const final {
    return CreateMaybeMessage<TellUnRegisterFromServer>(NULL);
  }

  TellUnRegisterFromServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellUnRegisterFromServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellUnRegisterFromServer& from);
  void MergeFrom(const TellUnRegisterFromServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellUnRegisterFromServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes appname = 1;
  void clear_appname();
  static const int kAppnameFieldNumber = 1;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 2;
  void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // uint64 appid = 3;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.TellUnRegisterFromServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::uint64 appid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellDiscoverServerToMaster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STellDiscoverServerToMaster) */ {
 public:
  S2STellDiscoverServerToMaster();
  virtual ~S2STellDiscoverServerToMaster();

  S2STellDiscoverServerToMaster(const S2STellDiscoverServerToMaster& from);

  inline S2STellDiscoverServerToMaster& operator=(const S2STellDiscoverServerToMaster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STellDiscoverServerToMaster(S2STellDiscoverServerToMaster&& from) noexcept
    : S2STellDiscoverServerToMaster() {
    *this = ::std::move(from);
  }

  inline S2STellDiscoverServerToMaster& operator=(S2STellDiscoverServerToMaster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellDiscoverServerToMaster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STellDiscoverServerToMaster* internal_default_instance() {
    return reinterpret_cast<const S2STellDiscoverServerToMaster*>(
               &_S2STellDiscoverServerToMaster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(S2STellDiscoverServerToMaster* other);
  friend void swap(S2STellDiscoverServerToMaster& a, S2STellDiscoverServerToMaster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STellDiscoverServerToMaster* New() const final {
    return CreateMaybeMessage<S2STellDiscoverServerToMaster>(NULL);
  }

  S2STellDiscoverServerToMaster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STellDiscoverServerToMaster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STellDiscoverServerToMaster& from);
  void MergeFrom(const S2STellDiscoverServerToMaster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STellDiscoverServerToMaster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.ListenData listen = 2;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 2;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // uint64 serverid = 1;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellDiscoverServerToMaster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::ListenData* listen_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellLostServerToMaster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STellLostServerToMaster) */ {
 public:
  S2STellLostServerToMaster();
  virtual ~S2STellLostServerToMaster();

  S2STellLostServerToMaster(const S2STellLostServerToMaster& from);

  inline S2STellLostServerToMaster& operator=(const S2STellLostServerToMaster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STellLostServerToMaster(S2STellLostServerToMaster&& from) noexcept
    : S2STellLostServerToMaster() {
    *this = ::std::move(from);
  }

  inline S2STellLostServerToMaster& operator=(S2STellLostServerToMaster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellLostServerToMaster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STellLostServerToMaster* internal_default_instance() {
    return reinterpret_cast<const S2STellLostServerToMaster*>(
               &_S2STellLostServerToMaster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(S2STellLostServerToMaster* other);
  friend void swap(S2STellLostServerToMaster& a, S2STellLostServerToMaster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STellLostServerToMaster* New() const final {
    return CreateMaybeMessage<S2STellLostServerToMaster>(NULL);
  }

  S2STellLostServerToMaster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STellLostServerToMaster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STellLostServerToMaster& from);
  void MergeFrom(const S2STellLostServerToMaster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STellLostServerToMaster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes appname = 1;
  void clear_appname();
  static const int kAppnameFieldNumber = 1;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 2;
  void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // uint64 appid = 3;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellLostServerToMaster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::uint64 appid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellRegisterServerToMaster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STellRegisterServerToMaster) */ {
 public:
  S2STellRegisterServerToMaster();
  virtual ~S2STellRegisterServerToMaster();

  S2STellRegisterServerToMaster(const S2STellRegisterServerToMaster& from);

  inline S2STellRegisterServerToMaster& operator=(const S2STellRegisterServerToMaster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STellRegisterServerToMaster(S2STellRegisterServerToMaster&& from) noexcept
    : S2STellRegisterServerToMaster() {
    *this = ::std::move(from);
  }

  inline S2STellRegisterServerToMaster& operator=(S2STellRegisterServerToMaster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellRegisterServerToMaster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STellRegisterServerToMaster* internal_default_instance() {
    return reinterpret_cast<const S2STellRegisterServerToMaster*>(
               &_S2STellRegisterServerToMaster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(S2STellRegisterServerToMaster* other);
  friend void swap(S2STellRegisterServerToMaster& a, S2STellRegisterServerToMaster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STellRegisterServerToMaster* New() const final {
    return CreateMaybeMessage<S2STellRegisterServerToMaster>(NULL);
  }

  S2STellRegisterServerToMaster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STellRegisterServerToMaster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STellRegisterServerToMaster& from);
  void MergeFrom(const S2STellRegisterServerToMaster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STellRegisterServerToMaster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.ListenData listen = 2;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 2;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // uint64 serverid = 1;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellRegisterServerToMaster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::ListenData* listen_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellServerListToMaster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STellServerListToMaster) */ {
 public:
  S2STellServerListToMaster();
  virtual ~S2STellServerListToMaster();

  S2STellServerListToMaster(const S2STellServerListToMaster& from);

  inline S2STellServerListToMaster& operator=(const S2STellServerListToMaster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STellServerListToMaster(S2STellServerListToMaster&& from) noexcept
    : S2STellServerListToMaster() {
    *this = ::std::move(from);
  }

  inline S2STellServerListToMaster& operator=(S2STellServerListToMaster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellServerListToMaster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STellServerListToMaster* internal_default_instance() {
    return reinterpret_cast<const S2STellServerListToMaster*>(
               &_S2STellServerListToMaster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(S2STellServerListToMaster* other);
  friend void swap(S2STellServerListToMaster& a, S2STellServerListToMaster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STellServerListToMaster* New() const final {
    return CreateMaybeMessage<S2STellServerListToMaster>(NULL);
  }

  S2STellServerListToMaster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STellServerListToMaster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STellServerListToMaster& from);
  void MergeFrom(const S2STellServerListToMaster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STellServerListToMaster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.ListenData listen = 1;
  int listen_size() const;
  void clear_listen();
  static const int kListenFieldNumber = 1;
  ::KFMsg::ListenData* mutable_listen(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >*
      mutable_listen();
  const ::KFMsg::ListenData& listen(int index) const;
  ::KFMsg::ListenData* add_listen();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >&
      listen() const;

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellServerListToMaster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData > listen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterRegisterToMasterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterRegisterToMasterReq) */ {
 public:
  S2SClusterRegisterToMasterReq();
  virtual ~S2SClusterRegisterToMasterReq();

  S2SClusterRegisterToMasterReq(const S2SClusterRegisterToMasterReq& from);

  inline S2SClusterRegisterToMasterReq& operator=(const S2SClusterRegisterToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterRegisterToMasterReq(S2SClusterRegisterToMasterReq&& from) noexcept
    : S2SClusterRegisterToMasterReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterRegisterToMasterReq& operator=(S2SClusterRegisterToMasterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterRegisterToMasterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterRegisterToMasterReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterRegisterToMasterReq*>(
               &_S2SClusterRegisterToMasterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(S2SClusterRegisterToMasterReq* other);
  friend void swap(S2SClusterRegisterToMasterReq& a, S2SClusterRegisterToMasterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterRegisterToMasterReq* New() const final {
    return CreateMaybeMessage<S2SClusterRegisterToMasterReq>(NULL);
  }

  S2SClusterRegisterToMasterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterRegisterToMasterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterRegisterToMasterReq& from);
  void MergeFrom(const S2SClusterRegisterToMasterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterRegisterToMasterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.ListenData listen = 1;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 1;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterRegisterToMasterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::ListenData* listen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterSyncProxyToMasterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterSyncProxyToMasterReq) */ {
 public:
  S2SClusterSyncProxyToMasterReq();
  virtual ~S2SClusterSyncProxyToMasterReq();

  S2SClusterSyncProxyToMasterReq(const S2SClusterSyncProxyToMasterReq& from);

  inline S2SClusterSyncProxyToMasterReq& operator=(const S2SClusterSyncProxyToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterSyncProxyToMasterReq(S2SClusterSyncProxyToMasterReq&& from) noexcept
    : S2SClusterSyncProxyToMasterReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterSyncProxyToMasterReq& operator=(S2SClusterSyncProxyToMasterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterSyncProxyToMasterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterSyncProxyToMasterReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterSyncProxyToMasterReq*>(
               &_S2SClusterSyncProxyToMasterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(S2SClusterSyncProxyToMasterReq* other);
  friend void swap(S2SClusterSyncProxyToMasterReq& a, S2SClusterSyncProxyToMasterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterSyncProxyToMasterReq* New() const final {
    return CreateMaybeMessage<S2SClusterSyncProxyToMasterReq>(NULL);
  }

  S2SClusterSyncProxyToMasterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterSyncProxyToMasterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterSyncProxyToMasterReq& from);
  void MergeFrom(const S2SClusterSyncProxyToMasterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterSyncProxyToMasterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.ListenData listen = 1;
  int listen_size() const;
  void clear_listen();
  static const int kListenFieldNumber = 1;
  ::KFMsg::ListenData* mutable_listen(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >*
      mutable_listen();
  const ::KFMsg::ListenData& listen(int index) const;
  ::KFMsg::ListenData* add_listen();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >&
      listen() const;

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterSyncProxyToMasterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData > listen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterAuthToMasterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterAuthToMasterReq) */ {
 public:
  S2SClusterAuthToMasterReq();
  virtual ~S2SClusterAuthToMasterReq();

  S2SClusterAuthToMasterReq(const S2SClusterAuthToMasterReq& from);

  inline S2SClusterAuthToMasterReq& operator=(const S2SClusterAuthToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterAuthToMasterReq(S2SClusterAuthToMasterReq&& from) noexcept
    : S2SClusterAuthToMasterReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterAuthToMasterReq& operator=(S2SClusterAuthToMasterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterAuthToMasterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterAuthToMasterReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterAuthToMasterReq*>(
               &_S2SClusterAuthToMasterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(S2SClusterAuthToMasterReq* other);
  friend void swap(S2SClusterAuthToMasterReq& a, S2SClusterAuthToMasterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterAuthToMasterReq* New() const final {
    return CreateMaybeMessage<S2SClusterAuthToMasterReq>(NULL);
  }

  S2SClusterAuthToMasterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterAuthToMasterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterAuthToMasterReq& from);
  void MergeFrom(const S2SClusterAuthToMasterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterAuthToMasterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes clusterkey = 2;
  void clear_clusterkey();
  static const int kClusterkeyFieldNumber = 2;
  const ::std::string& clusterkey() const;
  void set_clusterkey(const ::std::string& value);
  #if LANG_CXX11
  void set_clusterkey(::std::string&& value);
  #endif
  void set_clusterkey(const char* value);
  void set_clusterkey(const void* value, size_t size);
  ::std::string* mutable_clusterkey();
  ::std::string* release_clusterkey();
  void set_allocated_clusterkey(::std::string* clusterkey);

  // uint64 clientid = 1;
  void clear_clientid();
  static const int kClientidFieldNumber = 1;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterAuthToMasterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clusterkey_;
  ::google::protobuf::uint64 clientid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterAuthToClientAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterAuthToClientAck) */ {
 public:
  S2SClusterAuthToClientAck();
  virtual ~S2SClusterAuthToClientAck();

  S2SClusterAuthToClientAck(const S2SClusterAuthToClientAck& from);

  inline S2SClusterAuthToClientAck& operator=(const S2SClusterAuthToClientAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterAuthToClientAck(S2SClusterAuthToClientAck&& from) noexcept
    : S2SClusterAuthToClientAck() {
    *this = ::std::move(from);
  }

  inline S2SClusterAuthToClientAck& operator=(S2SClusterAuthToClientAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterAuthToClientAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterAuthToClientAck* internal_default_instance() {
    return reinterpret_cast<const S2SClusterAuthToClientAck*>(
               &_S2SClusterAuthToClientAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(S2SClusterAuthToClientAck* other);
  friend void swap(S2SClusterAuthToClientAck& a, S2SClusterAuthToClientAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterAuthToClientAck* New() const final {
    return CreateMaybeMessage<S2SClusterAuthToClientAck>(NULL);
  }

  S2SClusterAuthToClientAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterAuthToClientAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterAuthToClientAck& from);
  void MergeFrom(const S2SClusterAuthToClientAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterAuthToClientAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .KFMsg.ListenData listen = 2;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 2;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterAuthToClientAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::KFMsg::ListenData* listen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterTokenToProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterTokenToProxyReq) */ {
 public:
  S2SClusterTokenToProxyReq();
  virtual ~S2SClusterTokenToProxyReq();

  S2SClusterTokenToProxyReq(const S2SClusterTokenToProxyReq& from);

  inline S2SClusterTokenToProxyReq& operator=(const S2SClusterTokenToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterTokenToProxyReq(S2SClusterTokenToProxyReq&& from) noexcept
    : S2SClusterTokenToProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterTokenToProxyReq& operator=(S2SClusterTokenToProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterTokenToProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterTokenToProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterTokenToProxyReq*>(
               &_S2SClusterTokenToProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(S2SClusterTokenToProxyReq* other);
  friend void swap(S2SClusterTokenToProxyReq& a, S2SClusterTokenToProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterTokenToProxyReq* New() const final {
    return CreateMaybeMessage<S2SClusterTokenToProxyReq>(NULL);
  }

  S2SClusterTokenToProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterTokenToProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterTokenToProxyReq& from);
  void MergeFrom(const S2SClusterTokenToProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterTokenToProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 proxyid = 3;
  void clear_proxyid();
  static const int kProxyidFieldNumber = 3;
  ::google::protobuf::uint64 proxyid() const;
  void set_proxyid(::google::protobuf::uint64 value);

  // uint64 masterid = 4;
  void clear_masterid();
  static const int kMasteridFieldNumber = 4;
  ::google::protobuf::uint64 masterid() const;
  void set_masterid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterTokenToProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 proxyid_;
  ::google::protobuf::uint64 masterid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterTokenToMasterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterTokenToMasterReq) */ {
 public:
  S2SClusterTokenToMasterReq();
  virtual ~S2SClusterTokenToMasterReq();

  S2SClusterTokenToMasterReq(const S2SClusterTokenToMasterReq& from);

  inline S2SClusterTokenToMasterReq& operator=(const S2SClusterTokenToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterTokenToMasterReq(S2SClusterTokenToMasterReq&& from) noexcept
    : S2SClusterTokenToMasterReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterTokenToMasterReq& operator=(S2SClusterTokenToMasterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterTokenToMasterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterTokenToMasterReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterTokenToMasterReq*>(
               &_S2SClusterTokenToMasterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(S2SClusterTokenToMasterReq* other);
  friend void swap(S2SClusterTokenToMasterReq& a, S2SClusterTokenToMasterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterTokenToMasterReq* New() const final {
    return CreateMaybeMessage<S2SClusterTokenToMasterReq>(NULL);
  }

  S2SClusterTokenToMasterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterTokenToMasterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterTokenToMasterReq& from);
  void MergeFrom(const S2SClusterTokenToMasterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterTokenToMasterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 proxyid = 3;
  void clear_proxyid();
  static const int kProxyidFieldNumber = 3;
  ::google::protobuf::uint64 proxyid() const;
  void set_proxyid(::google::protobuf::uint64 value);

  // uint64 masterid = 4;
  void clear_masterid();
  static const int kMasteridFieldNumber = 4;
  ::google::protobuf::uint64 masterid() const;
  void set_masterid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterTokenToMasterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 proxyid_;
  ::google::protobuf::uint64 masterid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterVerifyToProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterVerifyToProxyReq) */ {
 public:
  S2SClusterVerifyToProxyReq();
  virtual ~S2SClusterVerifyToProxyReq();

  S2SClusterVerifyToProxyReq(const S2SClusterVerifyToProxyReq& from);

  inline S2SClusterVerifyToProxyReq& operator=(const S2SClusterVerifyToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterVerifyToProxyReq(S2SClusterVerifyToProxyReq&& from) noexcept
    : S2SClusterVerifyToProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterVerifyToProxyReq& operator=(S2SClusterVerifyToProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterVerifyToProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterVerifyToProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterVerifyToProxyReq*>(
               &_S2SClusterVerifyToProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(S2SClusterVerifyToProxyReq* other);
  friend void swap(S2SClusterVerifyToProxyReq& a, S2SClusterVerifyToProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterVerifyToProxyReq* New() const final {
    return CreateMaybeMessage<S2SClusterVerifyToProxyReq>(NULL);
  }

  S2SClusterVerifyToProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterVerifyToProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterVerifyToProxyReq& from);
  void MergeFrom(const S2SClusterVerifyToProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterVerifyToProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 serverid = 2;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterVerifyToProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterTokenToProxyAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterTokenToProxyAck) */ {
 public:
  S2SClusterTokenToProxyAck();
  virtual ~S2SClusterTokenToProxyAck();

  S2SClusterTokenToProxyAck(const S2SClusterTokenToProxyAck& from);

  inline S2SClusterTokenToProxyAck& operator=(const S2SClusterTokenToProxyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterTokenToProxyAck(S2SClusterTokenToProxyAck&& from) noexcept
    : S2SClusterTokenToProxyAck() {
    *this = ::std::move(from);
  }

  inline S2SClusterTokenToProxyAck& operator=(S2SClusterTokenToProxyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterTokenToProxyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterTokenToProxyAck* internal_default_instance() {
    return reinterpret_cast<const S2SClusterTokenToProxyAck*>(
               &_S2SClusterTokenToProxyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(S2SClusterTokenToProxyAck* other);
  friend void swap(S2SClusterTokenToProxyAck& a, S2SClusterTokenToProxyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterTokenToProxyAck* New() const final {
    return CreateMaybeMessage<S2SClusterTokenToProxyAck>(NULL);
  }

  S2SClusterTokenToProxyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterTokenToProxyAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterTokenToProxyAck& from);
  void MergeFrom(const S2SClusterTokenToProxyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterTokenToProxyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 proxyid = 3;
  void clear_proxyid();
  static const int kProxyidFieldNumber = 3;
  ::google::protobuf::uint64 proxyid() const;
  void set_proxyid(::google::protobuf::uint64 value);

  // uint64 masterid = 4;
  void clear_masterid();
  static const int kMasteridFieldNumber = 4;
  ::google::protobuf::uint64 masterid() const;
  void set_masterid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterTokenToProxyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 proxyid_;
  ::google::protobuf::uint64 masterid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterTokenToMasterAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterTokenToMasterAck) */ {
 public:
  S2SClusterTokenToMasterAck();
  virtual ~S2SClusterTokenToMasterAck();

  S2SClusterTokenToMasterAck(const S2SClusterTokenToMasterAck& from);

  inline S2SClusterTokenToMasterAck& operator=(const S2SClusterTokenToMasterAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterTokenToMasterAck(S2SClusterTokenToMasterAck&& from) noexcept
    : S2SClusterTokenToMasterAck() {
    *this = ::std::move(from);
  }

  inline S2SClusterTokenToMasterAck& operator=(S2SClusterTokenToMasterAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterTokenToMasterAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterTokenToMasterAck* internal_default_instance() {
    return reinterpret_cast<const S2SClusterTokenToMasterAck*>(
               &_S2SClusterTokenToMasterAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(S2SClusterTokenToMasterAck* other);
  friend void swap(S2SClusterTokenToMasterAck& a, S2SClusterTokenToMasterAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterTokenToMasterAck* New() const final {
    return CreateMaybeMessage<S2SClusterTokenToMasterAck>(NULL);
  }

  S2SClusterTokenToMasterAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterTokenToMasterAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterTokenToMasterAck& from);
  void MergeFrom(const S2SClusterTokenToMasterAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterTokenToMasterAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 proxyid = 3;
  void clear_proxyid();
  static const int kProxyidFieldNumber = 3;
  ::google::protobuf::uint64 proxyid() const;
  void set_proxyid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterTokenToMasterAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 proxyid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterVerifyToClientAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterVerifyToClientAck) */ {
 public:
  S2SClusterVerifyToClientAck();
  virtual ~S2SClusterVerifyToClientAck();

  S2SClusterVerifyToClientAck(const S2SClusterVerifyToClientAck& from);

  inline S2SClusterVerifyToClientAck& operator=(const S2SClusterVerifyToClientAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterVerifyToClientAck(S2SClusterVerifyToClientAck&& from) noexcept
    : S2SClusterVerifyToClientAck() {
    *this = ::std::move(from);
  }

  inline S2SClusterVerifyToClientAck& operator=(S2SClusterVerifyToClientAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterVerifyToClientAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterVerifyToClientAck* internal_default_instance() {
    return reinterpret_cast<const S2SClusterVerifyToClientAck*>(
               &_S2SClusterVerifyToClientAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(S2SClusterVerifyToClientAck* other);
  friend void swap(S2SClusterVerifyToClientAck& a, S2SClusterVerifyToClientAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterVerifyToClientAck* New() const final {
    return CreateMaybeMessage<S2SClusterVerifyToClientAck>(NULL);
  }

  S2SClusterVerifyToClientAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterVerifyToClientAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterVerifyToClientAck& from);
  void MergeFrom(const S2SClusterVerifyToClientAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterVerifyToClientAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 serverid = 1;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterVerifyToClientAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterClientDiscoverToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterClientDiscoverToShardReq) */ {
 public:
  S2SClusterClientDiscoverToShardReq();
  virtual ~S2SClusterClientDiscoverToShardReq();

  S2SClusterClientDiscoverToShardReq(const S2SClusterClientDiscoverToShardReq& from);

  inline S2SClusterClientDiscoverToShardReq& operator=(const S2SClusterClientDiscoverToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterClientDiscoverToShardReq(S2SClusterClientDiscoverToShardReq&& from) noexcept
    : S2SClusterClientDiscoverToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterClientDiscoverToShardReq& operator=(S2SClusterClientDiscoverToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterClientDiscoverToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterClientDiscoverToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterClientDiscoverToShardReq*>(
               &_S2SClusterClientDiscoverToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(S2SClusterClientDiscoverToShardReq* other);
  friend void swap(S2SClusterClientDiscoverToShardReq& a, S2SClusterClientDiscoverToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterClientDiscoverToShardReq* New() const final {
    return CreateMaybeMessage<S2SClusterClientDiscoverToShardReq>(NULL);
  }

  S2SClusterClientDiscoverToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterClientDiscoverToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterClientDiscoverToShardReq& from);
  void MergeFrom(const S2SClusterClientDiscoverToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterClientDiscoverToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 clientid = 1;
  int clientid_size() const;
  void clear_clientid();
  static const int kClientidFieldNumber = 1;
  ::google::protobuf::uint64 clientid(int index) const;
  void set_clientid(int index, ::google::protobuf::uint64 value);
  void add_clientid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      clientid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_clientid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterClientDiscoverToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > clientid_;
  mutable int _clientid_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterClientLostToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterClientLostToShardReq) */ {
 public:
  S2SClusterClientLostToShardReq();
  virtual ~S2SClusterClientLostToShardReq();

  S2SClusterClientLostToShardReq(const S2SClusterClientLostToShardReq& from);

  inline S2SClusterClientLostToShardReq& operator=(const S2SClusterClientLostToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterClientLostToShardReq(S2SClusterClientLostToShardReq&& from) noexcept
    : S2SClusterClientLostToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterClientLostToShardReq& operator=(S2SClusterClientLostToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterClientLostToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterClientLostToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterClientLostToShardReq*>(
               &_S2SClusterClientLostToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(S2SClusterClientLostToShardReq* other);
  friend void swap(S2SClusterClientLostToShardReq& a, S2SClusterClientLostToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterClientLostToShardReq* New() const final {
    return CreateMaybeMessage<S2SClusterClientLostToShardReq>(NULL);
  }

  S2SClusterClientLostToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterClientLostToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterClientLostToShardReq& from);
  void MergeFrom(const S2SClusterClientLostToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterClientLostToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 clientid = 1;
  void clear_clientid();
  static const int kClientidFieldNumber = 1;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterClientLostToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 clientid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterLostProxyToMasterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SClusterLostProxyToMasterReq) */ {
 public:
  S2SClusterLostProxyToMasterReq();
  virtual ~S2SClusterLostProxyToMasterReq();

  S2SClusterLostProxyToMasterReq(const S2SClusterLostProxyToMasterReq& from);

  inline S2SClusterLostProxyToMasterReq& operator=(const S2SClusterLostProxyToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SClusterLostProxyToMasterReq(S2SClusterLostProxyToMasterReq&& from) noexcept
    : S2SClusterLostProxyToMasterReq() {
    *this = ::std::move(from);
  }

  inline S2SClusterLostProxyToMasterReq& operator=(S2SClusterLostProxyToMasterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterLostProxyToMasterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SClusterLostProxyToMasterReq* internal_default_instance() {
    return reinterpret_cast<const S2SClusterLostProxyToMasterReq*>(
               &_S2SClusterLostProxyToMasterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(S2SClusterLostProxyToMasterReq* other);
  friend void swap(S2SClusterLostProxyToMasterReq& a, S2SClusterLostProxyToMasterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SClusterLostProxyToMasterReq* New() const final {
    return CreateMaybeMessage<S2SClusterLostProxyToMasterReq>(NULL);
  }

  S2SClusterLostProxyToMasterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SClusterLostProxyToMasterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SClusterLostProxyToMasterReq& from);
  void MergeFrom(const S2SClusterLostProxyToMasterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SClusterLostProxyToMasterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 proxyid = 1;
  void clear_proxyid();
  static const int kProxyidFieldNumber = 1;
  ::google::protobuf::uint64 proxyid() const;
  void set_proxyid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterLostProxyToMasterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 proxyid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBRoute) */ {
 public:
  PBRoute();
  virtual ~PBRoute();

  PBRoute(const PBRoute& from);

  inline PBRoute& operator=(const PBRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBRoute(PBRoute&& from) noexcept
    : PBRoute() {
    *this = ::std::move(from);
  }

  inline PBRoute& operator=(PBRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBRoute* internal_default_instance() {
    return reinterpret_cast<const PBRoute*>(
               &_PBRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(PBRoute* other);
  friend void swap(PBRoute& a, PBRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBRoute* New() const final {
    return CreateMaybeMessage<PBRoute>(NULL);
  }

  PBRoute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBRoute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBRoute& from);
  void MergeFrom(const PBRoute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 serverid = 1;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint64 sendid = 2;
  void clear_sendid();
  static const int kSendidFieldNumber = 2;
  ::google::protobuf::uint64 sendid() const;
  void set_sendid(::google::protobuf::uint64 value);

  // uint64 recvid = 3;
  void clear_recvid();
  static const int kRecvidFieldNumber = 3;
  ::google::protobuf::uint64 recvid() const;
  void set_recvid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBRoute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint64 sendid_;
  ::google::protobuf::uint64 recvid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteMessageToClientAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteMessageToClientAck) */ {
 public:
  S2SRouteMessageToClientAck();
  virtual ~S2SRouteMessageToClientAck();

  S2SRouteMessageToClientAck(const S2SRouteMessageToClientAck& from);

  inline S2SRouteMessageToClientAck& operator=(const S2SRouteMessageToClientAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteMessageToClientAck(S2SRouteMessageToClientAck&& from) noexcept
    : S2SRouteMessageToClientAck() {
    *this = ::std::move(from);
  }

  inline S2SRouteMessageToClientAck& operator=(S2SRouteMessageToClientAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteMessageToClientAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteMessageToClientAck* internal_default_instance() {
    return reinterpret_cast<const S2SRouteMessageToClientAck*>(
               &_S2SRouteMessageToClientAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(S2SRouteMessageToClientAck* other);
  friend void swap(S2SRouteMessageToClientAck& a, S2SRouteMessageToClientAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteMessageToClientAck* New() const final {
    return CreateMaybeMessage<S2SRouteMessageToClientAck>(NULL);
  }

  S2SRouteMessageToClientAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteMessageToClientAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteMessageToClientAck& from);
  void MergeFrom(const S2SRouteMessageToClientAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteMessageToClientAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 3;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // .KFMsg.PBRoute pbroute = 1;
  bool has_pbroute() const;
  void clear_pbroute();
  static const int kPbrouteFieldNumber = 1;
  private:
  const ::KFMsg::PBRoute& _internal_pbroute() const;
  public:
  const ::KFMsg::PBRoute& pbroute() const;
  ::KFMsg::PBRoute* release_pbroute();
  ::KFMsg::PBRoute* mutable_pbroute();
  void set_allocated_pbroute(::KFMsg::PBRoute* pbroute);

  // uint32 msgid = 2;
  void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteMessageToClientAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::KFMsg::PBRoute* pbroute_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteMessageToNameAllReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteMessageToNameAllReq) */ {
 public:
  S2SRouteMessageToNameAllReq();
  virtual ~S2SRouteMessageToNameAllReq();

  S2SRouteMessageToNameAllReq(const S2SRouteMessageToNameAllReq& from);

  inline S2SRouteMessageToNameAllReq& operator=(const S2SRouteMessageToNameAllReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteMessageToNameAllReq(S2SRouteMessageToNameAllReq&& from) noexcept
    : S2SRouteMessageToNameAllReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteMessageToNameAllReq& operator=(S2SRouteMessageToNameAllReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteMessageToNameAllReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteMessageToNameAllReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteMessageToNameAllReq*>(
               &_S2SRouteMessageToNameAllReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(S2SRouteMessageToNameAllReq* other);
  friend void swap(S2SRouteMessageToNameAllReq& a, S2SRouteMessageToNameAllReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteMessageToNameAllReq* New() const final {
    return CreateMaybeMessage<S2SRouteMessageToNameAllReq>(NULL);
  }

  S2SRouteMessageToNameAllReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteMessageToNameAllReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteMessageToNameAllReq& from);
  void MergeFrom(const S2SRouteMessageToNameAllReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteMessageToNameAllReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes msgdata = 4;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 4;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // .KFMsg.PBRoute pbroute = 1;
  bool has_pbroute() const;
  void clear_pbroute();
  static const int kPbrouteFieldNumber = 1;
  private:
  const ::KFMsg::PBRoute& _internal_pbroute() const;
  public:
  const ::KFMsg::PBRoute& pbroute() const;
  ::KFMsg::PBRoute* release_pbroute();
  ::KFMsg::PBRoute* mutable_pbroute();
  void set_allocated_pbroute(::KFMsg::PBRoute* pbroute);

  // uint32 msgid = 3;
  void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteMessageToNameAllReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::KFMsg::PBRoute* pbroute_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteMessageToNameRandReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteMessageToNameRandReq) */ {
 public:
  S2SRouteMessageToNameRandReq();
  virtual ~S2SRouteMessageToNameRandReq();

  S2SRouteMessageToNameRandReq(const S2SRouteMessageToNameRandReq& from);

  inline S2SRouteMessageToNameRandReq& operator=(const S2SRouteMessageToNameRandReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteMessageToNameRandReq(S2SRouteMessageToNameRandReq&& from) noexcept
    : S2SRouteMessageToNameRandReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteMessageToNameRandReq& operator=(S2SRouteMessageToNameRandReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteMessageToNameRandReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteMessageToNameRandReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteMessageToNameRandReq*>(
               &_S2SRouteMessageToNameRandReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(S2SRouteMessageToNameRandReq* other);
  friend void swap(S2SRouteMessageToNameRandReq& a, S2SRouteMessageToNameRandReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteMessageToNameRandReq* New() const final {
    return CreateMaybeMessage<S2SRouteMessageToNameRandReq>(NULL);
  }

  S2SRouteMessageToNameRandReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteMessageToNameRandReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteMessageToNameRandReq& from);
  void MergeFrom(const S2SRouteMessageToNameRandReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteMessageToNameRandReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes msgdata = 4;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 4;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // .KFMsg.PBRoute pbroute = 1;
  bool has_pbroute() const;
  void clear_pbroute();
  static const int kPbrouteFieldNumber = 1;
  private:
  const ::KFMsg::PBRoute& _internal_pbroute() const;
  public:
  const ::KFMsg::PBRoute& pbroute() const;
  ::KFMsg::PBRoute* release_pbroute();
  ::KFMsg::PBRoute* mutable_pbroute();
  void set_allocated_pbroute(::KFMsg::PBRoute* pbroute);

  // uint32 msgid = 3;
  void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteMessageToNameRandReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::KFMsg::PBRoute* pbroute_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteMessageToNameBalanceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteMessageToNameBalanceReq) */ {
 public:
  S2SRouteMessageToNameBalanceReq();
  virtual ~S2SRouteMessageToNameBalanceReq();

  S2SRouteMessageToNameBalanceReq(const S2SRouteMessageToNameBalanceReq& from);

  inline S2SRouteMessageToNameBalanceReq& operator=(const S2SRouteMessageToNameBalanceReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteMessageToNameBalanceReq(S2SRouteMessageToNameBalanceReq&& from) noexcept
    : S2SRouteMessageToNameBalanceReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteMessageToNameBalanceReq& operator=(S2SRouteMessageToNameBalanceReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteMessageToNameBalanceReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteMessageToNameBalanceReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteMessageToNameBalanceReq*>(
               &_S2SRouteMessageToNameBalanceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(S2SRouteMessageToNameBalanceReq* other);
  friend void swap(S2SRouteMessageToNameBalanceReq& a, S2SRouteMessageToNameBalanceReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteMessageToNameBalanceReq* New() const final {
    return CreateMaybeMessage<S2SRouteMessageToNameBalanceReq>(NULL);
  }

  S2SRouteMessageToNameBalanceReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteMessageToNameBalanceReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteMessageToNameBalanceReq& from);
  void MergeFrom(const S2SRouteMessageToNameBalanceReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteMessageToNameBalanceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes msgdata = 4;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 4;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // .KFMsg.PBRoute pbroute = 1;
  bool has_pbroute() const;
  void clear_pbroute();
  static const int kPbrouteFieldNumber = 1;
  private:
  const ::KFMsg::PBRoute& _internal_pbroute() const;
  public:
  const ::KFMsg::PBRoute& pbroute() const;
  ::KFMsg::PBRoute* release_pbroute();
  ::KFMsg::PBRoute* mutable_pbroute();
  void set_allocated_pbroute(::KFMsg::PBRoute* pbroute);

  // uint32 msgid = 3;
  void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteMessageToNameBalanceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::KFMsg::PBRoute* pbroute_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteMessageToNameObjectReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteMessageToNameObjectReq) */ {
 public:
  S2SRouteMessageToNameObjectReq();
  virtual ~S2SRouteMessageToNameObjectReq();

  S2SRouteMessageToNameObjectReq(const S2SRouteMessageToNameObjectReq& from);

  inline S2SRouteMessageToNameObjectReq& operator=(const S2SRouteMessageToNameObjectReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteMessageToNameObjectReq(S2SRouteMessageToNameObjectReq&& from) noexcept
    : S2SRouteMessageToNameObjectReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteMessageToNameObjectReq& operator=(S2SRouteMessageToNameObjectReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteMessageToNameObjectReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteMessageToNameObjectReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteMessageToNameObjectReq*>(
               &_S2SRouteMessageToNameObjectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(S2SRouteMessageToNameObjectReq* other);
  friend void swap(S2SRouteMessageToNameObjectReq& a, S2SRouteMessageToNameObjectReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteMessageToNameObjectReq* New() const final {
    return CreateMaybeMessage<S2SRouteMessageToNameObjectReq>(NULL);
  }

  S2SRouteMessageToNameObjectReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteMessageToNameObjectReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteMessageToNameObjectReq& from);
  void MergeFrom(const S2SRouteMessageToNameObjectReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteMessageToNameObjectReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes msgdata = 4;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 4;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // .KFMsg.PBRoute pbroute = 1;
  bool has_pbroute() const;
  void clear_pbroute();
  static const int kPbrouteFieldNumber = 1;
  private:
  const ::KFMsg::PBRoute& _internal_pbroute() const;
  public:
  const ::KFMsg::PBRoute& pbroute() const;
  ::KFMsg::PBRoute* release_pbroute();
  ::KFMsg::PBRoute* mutable_pbroute();
  void set_allocated_pbroute(::KFMsg::PBRoute* pbroute);

  // uint32 msgid = 3;
  void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteMessageToNameObjectReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::KFMsg::PBRoute* pbroute_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteMessageToServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteMessageToServerReq) */ {
 public:
  S2SRouteMessageToServerReq();
  virtual ~S2SRouteMessageToServerReq();

  S2SRouteMessageToServerReq(const S2SRouteMessageToServerReq& from);

  inline S2SRouteMessageToServerReq& operator=(const S2SRouteMessageToServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteMessageToServerReq(S2SRouteMessageToServerReq&& from) noexcept
    : S2SRouteMessageToServerReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteMessageToServerReq& operator=(S2SRouteMessageToServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteMessageToServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteMessageToServerReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteMessageToServerReq*>(
               &_S2SRouteMessageToServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(S2SRouteMessageToServerReq* other);
  friend void swap(S2SRouteMessageToServerReq& a, S2SRouteMessageToServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteMessageToServerReq* New() const final {
    return CreateMaybeMessage<S2SRouteMessageToServerReq>(NULL);
  }

  S2SRouteMessageToServerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteMessageToServerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteMessageToServerReq& from);
  void MergeFrom(const S2SRouteMessageToServerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteMessageToServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 4;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 4;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // .KFMsg.PBRoute pbroute = 1;
  bool has_pbroute() const;
  void clear_pbroute();
  static const int kPbrouteFieldNumber = 1;
  private:
  const ::KFMsg::PBRoute& _internal_pbroute() const;
  public:
  const ::KFMsg::PBRoute& pbroute() const;
  ::KFMsg::PBRoute* release_pbroute();
  ::KFMsg::PBRoute* mutable_pbroute();
  void set_allocated_pbroute(::KFMsg::PBRoute* pbroute);

  // uint64 targetid = 2;
  void clear_targetid();
  static const int kTargetidFieldNumber = 2;
  ::google::protobuf::uint64 targetid() const;
  void set_targetid(::google::protobuf::uint64 value);

  // uint32 msgid = 3;
  void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteMessageToServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::KFMsg::PBRoute* pbroute_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteMessageToPlayerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteMessageToPlayerReq) */ {
 public:
  S2SRouteMessageToPlayerReq();
  virtual ~S2SRouteMessageToPlayerReq();

  S2SRouteMessageToPlayerReq(const S2SRouteMessageToPlayerReq& from);

  inline S2SRouteMessageToPlayerReq& operator=(const S2SRouteMessageToPlayerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteMessageToPlayerReq(S2SRouteMessageToPlayerReq&& from) noexcept
    : S2SRouteMessageToPlayerReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteMessageToPlayerReq& operator=(S2SRouteMessageToPlayerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteMessageToPlayerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteMessageToPlayerReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteMessageToPlayerReq*>(
               &_S2SRouteMessageToPlayerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(S2SRouteMessageToPlayerReq* other);
  friend void swap(S2SRouteMessageToPlayerReq& a, S2SRouteMessageToPlayerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteMessageToPlayerReq* New() const final {
    return CreateMaybeMessage<S2SRouteMessageToPlayerReq>(NULL);
  }

  S2SRouteMessageToPlayerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteMessageToPlayerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteMessageToPlayerReq& from);
  void MergeFrom(const S2SRouteMessageToPlayerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteMessageToPlayerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 4;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 4;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // .KFMsg.PBRoute pbroute = 1;
  bool has_pbroute() const;
  void clear_pbroute();
  static const int kPbrouteFieldNumber = 1;
  private:
  const ::KFMsg::PBRoute& _internal_pbroute() const;
  public:
  const ::KFMsg::PBRoute& pbroute() const;
  ::KFMsg::PBRoute* release_pbroute();
  ::KFMsg::PBRoute* mutable_pbroute();
  void set_allocated_pbroute(::KFMsg::PBRoute* pbroute);

  // uint64 targetid = 2;
  void clear_targetid();
  static const int kTargetidFieldNumber = 2;
  ::google::protobuf::uint64 targetid() const;
  void set_targetid(::google::protobuf::uint64 value);

  // uint32 msgid = 3;
  void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteMessageToPlayerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::KFMsg::PBRoute* pbroute_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteClientLostToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteClientLostToShardReq) */ {
 public:
  S2SRouteClientLostToShardReq();
  virtual ~S2SRouteClientLostToShardReq();

  S2SRouteClientLostToShardReq(const S2SRouteClientLostToShardReq& from);

  inline S2SRouteClientLostToShardReq& operator=(const S2SRouteClientLostToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteClientLostToShardReq(S2SRouteClientLostToShardReq&& from) noexcept
    : S2SRouteClientLostToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteClientLostToShardReq& operator=(S2SRouteClientLostToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteClientLostToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteClientLostToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteClientLostToShardReq*>(
               &_S2SRouteClientLostToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(S2SRouteClientLostToShardReq* other);
  friend void swap(S2SRouteClientLostToShardReq& a, S2SRouteClientLostToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteClientLostToShardReq* New() const final {
    return CreateMaybeMessage<S2SRouteClientLostToShardReq>(NULL);
  }

  S2SRouteClientLostToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteClientLostToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteClientLostToShardReq& from);
  void MergeFrom(const S2SRouteClientLostToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteClientLostToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteClientLostToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clientid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteDiscoverToClientReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteDiscoverToClientReq) */ {
 public:
  S2SRouteDiscoverToClientReq();
  virtual ~S2SRouteDiscoverToClientReq();

  S2SRouteDiscoverToClientReq(const S2SRouteDiscoverToClientReq& from);

  inline S2SRouteDiscoverToClientReq& operator=(const S2SRouteDiscoverToClientReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteDiscoverToClientReq(S2SRouteDiscoverToClientReq&& from) noexcept
    : S2SRouteDiscoverToClientReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteDiscoverToClientReq& operator=(S2SRouteDiscoverToClientReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteDiscoverToClientReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteDiscoverToClientReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteDiscoverToClientReq*>(
               &_S2SRouteDiscoverToClientReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(S2SRouteDiscoverToClientReq* other);
  friend void swap(S2SRouteDiscoverToClientReq& a, S2SRouteDiscoverToClientReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteDiscoverToClientReq* New() const final {
    return CreateMaybeMessage<S2SRouteDiscoverToClientReq>(NULL);
  }

  S2SRouteDiscoverToClientReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteDiscoverToClientReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteDiscoverToClientReq& from);
  void MergeFrom(const S2SRouteDiscoverToClientReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteDiscoverToClientReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 shardid = 1;
  void clear_shardid();
  static const int kShardidFieldNumber = 1;
  ::google::protobuf::uint64 shardid() const;
  void set_shardid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteDiscoverToClientReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 shardid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteSyncObjectToProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteSyncObjectToProxyReq) */ {
 public:
  S2SRouteSyncObjectToProxyReq();
  virtual ~S2SRouteSyncObjectToProxyReq();

  S2SRouteSyncObjectToProxyReq(const S2SRouteSyncObjectToProxyReq& from);

  inline S2SRouteSyncObjectToProxyReq& operator=(const S2SRouteSyncObjectToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteSyncObjectToProxyReq(S2SRouteSyncObjectToProxyReq&& from) noexcept
    : S2SRouteSyncObjectToProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteSyncObjectToProxyReq& operator=(S2SRouteSyncObjectToProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteSyncObjectToProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteSyncObjectToProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteSyncObjectToProxyReq*>(
               &_S2SRouteSyncObjectToProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(S2SRouteSyncObjectToProxyReq* other);
  friend void swap(S2SRouteSyncObjectToProxyReq& a, S2SRouteSyncObjectToProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteSyncObjectToProxyReq* New() const final {
    return CreateMaybeMessage<S2SRouteSyncObjectToProxyReq>(NULL);
  }

  S2SRouteSyncObjectToProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteSyncObjectToProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteSyncObjectToProxyReq& from);
  void MergeFrom(const S2SRouteSyncObjectToProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteSyncObjectToProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objectid = 4;
  int objectid_size() const;
  void clear_objectid();
  static const int kObjectidFieldNumber = 4;
  ::google::protobuf::uint64 objectid(int index) const;
  void set_objectid(int index, ::google::protobuf::uint64 value);
  void add_objectid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objectid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objectid();

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 shardid = 3;
  void clear_shardid();
  static const int kShardidFieldNumber = 3;
  ::google::protobuf::uint64 shardid() const;
  void set_shardid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteSyncObjectToProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objectid_;
  mutable int _objectid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 shardid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteSyncObjectToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteSyncObjectToShardReq) */ {
 public:
  S2SRouteSyncObjectToShardReq();
  virtual ~S2SRouteSyncObjectToShardReq();

  S2SRouteSyncObjectToShardReq(const S2SRouteSyncObjectToShardReq& from);

  inline S2SRouteSyncObjectToShardReq& operator=(const S2SRouteSyncObjectToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteSyncObjectToShardReq(S2SRouteSyncObjectToShardReq&& from) noexcept
    : S2SRouteSyncObjectToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteSyncObjectToShardReq& operator=(S2SRouteSyncObjectToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteSyncObjectToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteSyncObjectToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteSyncObjectToShardReq*>(
               &_S2SRouteSyncObjectToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(S2SRouteSyncObjectToShardReq* other);
  friend void swap(S2SRouteSyncObjectToShardReq& a, S2SRouteSyncObjectToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteSyncObjectToShardReq* New() const final {
    return CreateMaybeMessage<S2SRouteSyncObjectToShardReq>(NULL);
  }

  S2SRouteSyncObjectToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteSyncObjectToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteSyncObjectToShardReq& from);
  void MergeFrom(const S2SRouteSyncObjectToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteSyncObjectToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objectid = 3;
  int objectid_size() const;
  void clear_objectid();
  static const int kObjectidFieldNumber = 3;
  ::google::protobuf::uint64 objectid(int index) const;
  void set_objectid(int index, ::google::protobuf::uint64 value);
  void add_objectid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objectid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objectid();

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteSyncObjectToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objectid_;
  mutable int _objectid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clientid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteAddObjectToProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteAddObjectToProxyReq) */ {
 public:
  S2SRouteAddObjectToProxyReq();
  virtual ~S2SRouteAddObjectToProxyReq();

  S2SRouteAddObjectToProxyReq(const S2SRouteAddObjectToProxyReq& from);

  inline S2SRouteAddObjectToProxyReq& operator=(const S2SRouteAddObjectToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteAddObjectToProxyReq(S2SRouteAddObjectToProxyReq&& from) noexcept
    : S2SRouteAddObjectToProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteAddObjectToProxyReq& operator=(S2SRouteAddObjectToProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteAddObjectToProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteAddObjectToProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteAddObjectToProxyReq*>(
               &_S2SRouteAddObjectToProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(S2SRouteAddObjectToProxyReq* other);
  friend void swap(S2SRouteAddObjectToProxyReq& a, S2SRouteAddObjectToProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteAddObjectToProxyReq* New() const final {
    return CreateMaybeMessage<S2SRouteAddObjectToProxyReq>(NULL);
  }

  S2SRouteAddObjectToProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteAddObjectToProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteAddObjectToProxyReq& from);
  void MergeFrom(const S2SRouteAddObjectToProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteAddObjectToProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 objectid = 3;
  void clear_objectid();
  static const int kObjectidFieldNumber = 3;
  ::google::protobuf::uint64 objectid() const;
  void set_objectid(::google::protobuf::uint64 value);

  // uint32 objectcount = 4;
  void clear_objectcount();
  static const int kObjectcountFieldNumber = 4;
  ::google::protobuf::uint32 objectcount() const;
  void set_objectcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteAddObjectToProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 objectid_;
  ::google::protobuf::uint32 objectcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteAddObjectToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteAddObjectToShardReq) */ {
 public:
  S2SRouteAddObjectToShardReq();
  virtual ~S2SRouteAddObjectToShardReq();

  S2SRouteAddObjectToShardReq(const S2SRouteAddObjectToShardReq& from);

  inline S2SRouteAddObjectToShardReq& operator=(const S2SRouteAddObjectToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteAddObjectToShardReq(S2SRouteAddObjectToShardReq&& from) noexcept
    : S2SRouteAddObjectToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteAddObjectToShardReq& operator=(S2SRouteAddObjectToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteAddObjectToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteAddObjectToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteAddObjectToShardReq*>(
               &_S2SRouteAddObjectToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(S2SRouteAddObjectToShardReq* other);
  friend void swap(S2SRouteAddObjectToShardReq& a, S2SRouteAddObjectToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteAddObjectToShardReq* New() const final {
    return CreateMaybeMessage<S2SRouteAddObjectToShardReq>(NULL);
  }

  S2SRouteAddObjectToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteAddObjectToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteAddObjectToShardReq& from);
  void MergeFrom(const S2SRouteAddObjectToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteAddObjectToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 objectid = 3;
  void clear_objectid();
  static const int kObjectidFieldNumber = 3;
  ::google::protobuf::uint64 objectid() const;
  void set_objectid(::google::protobuf::uint64 value);

  // uint32 objectcount = 4;
  void clear_objectcount();
  static const int kObjectcountFieldNumber = 4;
  ::google::protobuf::uint32 objectcount() const;
  void set_objectcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteAddObjectToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 objectid_;
  ::google::protobuf::uint32 objectcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteRemoveObjectToProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteRemoveObjectToProxyReq) */ {
 public:
  S2SRouteRemoveObjectToProxyReq();
  virtual ~S2SRouteRemoveObjectToProxyReq();

  S2SRouteRemoveObjectToProxyReq(const S2SRouteRemoveObjectToProxyReq& from);

  inline S2SRouteRemoveObjectToProxyReq& operator=(const S2SRouteRemoveObjectToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteRemoveObjectToProxyReq(S2SRouteRemoveObjectToProxyReq&& from) noexcept
    : S2SRouteRemoveObjectToProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteRemoveObjectToProxyReq& operator=(S2SRouteRemoveObjectToProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteRemoveObjectToProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteRemoveObjectToProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteRemoveObjectToProxyReq*>(
               &_S2SRouteRemoveObjectToProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(S2SRouteRemoveObjectToProxyReq* other);
  friend void swap(S2SRouteRemoveObjectToProxyReq& a, S2SRouteRemoveObjectToProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteRemoveObjectToProxyReq* New() const final {
    return CreateMaybeMessage<S2SRouteRemoveObjectToProxyReq>(NULL);
  }

  S2SRouteRemoveObjectToProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteRemoveObjectToProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteRemoveObjectToProxyReq& from);
  void MergeFrom(const S2SRouteRemoveObjectToProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteRemoveObjectToProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 objectid = 3;
  void clear_objectid();
  static const int kObjectidFieldNumber = 3;
  ::google::protobuf::uint64 objectid() const;
  void set_objectid(::google::protobuf::uint64 value);

  // uint32 objectcount = 4;
  void clear_objectcount();
  static const int kObjectcountFieldNumber = 4;
  ::google::protobuf::uint32 objectcount() const;
  void set_objectcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteRemoveObjectToProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 objectid_;
  ::google::protobuf::uint32 objectcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRouteRemoveObjectToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRouteRemoveObjectToShardReq) */ {
 public:
  S2SRouteRemoveObjectToShardReq();
  virtual ~S2SRouteRemoveObjectToShardReq();

  S2SRouteRemoveObjectToShardReq(const S2SRouteRemoveObjectToShardReq& from);

  inline S2SRouteRemoveObjectToShardReq& operator=(const S2SRouteRemoveObjectToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRouteRemoveObjectToShardReq(S2SRouteRemoveObjectToShardReq&& from) noexcept
    : S2SRouteRemoveObjectToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SRouteRemoveObjectToShardReq& operator=(S2SRouteRemoveObjectToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRouteRemoveObjectToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRouteRemoveObjectToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SRouteRemoveObjectToShardReq*>(
               &_S2SRouteRemoveObjectToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(S2SRouteRemoveObjectToShardReq* other);
  friend void swap(S2SRouteRemoveObjectToShardReq& a, S2SRouteRemoveObjectToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRouteRemoveObjectToShardReq* New() const final {
    return CreateMaybeMessage<S2SRouteRemoveObjectToShardReq>(NULL);
  }

  S2SRouteRemoveObjectToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRouteRemoveObjectToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRouteRemoveObjectToShardReq& from);
  void MergeFrom(const S2SRouteRemoveObjectToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRouteRemoveObjectToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 clientid = 2;
  void clear_clientid();
  static const int kClientidFieldNumber = 2;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // uint64 objectid = 3;
  void clear_objectid();
  static const int kObjectidFieldNumber = 3;
  ::google::protobuf::uint64 objectid() const;
  void set_objectid(::google::protobuf::uint64 value);

  // uint32 objectcount = 4;
  void clear_objectcount();
  static const int kObjectcountFieldNumber = 4;
  ::google::protobuf::uint32 objectcount() const;
  void set_objectcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRouteRemoveObjectToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 objectid_;
  ::google::protobuf::uint32 objectcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterAgentToServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRegisterAgentToServerReq) */ {
 public:
  S2SRegisterAgentToServerReq();
  virtual ~S2SRegisterAgentToServerReq();

  S2SRegisterAgentToServerReq(const S2SRegisterAgentToServerReq& from);

  inline S2SRegisterAgentToServerReq& operator=(const S2SRegisterAgentToServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRegisterAgentToServerReq(S2SRegisterAgentToServerReq&& from) noexcept
    : S2SRegisterAgentToServerReq() {
    *this = ::std::move(from);
  }

  inline S2SRegisterAgentToServerReq& operator=(S2SRegisterAgentToServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterAgentToServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRegisterAgentToServerReq* internal_default_instance() {
    return reinterpret_cast<const S2SRegisterAgentToServerReq*>(
               &_S2SRegisterAgentToServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(S2SRegisterAgentToServerReq* other);
  friend void swap(S2SRegisterAgentToServerReq& a, S2SRegisterAgentToServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRegisterAgentToServerReq* New() const final {
    return CreateMaybeMessage<S2SRegisterAgentToServerReq>(NULL);
  }

  S2SRegisterAgentToServerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRegisterAgentToServerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRegisterAgentToServerReq& from);
  void MergeFrom(const S2SRegisterAgentToServerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRegisterAgentToServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes agentid = 1;
  void clear_agentid();
  static const int kAgentidFieldNumber = 1;
  const ::std::string& agentid() const;
  void set_agentid(const ::std::string& value);
  #if LANG_CXX11
  void set_agentid(::std::string&& value);
  #endif
  void set_agentid(const char* value);
  void set_agentid(const void* value, size_t size);
  ::std::string* mutable_agentid();
  ::std::string* release_agentid();
  void set_allocated_agentid(::std::string* agentid);

  // bytes localip = 2;
  void clear_localip();
  static const int kLocalipFieldNumber = 2;
  const ::std::string& localip() const;
  void set_localip(const ::std::string& value);
  #if LANG_CXX11
  void set_localip(::std::string&& value);
  #endif
  void set_localip(const char* value);
  void set_localip(const void* value, size_t size);
  ::std::string* mutable_localip();
  ::std::string* release_localip();
  void set_allocated_localip(::std::string* localip);

  // bytes name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes service = 6;
  void clear_service();
  static const int kServiceFieldNumber = 6;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const void* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // uint32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterAgentToServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr agentid_;
  ::google::protobuf::internal::ArenaStringPtr localip_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBDeployCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBDeployCommand) */ {
 public:
  PBDeployCommand();
  virtual ~PBDeployCommand();

  PBDeployCommand(const PBDeployCommand& from);

  inline PBDeployCommand& operator=(const PBDeployCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBDeployCommand(PBDeployCommand&& from) noexcept
    : PBDeployCommand() {
    *this = ::std::move(from);
  }

  inline PBDeployCommand& operator=(PBDeployCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDeployCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBDeployCommand* internal_default_instance() {
    return reinterpret_cast<const PBDeployCommand*>(
               &_PBDeployCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(PBDeployCommand* other);
  friend void swap(PBDeployCommand& a, PBDeployCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBDeployCommand* New() const final {
    return CreateMaybeMessage<PBDeployCommand>(NULL);
  }

  PBDeployCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBDeployCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBDeployCommand& from);
  void MergeFrom(const PBDeployCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBDeployCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // bytes appname = 2;
  void clear_appname();
  static const int kAppnameFieldNumber = 2;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 3;
  void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // bytes appid = 4;
  void clear_appid();
  static const int kAppidFieldNumber = 4;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const void* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // bytes value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // uint32 zoneid = 5;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBDeployCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint32 zoneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployCommandToAgentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployCommandToAgentReq) */ {
 public:
  S2SDeployCommandToAgentReq();
  virtual ~S2SDeployCommandToAgentReq();

  S2SDeployCommandToAgentReq(const S2SDeployCommandToAgentReq& from);

  inline S2SDeployCommandToAgentReq& operator=(const S2SDeployCommandToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployCommandToAgentReq(S2SDeployCommandToAgentReq&& from) noexcept
    : S2SDeployCommandToAgentReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployCommandToAgentReq& operator=(S2SDeployCommandToAgentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployCommandToAgentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployCommandToAgentReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployCommandToAgentReq*>(
               &_S2SDeployCommandToAgentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(S2SDeployCommandToAgentReq* other);
  friend void swap(S2SDeployCommandToAgentReq& a, S2SDeployCommandToAgentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployCommandToAgentReq* New() const final {
    return CreateMaybeMessage<S2SDeployCommandToAgentReq>(NULL);
  }

  S2SDeployCommandToAgentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployCommandToAgentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployCommandToAgentReq& from);
  void MergeFrom(const S2SDeployCommandToAgentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployCommandToAgentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBDeployCommand deploycommand = 1;
  bool has_deploycommand() const;
  void clear_deploycommand();
  static const int kDeploycommandFieldNumber = 1;
  private:
  const ::KFMsg::PBDeployCommand& _internal_deploycommand() const;
  public:
  const ::KFMsg::PBDeployCommand& deploycommand() const;
  ::KFMsg::PBDeployCommand* release_deploycommand();
  ::KFMsg::PBDeployCommand* mutable_deploycommand();
  void set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployCommandToAgentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBDeployCommand* deploycommand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployCommandToClientReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployCommandToClientReq) */ {
 public:
  S2SDeployCommandToClientReq();
  virtual ~S2SDeployCommandToClientReq();

  S2SDeployCommandToClientReq(const S2SDeployCommandToClientReq& from);

  inline S2SDeployCommandToClientReq& operator=(const S2SDeployCommandToClientReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployCommandToClientReq(S2SDeployCommandToClientReq&& from) noexcept
    : S2SDeployCommandToClientReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployCommandToClientReq& operator=(S2SDeployCommandToClientReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployCommandToClientReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployCommandToClientReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployCommandToClientReq*>(
               &_S2SDeployCommandToClientReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(S2SDeployCommandToClientReq* other);
  friend void swap(S2SDeployCommandToClientReq& a, S2SDeployCommandToClientReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployCommandToClientReq* New() const final {
    return CreateMaybeMessage<S2SDeployCommandToClientReq>(NULL);
  }

  S2SDeployCommandToClientReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployCommandToClientReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployCommandToClientReq& from);
  void MergeFrom(const S2SDeployCommandToClientReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployCommandToClientReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBDeployCommand deploycommand = 1;
  bool has_deploycommand() const;
  void clear_deploycommand();
  static const int kDeploycommandFieldNumber = 1;
  private:
  const ::KFMsg::PBDeployCommand& _internal_deploycommand() const;
  public:
  const ::KFMsg::PBDeployCommand& deploycommand() const;
  ::KFMsg::PBDeployCommand* release_deploycommand();
  ::KFMsg::PBDeployCommand* mutable_deploycommand();
  void set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployCommandToClientReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBDeployCommand* deploycommand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolCommandReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolCommandReq) */ {
 public:
  S2SDeployToolCommandReq();
  virtual ~S2SDeployToolCommandReq();

  S2SDeployToolCommandReq(const S2SDeployToolCommandReq& from);

  inline S2SDeployToolCommandReq& operator=(const S2SDeployToolCommandReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolCommandReq(S2SDeployToolCommandReq&& from) noexcept
    : S2SDeployToolCommandReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolCommandReq& operator=(S2SDeployToolCommandReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolCommandReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolCommandReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolCommandReq*>(
               &_S2SDeployToolCommandReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(S2SDeployToolCommandReq* other);
  friend void swap(S2SDeployToolCommandReq& a, S2SDeployToolCommandReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolCommandReq* New() const final {
    return CreateMaybeMessage<S2SDeployToolCommandReq>(NULL);
  }

  S2SDeployToolCommandReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolCommandReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolCommandReq& from);
  void MergeFrom(const S2SDeployToolCommandReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolCommandReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes toolid = 3;
  void clear_toolid();
  static const int kToolidFieldNumber = 3;
  const ::std::string& toolid() const;
  void set_toolid(const ::std::string& value);
  #if LANG_CXX11
  void set_toolid(::std::string&& value);
  #endif
  void set_toolid(const char* value);
  void set_toolid(const void* value, size_t size);
  ::std::string* mutable_toolid();
  ::std::string* release_toolid();
  void set_allocated_toolid(::std::string* toolid);

  // bytes ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // .KFMsg.PBDeployCommand deploycommand = 1;
  bool has_deploycommand() const;
  void clear_deploycommand();
  static const int kDeploycommandFieldNumber = 1;
  private:
  const ::KFMsg::PBDeployCommand& _internal_deploycommand() const;
  public:
  const ::KFMsg::PBDeployCommand& deploycommand() const;
  ::KFMsg::PBDeployCommand* release_deploycommand();
  ::KFMsg::PBDeployCommand* mutable_deploycommand();
  void set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand);

  // uint64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolCommandReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr toolid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::KFMsg::PBDeployCommand* deploycommand_;
  ::google::protobuf::uint64 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployLogToToolAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployLogToToolAck) */ {
 public:
  S2SDeployLogToToolAck();
  virtual ~S2SDeployLogToToolAck();

  S2SDeployLogToToolAck(const S2SDeployLogToToolAck& from);

  inline S2SDeployLogToToolAck& operator=(const S2SDeployLogToToolAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployLogToToolAck(S2SDeployLogToToolAck&& from) noexcept
    : S2SDeployLogToToolAck() {
    *this = ::std::move(from);
  }

  inline S2SDeployLogToToolAck& operator=(S2SDeployLogToToolAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployLogToToolAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployLogToToolAck* internal_default_instance() {
    return reinterpret_cast<const S2SDeployLogToToolAck*>(
               &_S2SDeployLogToToolAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(S2SDeployLogToToolAck* other);
  friend void swap(S2SDeployLogToToolAck& a, S2SDeployLogToToolAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployLogToToolAck* New() const final {
    return CreateMaybeMessage<S2SDeployLogToToolAck>(NULL);
  }

  S2SDeployLogToToolAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployLogToToolAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployLogToToolAck& from);
  void MergeFrom(const S2SDeployLogToToolAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployLogToToolAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 agentid = 1;
  void clear_agentid();
  static const int kAgentidFieldNumber = 1;
  ::google::protobuf::uint64 agentid() const;
  void set_agentid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployLogToToolAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 agentid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployLogToServerAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployLogToServerAck) */ {
 public:
  S2SDeployLogToServerAck();
  virtual ~S2SDeployLogToServerAck();

  S2SDeployLogToServerAck(const S2SDeployLogToServerAck& from);

  inline S2SDeployLogToServerAck& operator=(const S2SDeployLogToServerAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployLogToServerAck(S2SDeployLogToServerAck&& from) noexcept
    : S2SDeployLogToServerAck() {
    *this = ::std::move(from);
  }

  inline S2SDeployLogToServerAck& operator=(S2SDeployLogToServerAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployLogToServerAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployLogToServerAck* internal_default_instance() {
    return reinterpret_cast<const S2SDeployLogToServerAck*>(
               &_S2SDeployLogToServerAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(S2SDeployLogToServerAck* other);
  friend void swap(S2SDeployLogToServerAck& a, S2SDeployLogToServerAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployLogToServerAck* New() const final {
    return CreateMaybeMessage<S2SDeployLogToServerAck>(NULL);
  }

  S2SDeployLogToServerAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployLogToServerAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployLogToServerAck& from);
  void MergeFrom(const S2SDeployLogToServerAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployLogToServerAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 agentid = 1;
  void clear_agentid();
  static const int kAgentidFieldNumber = 1;
  ::google::protobuf::uint64 agentid() const;
  void set_agentid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployLogToServerAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 agentid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse();
  S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse& other);
  static const S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse*>(&_S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolDeleteMySQLReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolDeleteMySQLReq) */ {
 public:
  S2SDeployToolDeleteMySQLReq();
  virtual ~S2SDeployToolDeleteMySQLReq();

  S2SDeployToolDeleteMySQLReq(const S2SDeployToolDeleteMySQLReq& from);

  inline S2SDeployToolDeleteMySQLReq& operator=(const S2SDeployToolDeleteMySQLReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolDeleteMySQLReq(S2SDeployToolDeleteMySQLReq&& from) noexcept
    : S2SDeployToolDeleteMySQLReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolDeleteMySQLReq& operator=(S2SDeployToolDeleteMySQLReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolDeleteMySQLReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolDeleteMySQLReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolDeleteMySQLReq*>(
               &_S2SDeployToolDeleteMySQLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(S2SDeployToolDeleteMySQLReq* other);
  friend void swap(S2SDeployToolDeleteMySQLReq& a, S2SDeployToolDeleteMySQLReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolDeleteMySQLReq* New() const final {
    return CreateMaybeMessage<S2SDeployToolDeleteMySQLReq>(NULL);
  }

  S2SDeployToolDeleteMySQLReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolDeleteMySQLReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolDeleteMySQLReq& from);
  void MergeFrom(const S2SDeployToolDeleteMySQLReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolDeleteMySQLReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      keys() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_keys();

  // bytes table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const void* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolDeleteMySQLReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      S2SDeployToolDeleteMySQLReq_KeysEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > keys_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse();
  S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse& other);
  static const S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse*>(&_S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolDeleteMySQLAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolDeleteMySQLAck) */ {
 public:
  S2SDeployToolDeleteMySQLAck();
  virtual ~S2SDeployToolDeleteMySQLAck();

  S2SDeployToolDeleteMySQLAck(const S2SDeployToolDeleteMySQLAck& from);

  inline S2SDeployToolDeleteMySQLAck& operator=(const S2SDeployToolDeleteMySQLAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolDeleteMySQLAck(S2SDeployToolDeleteMySQLAck&& from) noexcept
    : S2SDeployToolDeleteMySQLAck() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolDeleteMySQLAck& operator=(S2SDeployToolDeleteMySQLAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolDeleteMySQLAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolDeleteMySQLAck* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolDeleteMySQLAck*>(
               &_S2SDeployToolDeleteMySQLAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(S2SDeployToolDeleteMySQLAck* other);
  friend void swap(S2SDeployToolDeleteMySQLAck& a, S2SDeployToolDeleteMySQLAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolDeleteMySQLAck* New() const final {
    return CreateMaybeMessage<S2SDeployToolDeleteMySQLAck>(NULL);
  }

  S2SDeployToolDeleteMySQLAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolDeleteMySQLAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolDeleteMySQLAck& from);
  void MergeFrom(const S2SDeployToolDeleteMySQLAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolDeleteMySQLAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      keys() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_keys();

  // bytes table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const void* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolDeleteMySQLAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      S2SDeployToolDeleteMySQLAck_KeysEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > keys_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse();
  S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse& other);
  static const S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse*>(&_S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolExecuteMySQLReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolExecuteMySQLReq) */ {
 public:
  S2SDeployToolExecuteMySQLReq();
  virtual ~S2SDeployToolExecuteMySQLReq();

  S2SDeployToolExecuteMySQLReq(const S2SDeployToolExecuteMySQLReq& from);

  inline S2SDeployToolExecuteMySQLReq& operator=(const S2SDeployToolExecuteMySQLReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolExecuteMySQLReq(S2SDeployToolExecuteMySQLReq&& from) noexcept
    : S2SDeployToolExecuteMySQLReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolExecuteMySQLReq& operator=(S2SDeployToolExecuteMySQLReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolExecuteMySQLReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolExecuteMySQLReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolExecuteMySQLReq*>(
               &_S2SDeployToolExecuteMySQLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(S2SDeployToolExecuteMySQLReq* other);
  friend void swap(S2SDeployToolExecuteMySQLReq& a, S2SDeployToolExecuteMySQLReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolExecuteMySQLReq* New() const final {
    return CreateMaybeMessage<S2SDeployToolExecuteMySQLReq>(NULL);
  }

  S2SDeployToolExecuteMySQLReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolExecuteMySQLReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolExecuteMySQLReq& from);
  void MergeFrom(const S2SDeployToolExecuteMySQLReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolExecuteMySQLReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // bytes table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const void* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolExecuteMySQLReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      S2SDeployToolExecuteMySQLReq_ValuesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > values_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse();
  S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse& other);
  static const S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse*>(&_S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolExecuteMySQLAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolExecuteMySQLAck) */ {
 public:
  S2SDeployToolExecuteMySQLAck();
  virtual ~S2SDeployToolExecuteMySQLAck();

  S2SDeployToolExecuteMySQLAck(const S2SDeployToolExecuteMySQLAck& from);

  inline S2SDeployToolExecuteMySQLAck& operator=(const S2SDeployToolExecuteMySQLAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolExecuteMySQLAck(S2SDeployToolExecuteMySQLAck&& from) noexcept
    : S2SDeployToolExecuteMySQLAck() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolExecuteMySQLAck& operator=(S2SDeployToolExecuteMySQLAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolExecuteMySQLAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolExecuteMySQLAck* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolExecuteMySQLAck*>(
               &_S2SDeployToolExecuteMySQLAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(S2SDeployToolExecuteMySQLAck* other);
  friend void swap(S2SDeployToolExecuteMySQLAck& a, S2SDeployToolExecuteMySQLAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolExecuteMySQLAck* New() const final {
    return CreateMaybeMessage<S2SDeployToolExecuteMySQLAck>(NULL);
  }

  S2SDeployToolExecuteMySQLAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolExecuteMySQLAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolExecuteMySQLAck& from);
  void MergeFrom(const S2SDeployToolExecuteMySQLAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolExecuteMySQLAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // bytes table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const void* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolExecuteMySQLAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      S2SDeployToolExecuteMySQLAck_ValuesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > values_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse();
  S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse& other);
  static const S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse*>(&_S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolQueryMySQLReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolQueryMySQLReq) */ {
 public:
  S2SDeployToolQueryMySQLReq();
  virtual ~S2SDeployToolQueryMySQLReq();

  S2SDeployToolQueryMySQLReq(const S2SDeployToolQueryMySQLReq& from);

  inline S2SDeployToolQueryMySQLReq& operator=(const S2SDeployToolQueryMySQLReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolQueryMySQLReq(S2SDeployToolQueryMySQLReq&& from) noexcept
    : S2SDeployToolQueryMySQLReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolQueryMySQLReq& operator=(S2SDeployToolQueryMySQLReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolQueryMySQLReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolQueryMySQLReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolQueryMySQLReq*>(
               &_S2SDeployToolQueryMySQLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(S2SDeployToolQueryMySQLReq* other);
  friend void swap(S2SDeployToolQueryMySQLReq& a, S2SDeployToolQueryMySQLReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolQueryMySQLReq* New() const final {
    return CreateMaybeMessage<S2SDeployToolQueryMySQLReq>(NULL);
  }

  S2SDeployToolQueryMySQLReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolQueryMySQLReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolQueryMySQLReq& from);
  void MergeFrom(const S2SDeployToolQueryMySQLReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolQueryMySQLReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      keys() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_keys();

  // bytes table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const void* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolQueryMySQLReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      S2SDeployToolQueryMySQLReq_KeysEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > keys_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBMySQLData_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PBMySQLData_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PBMySQLData_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  PBMySQLData_ValuesEntry_DoNotUse();
  PBMySQLData_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PBMySQLData_ValuesEntry_DoNotUse& other);
  static const PBMySQLData_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PBMySQLData_ValuesEntry_DoNotUse*>(&_PBMySQLData_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBMySQLData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBMySQLData) */ {
 public:
  PBMySQLData();
  virtual ~PBMySQLData();

  PBMySQLData(const PBMySQLData& from);

  inline PBMySQLData& operator=(const PBMySQLData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBMySQLData(PBMySQLData&& from) noexcept
    : PBMySQLData() {
    *this = ::std::move(from);
  }

  inline PBMySQLData& operator=(PBMySQLData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMySQLData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBMySQLData* internal_default_instance() {
    return reinterpret_cast<const PBMySQLData*>(
               &_PBMySQLData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(PBMySQLData* other);
  friend void swap(PBMySQLData& a, PBMySQLData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBMySQLData* New() const final {
    return CreateMaybeMessage<PBMySQLData>(NULL);
  }

  PBMySQLData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBMySQLData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBMySQLData& from);
  void MergeFrom(const PBMySQLData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBMySQLData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:KFMsg.PBMySQLData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PBMySQLData_ValuesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBMySQLDatas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBMySQLDatas) */ {
 public:
  PBMySQLDatas();
  virtual ~PBMySQLDatas();

  PBMySQLDatas(const PBMySQLDatas& from);

  inline PBMySQLDatas& operator=(const PBMySQLDatas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBMySQLDatas(PBMySQLDatas&& from) noexcept
    : PBMySQLDatas() {
    *this = ::std::move(from);
  }

  inline PBMySQLDatas& operator=(PBMySQLDatas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMySQLDatas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBMySQLDatas* internal_default_instance() {
    return reinterpret_cast<const PBMySQLDatas*>(
               &_PBMySQLDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(PBMySQLDatas* other);
  friend void swap(PBMySQLDatas& a, PBMySQLDatas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBMySQLDatas* New() const final {
    return CreateMaybeMessage<PBMySQLDatas>(NULL);
  }

  PBMySQLDatas* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBMySQLDatas>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBMySQLDatas& from);
  void MergeFrom(const PBMySQLDatas& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBMySQLDatas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBMySQLData data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::KFMsg::PBMySQLData* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMySQLData >*
      mutable_data();
  const ::KFMsg::PBMySQLData& data(int index) const;
  ::KFMsg::PBMySQLData* add_data();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMySQLData >&
      data() const;

  // @@protoc_insertion_point(class_scope:KFMsg.PBMySQLDatas)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMySQLData > data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolQueryMySQLAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolQueryMySQLAck) */ {
 public:
  S2SDeployToolQueryMySQLAck();
  virtual ~S2SDeployToolQueryMySQLAck();

  S2SDeployToolQueryMySQLAck(const S2SDeployToolQueryMySQLAck& from);

  inline S2SDeployToolQueryMySQLAck& operator=(const S2SDeployToolQueryMySQLAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolQueryMySQLAck(S2SDeployToolQueryMySQLAck&& from) noexcept
    : S2SDeployToolQueryMySQLAck() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolQueryMySQLAck& operator=(S2SDeployToolQueryMySQLAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolQueryMySQLAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolQueryMySQLAck* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolQueryMySQLAck*>(
               &_S2SDeployToolQueryMySQLAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(S2SDeployToolQueryMySQLAck* other);
  friend void swap(S2SDeployToolQueryMySQLAck& a, S2SDeployToolQueryMySQLAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolQueryMySQLAck* New() const final {
    return CreateMaybeMessage<S2SDeployToolQueryMySQLAck>(NULL);
  }

  S2SDeployToolQueryMySQLAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolQueryMySQLAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolQueryMySQLAck& from);
  void MergeFrom(const S2SDeployToolQueryMySQLAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolQueryMySQLAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const void* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .KFMsg.PBMySQLDatas datas = 2;
  bool has_datas() const;
  void clear_datas();
  static const int kDatasFieldNumber = 2;
  private:
  const ::KFMsg::PBMySQLDatas& _internal_datas() const;
  public:
  const ::KFMsg::PBMySQLDatas& datas() const;
  ::KFMsg::PBMySQLDatas* release_datas();
  ::KFMsg::PBMySQLDatas* mutable_datas();
  void set_allocated_datas(::KFMsg::PBMySQLDatas* datas);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolQueryMySQLAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::KFMsg::PBMySQLDatas* datas_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolQueryToolIdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolQueryToolIdReq) */ {
 public:
  S2SDeployToolQueryToolIdReq();
  virtual ~S2SDeployToolQueryToolIdReq();

  S2SDeployToolQueryToolIdReq(const S2SDeployToolQueryToolIdReq& from);

  inline S2SDeployToolQueryToolIdReq& operator=(const S2SDeployToolQueryToolIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolQueryToolIdReq(S2SDeployToolQueryToolIdReq&& from) noexcept
    : S2SDeployToolQueryToolIdReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolQueryToolIdReq& operator=(S2SDeployToolQueryToolIdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolQueryToolIdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolQueryToolIdReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolQueryToolIdReq*>(
               &_S2SDeployToolQueryToolIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(S2SDeployToolQueryToolIdReq* other);
  friend void swap(S2SDeployToolQueryToolIdReq& a, S2SDeployToolQueryToolIdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolQueryToolIdReq* New() const final {
    return CreateMaybeMessage<S2SDeployToolQueryToolIdReq>(NULL);
  }

  S2SDeployToolQueryToolIdReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolQueryToolIdReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolQueryToolIdReq& from);
  void MergeFrom(const S2SDeployToolQueryToolIdReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolQueryToolIdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolQueryToolIdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployToolQueryToolIdAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployToolQueryToolIdAck) */ {
 public:
  S2SDeployToolQueryToolIdAck();
  virtual ~S2SDeployToolQueryToolIdAck();

  S2SDeployToolQueryToolIdAck(const S2SDeployToolQueryToolIdAck& from);

  inline S2SDeployToolQueryToolIdAck& operator=(const S2SDeployToolQueryToolIdAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployToolQueryToolIdAck(S2SDeployToolQueryToolIdAck&& from) noexcept
    : S2SDeployToolQueryToolIdAck() {
    *this = ::std::move(from);
  }

  inline S2SDeployToolQueryToolIdAck& operator=(S2SDeployToolQueryToolIdAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployToolQueryToolIdAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployToolQueryToolIdAck* internal_default_instance() {
    return reinterpret_cast<const S2SDeployToolQueryToolIdAck*>(
               &_S2SDeployToolQueryToolIdAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(S2SDeployToolQueryToolIdAck* other);
  friend void swap(S2SDeployToolQueryToolIdAck& a, S2SDeployToolQueryToolIdAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployToolQueryToolIdAck* New() const final {
    return CreateMaybeMessage<S2SDeployToolQueryToolIdAck>(NULL);
  }

  S2SDeployToolQueryToolIdAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployToolQueryToolIdAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployToolQueryToolIdAck& from);
  void MergeFrom(const S2SDeployToolQueryToolIdAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployToolQueryToolIdAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployToolQueryToolIdAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployHeartbeatToAgentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployHeartbeatToAgentReq) */ {
 public:
  S2SDeployHeartbeatToAgentReq();
  virtual ~S2SDeployHeartbeatToAgentReq();

  S2SDeployHeartbeatToAgentReq(const S2SDeployHeartbeatToAgentReq& from);

  inline S2SDeployHeartbeatToAgentReq& operator=(const S2SDeployHeartbeatToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployHeartbeatToAgentReq(S2SDeployHeartbeatToAgentReq&& from) noexcept
    : S2SDeployHeartbeatToAgentReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployHeartbeatToAgentReq& operator=(S2SDeployHeartbeatToAgentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployHeartbeatToAgentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployHeartbeatToAgentReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployHeartbeatToAgentReq*>(
               &_S2SDeployHeartbeatToAgentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(S2SDeployHeartbeatToAgentReq* other);
  friend void swap(S2SDeployHeartbeatToAgentReq& a, S2SDeployHeartbeatToAgentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployHeartbeatToAgentReq* New() const final {
    return CreateMaybeMessage<S2SDeployHeartbeatToAgentReq>(NULL);
  }

  S2SDeployHeartbeatToAgentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployHeartbeatToAgentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployHeartbeatToAgentReq& from);
  void MergeFrom(const S2SDeployHeartbeatToAgentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployHeartbeatToAgentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployHeartbeatToAgentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRemoteLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBRemoteLog) */ {
 public:
  PBRemoteLog();
  virtual ~PBRemoteLog();

  PBRemoteLog(const PBRemoteLog& from);

  inline PBRemoteLog& operator=(const PBRemoteLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBRemoteLog(PBRemoteLog&& from) noexcept
    : PBRemoteLog() {
    *this = ::std::move(from);
  }

  inline PBRemoteLog& operator=(PBRemoteLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRemoteLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBRemoteLog* internal_default_instance() {
    return reinterpret_cast<const PBRemoteLog*>(
               &_PBRemoteLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(PBRemoteLog* other);
  friend void swap(PBRemoteLog& a, PBRemoteLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBRemoteLog* New() const final {
    return CreateMaybeMessage<PBRemoteLog>(NULL);
  }

  PBRemoteLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBRemoteLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBRemoteLog& from);
  void MergeFrom(const PBRemoteLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBRemoteLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBRemoteLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint32 level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRemoteLogToServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRemoteLogToServerReq) */ {
 public:
  S2SRemoteLogToServerReq();
  virtual ~S2SRemoteLogToServerReq();

  S2SRemoteLogToServerReq(const S2SRemoteLogToServerReq& from);

  inline S2SRemoteLogToServerReq& operator=(const S2SRemoteLogToServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRemoteLogToServerReq(S2SRemoteLogToServerReq&& from) noexcept
    : S2SRemoteLogToServerReq() {
    *this = ::std::move(from);
  }

  inline S2SRemoteLogToServerReq& operator=(S2SRemoteLogToServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRemoteLogToServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRemoteLogToServerReq* internal_default_instance() {
    return reinterpret_cast<const S2SRemoteLogToServerReq*>(
               &_S2SRemoteLogToServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(S2SRemoteLogToServerReq* other);
  friend void swap(S2SRemoteLogToServerReq& a, S2SRemoteLogToServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRemoteLogToServerReq* New() const final {
    return CreateMaybeMessage<S2SRemoteLogToServerReq>(NULL);
  }

  S2SRemoteLogToServerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRemoteLogToServerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRemoteLogToServerReq& from);
  void MergeFrom(const S2SRemoteLogToServerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRemoteLogToServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBRemoteLog logdata = 6;
  int logdata_size() const;
  void clear_logdata();
  static const int kLogdataFieldNumber = 6;
  ::KFMsg::PBRemoteLog* mutable_logdata(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemoteLog >*
      mutable_logdata();
  const ::KFMsg::PBRemoteLog& logdata(int index) const;
  ::KFMsg::PBRemoteLog* add_logdata();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemoteLog >&
      logdata() const;

  // bytes appname = 1;
  void clear_appname();
  static const int kAppnameFieldNumber = 1;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 2;
  void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // bytes strappid = 3;
  void clear_strappid();
  static const int kStrappidFieldNumber = 3;
  const ::std::string& strappid() const;
  void set_strappid(const ::std::string& value);
  #if LANG_CXX11
  void set_strappid(::std::string&& value);
  #endif
  void set_strappid(const char* value);
  void set_strappid(const void* value, size_t size);
  ::std::string* mutable_strappid();
  ::std::string* release_strappid();
  void set_allocated_strappid(::std::string* strappid);

  // uint64 appid = 4;
  void clear_appid();
  static const int kAppidFieldNumber = 4;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // uint32 zoneid = 5;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRemoteLogToServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemoteLog > logdata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr strappid_;
  ::google::protobuf::uint64 appid_;
  ::google::protobuf::uint32 zoneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListenData

// bytes appname = 1;
inline void ListenData::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListenData::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.appname)
  return appname_.GetNoArena();
}
inline void ListenData::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.appname)
}
#if LANG_CXX11
inline void ListenData::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.ListenData.appname)
}
#endif
inline void ListenData::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.ListenData.appname)
}
inline void ListenData::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.ListenData.appname)
}
inline ::std::string* ListenData::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.ListenData.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenData::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.ListenData.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenData::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.ListenData.appname)
}

// bytes apptype = 2;
inline void ListenData::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListenData::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.apptype)
  return apptype_.GetNoArena();
}
inline void ListenData::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.apptype)
}
#if LANG_CXX11
inline void ListenData::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.ListenData.apptype)
}
#endif
inline void ListenData::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.ListenData.apptype)
}
inline void ListenData::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.ListenData.apptype)
}
inline ::std::string* ListenData::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.ListenData.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenData::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.ListenData.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenData::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.ListenData.apptype)
}

// uint64 appid = 3;
inline void ListenData::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ListenData::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.appid)
  return appid_;
}
inline void ListenData::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.appid)
}

// bytes ip = 4;
inline void ListenData::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListenData::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.ip)
  return ip_.GetNoArena();
}
inline void ListenData::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.ip)
}
#if LANG_CXX11
inline void ListenData::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.ListenData.ip)
}
#endif
inline void ListenData::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.ListenData.ip)
}
inline void ListenData::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.ListenData.ip)
}
inline ::std::string* ListenData::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.ListenData.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenData::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.ListenData.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenData::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.ListenData.ip)
}

// uint32 port = 5;
inline void ListenData::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ListenData::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.port)
  return port_;
}
inline void ListenData::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.port)
}

// -------------------------------------------------------------------

// RegisterToServerReq

// .KFMsg.ListenData listen = 1;
inline bool RegisterToServerReq::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void RegisterToServerReq::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& RegisterToServerReq::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& RegisterToServerReq::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerReq.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* RegisterToServerReq::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.RegisterToServerReq.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* RegisterToServerReq::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.RegisterToServerReq.listen)
  return listen_;
}
inline void RegisterToServerReq::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.RegisterToServerReq.listen)
}

// -------------------------------------------------------------------

// RegisterToServerAck

// uint64 appid = 1;
inline void RegisterToServerAck::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegisterToServerAck::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerAck.appid)
  return appid_;
}
inline void RegisterToServerAck::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.RegisterToServerAck.appid)
}

// bytes appname = 2;
inline void RegisterToServerAck::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterToServerAck::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerAck.appname)
  return appname_.GetNoArena();
}
inline void RegisterToServerAck::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.RegisterToServerAck.appname)
}
#if LANG_CXX11
inline void RegisterToServerAck::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.RegisterToServerAck.appname)
}
#endif
inline void RegisterToServerAck::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.RegisterToServerAck.appname)
}
inline void RegisterToServerAck::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.RegisterToServerAck.appname)
}
inline ::std::string* RegisterToServerAck::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.RegisterToServerAck.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterToServerAck::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.RegisterToServerAck.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterToServerAck::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.RegisterToServerAck.appname)
}

// bytes apptype = 3;
inline void RegisterToServerAck::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterToServerAck::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerAck.apptype)
  return apptype_.GetNoArena();
}
inline void RegisterToServerAck::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.RegisterToServerAck.apptype)
}
#if LANG_CXX11
inline void RegisterToServerAck::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.RegisterToServerAck.apptype)
}
#endif
inline void RegisterToServerAck::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.RegisterToServerAck.apptype)
}
inline void RegisterToServerAck::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.RegisterToServerAck.apptype)
}
inline ::std::string* RegisterToServerAck::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.RegisterToServerAck.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterToServerAck::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.RegisterToServerAck.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterToServerAck::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.RegisterToServerAck.apptype)
}

// -------------------------------------------------------------------

// TellRegisterToServer

// .KFMsg.ListenData listen = 1;
inline bool TellRegisterToServer::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void TellRegisterToServer::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& TellRegisterToServer::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& TellRegisterToServer::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.TellRegisterToServer.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* TellRegisterToServer::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.TellRegisterToServer.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* TellRegisterToServer::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.TellRegisterToServer.listen)
  return listen_;
}
inline void TellRegisterToServer::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellRegisterToServer.listen)
}

// -------------------------------------------------------------------

// TellUnRegisterFromServer

// bytes appname = 1;
inline void TellUnRegisterFromServer::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TellUnRegisterFromServer::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.appname)
  return appname_.GetNoArena();
}
inline void TellUnRegisterFromServer::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.appname)
}
#if LANG_CXX11
inline void TellUnRegisterFromServer::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.TellUnRegisterFromServer.appname)
}
#endif
inline void TellUnRegisterFromServer::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.TellUnRegisterFromServer.appname)
}
inline void TellUnRegisterFromServer::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.TellUnRegisterFromServer.appname)
}
inline ::std::string* TellUnRegisterFromServer::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.TellUnRegisterFromServer.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TellUnRegisterFromServer::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.TellUnRegisterFromServer.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TellUnRegisterFromServer::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellUnRegisterFromServer.appname)
}

// bytes apptype = 2;
inline void TellUnRegisterFromServer::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TellUnRegisterFromServer::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.apptype)
  return apptype_.GetNoArena();
}
inline void TellUnRegisterFromServer::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.apptype)
}
#if LANG_CXX11
inline void TellUnRegisterFromServer::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.TellUnRegisterFromServer.apptype)
}
#endif
inline void TellUnRegisterFromServer::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.TellUnRegisterFromServer.apptype)
}
inline void TellUnRegisterFromServer::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.TellUnRegisterFromServer.apptype)
}
inline ::std::string* TellUnRegisterFromServer::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.TellUnRegisterFromServer.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TellUnRegisterFromServer::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.TellUnRegisterFromServer.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TellUnRegisterFromServer::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellUnRegisterFromServer.apptype)
}

// uint64 appid = 3;
inline void TellUnRegisterFromServer::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TellUnRegisterFromServer::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.appid)
  return appid_;
}
inline void TellUnRegisterFromServer::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.appid)
}

// -------------------------------------------------------------------

// S2STellDiscoverServerToMaster

// uint64 serverid = 1;
inline void S2STellDiscoverServerToMaster::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2STellDiscoverServerToMaster::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STellDiscoverServerToMaster.serverid)
  return serverid_;
}
inline void S2STellDiscoverServerToMaster::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STellDiscoverServerToMaster.serverid)
}

// .KFMsg.ListenData listen = 2;
inline bool S2STellDiscoverServerToMaster::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void S2STellDiscoverServerToMaster::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& S2STellDiscoverServerToMaster::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& S2STellDiscoverServerToMaster::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.S2STellDiscoverServerToMaster.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* S2STellDiscoverServerToMaster::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STellDiscoverServerToMaster.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* S2STellDiscoverServerToMaster::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STellDiscoverServerToMaster.listen)
  return listen_;
}
inline void S2STellDiscoverServerToMaster::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STellDiscoverServerToMaster.listen)
}

// -------------------------------------------------------------------

// S2STellLostServerToMaster

// bytes appname = 1;
inline void S2STellLostServerToMaster::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2STellLostServerToMaster::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STellLostServerToMaster.appname)
  return appname_.GetNoArena();
}
inline void S2STellLostServerToMaster::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2STellLostServerToMaster.appname)
}
#if LANG_CXX11
inline void S2STellLostServerToMaster::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2STellLostServerToMaster.appname)
}
#endif
inline void S2STellLostServerToMaster::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2STellLostServerToMaster.appname)
}
inline void S2STellLostServerToMaster::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2STellLostServerToMaster.appname)
}
inline ::std::string* S2STellLostServerToMaster::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STellLostServerToMaster.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2STellLostServerToMaster::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STellLostServerToMaster.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2STellLostServerToMaster::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STellLostServerToMaster.appname)
}

// bytes apptype = 2;
inline void S2STellLostServerToMaster::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2STellLostServerToMaster::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STellLostServerToMaster.apptype)
  return apptype_.GetNoArena();
}
inline void S2STellLostServerToMaster::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2STellLostServerToMaster.apptype)
}
#if LANG_CXX11
inline void S2STellLostServerToMaster::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2STellLostServerToMaster.apptype)
}
#endif
inline void S2STellLostServerToMaster::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2STellLostServerToMaster.apptype)
}
inline void S2STellLostServerToMaster::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2STellLostServerToMaster.apptype)
}
inline ::std::string* S2STellLostServerToMaster::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STellLostServerToMaster.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2STellLostServerToMaster::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STellLostServerToMaster.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2STellLostServerToMaster::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STellLostServerToMaster.apptype)
}

// uint64 appid = 3;
inline void S2STellLostServerToMaster::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2STellLostServerToMaster::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STellLostServerToMaster.appid)
  return appid_;
}
inline void S2STellLostServerToMaster::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STellLostServerToMaster.appid)
}

// -------------------------------------------------------------------

// S2STellRegisterServerToMaster

// uint64 serverid = 1;
inline void S2STellRegisterServerToMaster::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2STellRegisterServerToMaster::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STellRegisterServerToMaster.serverid)
  return serverid_;
}
inline void S2STellRegisterServerToMaster::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STellRegisterServerToMaster.serverid)
}

// .KFMsg.ListenData listen = 2;
inline bool S2STellRegisterServerToMaster::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void S2STellRegisterServerToMaster::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& S2STellRegisterServerToMaster::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& S2STellRegisterServerToMaster::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.S2STellRegisterServerToMaster.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* S2STellRegisterServerToMaster::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STellRegisterServerToMaster.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* S2STellRegisterServerToMaster::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STellRegisterServerToMaster.listen)
  return listen_;
}
inline void S2STellRegisterServerToMaster::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STellRegisterServerToMaster.listen)
}

// -------------------------------------------------------------------

// S2STellServerListToMaster

// repeated .KFMsg.ListenData listen = 1;
inline int S2STellServerListToMaster::listen_size() const {
  return listen_.size();
}
inline void S2STellServerListToMaster::clear_listen() {
  listen_.Clear();
}
inline ::KFMsg::ListenData* S2STellServerListToMaster::mutable_listen(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STellServerListToMaster.listen)
  return listen_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >*
S2STellServerListToMaster::mutable_listen() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2STellServerListToMaster.listen)
  return &listen_;
}
inline const ::KFMsg::ListenData& S2STellServerListToMaster::listen(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STellServerListToMaster.listen)
  return listen_.Get(index);
}
inline ::KFMsg::ListenData* S2STellServerListToMaster::add_listen() {
  // @@protoc_insertion_point(field_add:KFMsg.S2STellServerListToMaster.listen)
  return listen_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >&
S2STellServerListToMaster::listen() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2STellServerListToMaster.listen)
  return listen_;
}

// -------------------------------------------------------------------

// S2SClusterRegisterToMasterReq

// .KFMsg.ListenData listen = 1;
inline bool S2SClusterRegisterToMasterReq::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void S2SClusterRegisterToMasterReq::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& S2SClusterRegisterToMasterReq::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& S2SClusterRegisterToMasterReq::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterRegisterToMasterReq.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* S2SClusterRegisterToMasterReq::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterRegisterToMasterReq.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* S2SClusterRegisterToMasterReq::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterRegisterToMasterReq.listen)
  return listen_;
}
inline void S2SClusterRegisterToMasterReq::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterRegisterToMasterReq.listen)
}

// -------------------------------------------------------------------

// S2SClusterSyncProxyToMasterReq

// repeated .KFMsg.ListenData listen = 1;
inline int S2SClusterSyncProxyToMasterReq::listen_size() const {
  return listen_.size();
}
inline void S2SClusterSyncProxyToMasterReq::clear_listen() {
  listen_.Clear();
}
inline ::KFMsg::ListenData* S2SClusterSyncProxyToMasterReq::mutable_listen(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterSyncProxyToMasterReq.listen)
  return listen_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >*
S2SClusterSyncProxyToMasterReq::mutable_listen() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SClusterSyncProxyToMasterReq.listen)
  return &listen_;
}
inline const ::KFMsg::ListenData& S2SClusterSyncProxyToMasterReq::listen(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterSyncProxyToMasterReq.listen)
  return listen_.Get(index);
}
inline ::KFMsg::ListenData* S2SClusterSyncProxyToMasterReq::add_listen() {
  // @@protoc_insertion_point(field_add:KFMsg.S2SClusterSyncProxyToMasterReq.listen)
  return listen_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::ListenData >&
S2SClusterSyncProxyToMasterReq::listen() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SClusterSyncProxyToMasterReq.listen)
  return listen_;
}

// -------------------------------------------------------------------

// S2SClusterAuthToMasterReq

// uint64 clientid = 1;
inline void S2SClusterAuthToMasterReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterAuthToMasterReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterAuthToMasterReq.clientid)
  return clientid_;
}
inline void S2SClusterAuthToMasterReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterAuthToMasterReq.clientid)
}

// bytes clusterkey = 2;
inline void S2SClusterAuthToMasterReq::clear_clusterkey() {
  clusterkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SClusterAuthToMasterReq::clusterkey() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
  return clusterkey_.GetNoArena();
}
inline void S2SClusterAuthToMasterReq::set_clusterkey(const ::std::string& value) {
  
  clusterkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
}
#if LANG_CXX11
inline void S2SClusterAuthToMasterReq::set_clusterkey(::std::string&& value) {
  
  clusterkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
}
#endif
inline void S2SClusterAuthToMasterReq::set_clusterkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clusterkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
}
inline void S2SClusterAuthToMasterReq::set_clusterkey(const void* value, size_t size) {
  
  clusterkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
}
inline ::std::string* S2SClusterAuthToMasterReq::mutable_clusterkey() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
  return clusterkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SClusterAuthToMasterReq::release_clusterkey() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
  
  return clusterkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SClusterAuthToMasterReq::set_allocated_clusterkey(::std::string* clusterkey) {
  if (clusterkey != NULL) {
    
  } else {
    
  }
  clusterkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clusterkey);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterAuthToMasterReq.clusterkey)
}

// -------------------------------------------------------------------

// S2SClusterAuthToClientAck

// bytes token = 1;
inline void S2SClusterAuthToClientAck::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SClusterAuthToClientAck::token() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterAuthToClientAck.token)
  return token_.GetNoArena();
}
inline void S2SClusterAuthToClientAck::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterAuthToClientAck.token)
}
#if LANG_CXX11
inline void S2SClusterAuthToClientAck::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SClusterAuthToClientAck.token)
}
#endif
inline void S2SClusterAuthToClientAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SClusterAuthToClientAck.token)
}
inline void S2SClusterAuthToClientAck::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SClusterAuthToClientAck.token)
}
inline ::std::string* S2SClusterAuthToClientAck::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterAuthToClientAck.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SClusterAuthToClientAck::release_token() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterAuthToClientAck.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SClusterAuthToClientAck::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterAuthToClientAck.token)
}

// .KFMsg.ListenData listen = 2;
inline bool S2SClusterAuthToClientAck::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void S2SClusterAuthToClientAck::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& S2SClusterAuthToClientAck::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& S2SClusterAuthToClientAck::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterAuthToClientAck.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* S2SClusterAuthToClientAck::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterAuthToClientAck.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* S2SClusterAuthToClientAck::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterAuthToClientAck.listen)
  return listen_;
}
inline void S2SClusterAuthToClientAck::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterAuthToClientAck.listen)
}

// -------------------------------------------------------------------

// S2SClusterTokenToProxyReq

// bytes token = 1;
inline void S2SClusterTokenToProxyReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SClusterTokenToProxyReq::token() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyReq.token)
  return token_.GetNoArena();
}
inline void S2SClusterTokenToProxyReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyReq.token)
}
#if LANG_CXX11
inline void S2SClusterTokenToProxyReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SClusterTokenToProxyReq.token)
}
#endif
inline void S2SClusterTokenToProxyReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SClusterTokenToProxyReq.token)
}
inline void S2SClusterTokenToProxyReq::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SClusterTokenToProxyReq.token)
}
inline ::std::string* S2SClusterTokenToProxyReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterTokenToProxyReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SClusterTokenToProxyReq::release_token() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterTokenToProxyReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SClusterTokenToProxyReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterTokenToProxyReq.token)
}

// uint64 clientid = 2;
inline void S2SClusterTokenToProxyReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToProxyReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyReq.clientid)
  return clientid_;
}
inline void S2SClusterTokenToProxyReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyReq.clientid)
}

// uint64 proxyid = 3;
inline void S2SClusterTokenToProxyReq::clear_proxyid() {
  proxyid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToProxyReq::proxyid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyReq.proxyid)
  return proxyid_;
}
inline void S2SClusterTokenToProxyReq::set_proxyid(::google::protobuf::uint64 value) {
  
  proxyid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyReq.proxyid)
}

// uint64 masterid = 4;
inline void S2SClusterTokenToProxyReq::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToProxyReq::masterid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyReq.masterid)
  return masterid_;
}
inline void S2SClusterTokenToProxyReq::set_masterid(::google::protobuf::uint64 value) {
  
  masterid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyReq.masterid)
}

// -------------------------------------------------------------------

// S2SClusterTokenToMasterReq

// bytes token = 1;
inline void S2SClusterTokenToMasterReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SClusterTokenToMasterReq::token() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToMasterReq.token)
  return token_.GetNoArena();
}
inline void S2SClusterTokenToMasterReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToMasterReq.token)
}
#if LANG_CXX11
inline void S2SClusterTokenToMasterReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SClusterTokenToMasterReq.token)
}
#endif
inline void S2SClusterTokenToMasterReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SClusterTokenToMasterReq.token)
}
inline void S2SClusterTokenToMasterReq::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SClusterTokenToMasterReq.token)
}
inline ::std::string* S2SClusterTokenToMasterReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterTokenToMasterReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SClusterTokenToMasterReq::release_token() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterTokenToMasterReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SClusterTokenToMasterReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterTokenToMasterReq.token)
}

// uint64 clientid = 2;
inline void S2SClusterTokenToMasterReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToMasterReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToMasterReq.clientid)
  return clientid_;
}
inline void S2SClusterTokenToMasterReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToMasterReq.clientid)
}

// uint64 proxyid = 3;
inline void S2SClusterTokenToMasterReq::clear_proxyid() {
  proxyid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToMasterReq::proxyid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToMasterReq.proxyid)
  return proxyid_;
}
inline void S2SClusterTokenToMasterReq::set_proxyid(::google::protobuf::uint64 value) {
  
  proxyid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToMasterReq.proxyid)
}

// uint64 masterid = 4;
inline void S2SClusterTokenToMasterReq::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToMasterReq::masterid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToMasterReq.masterid)
  return masterid_;
}
inline void S2SClusterTokenToMasterReq::set_masterid(::google::protobuf::uint64 value) {
  
  masterid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToMasterReq.masterid)
}

// -------------------------------------------------------------------

// S2SClusterVerifyToProxyReq

// bytes token = 1;
inline void S2SClusterVerifyToProxyReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SClusterVerifyToProxyReq::token() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterVerifyToProxyReq.token)
  return token_.GetNoArena();
}
inline void S2SClusterVerifyToProxyReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterVerifyToProxyReq.token)
}
#if LANG_CXX11
inline void S2SClusterVerifyToProxyReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SClusterVerifyToProxyReq.token)
}
#endif
inline void S2SClusterVerifyToProxyReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SClusterVerifyToProxyReq.token)
}
inline void S2SClusterVerifyToProxyReq::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SClusterVerifyToProxyReq.token)
}
inline ::std::string* S2SClusterVerifyToProxyReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterVerifyToProxyReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SClusterVerifyToProxyReq::release_token() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterVerifyToProxyReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SClusterVerifyToProxyReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterVerifyToProxyReq.token)
}

// uint64 serverid = 2;
inline void S2SClusterVerifyToProxyReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterVerifyToProxyReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterVerifyToProxyReq.serverid)
  return serverid_;
}
inline void S2SClusterVerifyToProxyReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterVerifyToProxyReq.serverid)
}

// -------------------------------------------------------------------

// S2SClusterTokenToProxyAck

// bytes token = 1;
inline void S2SClusterTokenToProxyAck::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SClusterTokenToProxyAck::token() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyAck.token)
  return token_.GetNoArena();
}
inline void S2SClusterTokenToProxyAck::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyAck.token)
}
#if LANG_CXX11
inline void S2SClusterTokenToProxyAck::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SClusterTokenToProxyAck.token)
}
#endif
inline void S2SClusterTokenToProxyAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SClusterTokenToProxyAck.token)
}
inline void S2SClusterTokenToProxyAck::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SClusterTokenToProxyAck.token)
}
inline ::std::string* S2SClusterTokenToProxyAck::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterTokenToProxyAck.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SClusterTokenToProxyAck::release_token() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterTokenToProxyAck.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SClusterTokenToProxyAck::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterTokenToProxyAck.token)
}

// uint64 clientid = 2;
inline void S2SClusterTokenToProxyAck::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToProxyAck::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyAck.clientid)
  return clientid_;
}
inline void S2SClusterTokenToProxyAck::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyAck.clientid)
}

// uint64 proxyid = 3;
inline void S2SClusterTokenToProxyAck::clear_proxyid() {
  proxyid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToProxyAck::proxyid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyAck.proxyid)
  return proxyid_;
}
inline void S2SClusterTokenToProxyAck::set_proxyid(::google::protobuf::uint64 value) {
  
  proxyid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyAck.proxyid)
}

// uint64 masterid = 4;
inline void S2SClusterTokenToProxyAck::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToProxyAck::masterid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToProxyAck.masterid)
  return masterid_;
}
inline void S2SClusterTokenToProxyAck::set_masterid(::google::protobuf::uint64 value) {
  
  masterid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToProxyAck.masterid)
}

// -------------------------------------------------------------------

// S2SClusterTokenToMasterAck

// bytes token = 1;
inline void S2SClusterTokenToMasterAck::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SClusterTokenToMasterAck::token() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToMasterAck.token)
  return token_.GetNoArena();
}
inline void S2SClusterTokenToMasterAck::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToMasterAck.token)
}
#if LANG_CXX11
inline void S2SClusterTokenToMasterAck::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SClusterTokenToMasterAck.token)
}
#endif
inline void S2SClusterTokenToMasterAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SClusterTokenToMasterAck.token)
}
inline void S2SClusterTokenToMasterAck::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SClusterTokenToMasterAck.token)
}
inline ::std::string* S2SClusterTokenToMasterAck::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SClusterTokenToMasterAck.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SClusterTokenToMasterAck::release_token() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SClusterTokenToMasterAck.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SClusterTokenToMasterAck::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SClusterTokenToMasterAck.token)
}

// uint64 clientid = 2;
inline void S2SClusterTokenToMasterAck::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToMasterAck::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToMasterAck.clientid)
  return clientid_;
}
inline void S2SClusterTokenToMasterAck::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToMasterAck.clientid)
}

// uint64 proxyid = 3;
inline void S2SClusterTokenToMasterAck::clear_proxyid() {
  proxyid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterTokenToMasterAck::proxyid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterTokenToMasterAck.proxyid)
  return proxyid_;
}
inline void S2SClusterTokenToMasterAck::set_proxyid(::google::protobuf::uint64 value) {
  
  proxyid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterTokenToMasterAck.proxyid)
}

// -------------------------------------------------------------------

// S2SClusterVerifyToClientAck

// uint64 serverid = 1;
inline void S2SClusterVerifyToClientAck::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterVerifyToClientAck::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterVerifyToClientAck.serverid)
  return serverid_;
}
inline void S2SClusterVerifyToClientAck::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterVerifyToClientAck.serverid)
}

// -------------------------------------------------------------------

// S2SClusterClientDiscoverToShardReq

// repeated uint64 clientid = 1;
inline int S2SClusterClientDiscoverToShardReq::clientid_size() const {
  return clientid_.size();
}
inline void S2SClusterClientDiscoverToShardReq::clear_clientid() {
  clientid_.Clear();
}
inline ::google::protobuf::uint64 S2SClusterClientDiscoverToShardReq::clientid(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterClientDiscoverToShardReq.clientid)
  return clientid_.Get(index);
}
inline void S2SClusterClientDiscoverToShardReq::set_clientid(int index, ::google::protobuf::uint64 value) {
  clientid_.Set(index, value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterClientDiscoverToShardReq.clientid)
}
inline void S2SClusterClientDiscoverToShardReq::add_clientid(::google::protobuf::uint64 value) {
  clientid_.Add(value);
  // @@protoc_insertion_point(field_add:KFMsg.S2SClusterClientDiscoverToShardReq.clientid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SClusterClientDiscoverToShardReq::clientid() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SClusterClientDiscoverToShardReq.clientid)
  return clientid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SClusterClientDiscoverToShardReq::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SClusterClientDiscoverToShardReq.clientid)
  return &clientid_;
}

// -------------------------------------------------------------------

// S2SClusterClientLostToShardReq

// uint64 clientid = 1;
inline void S2SClusterClientLostToShardReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterClientLostToShardReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterClientLostToShardReq.clientid)
  return clientid_;
}
inline void S2SClusterClientLostToShardReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterClientLostToShardReq.clientid)
}

// -------------------------------------------------------------------

// S2SClusterLostProxyToMasterReq

// uint64 proxyid = 1;
inline void S2SClusterLostProxyToMasterReq::clear_proxyid() {
  proxyid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SClusterLostProxyToMasterReq::proxyid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SClusterLostProxyToMasterReq.proxyid)
  return proxyid_;
}
inline void S2SClusterLostProxyToMasterReq::set_proxyid(::google::protobuf::uint64 value) {
  
  proxyid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SClusterLostProxyToMasterReq.proxyid)
}

// -------------------------------------------------------------------

// PBRoute

// uint64 serverid = 1;
inline void PBRoute::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBRoute::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBRoute.serverid)
  return serverid_;
}
inline void PBRoute::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBRoute.serverid)
}

// uint64 sendid = 2;
inline void PBRoute::clear_sendid() {
  sendid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBRoute::sendid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBRoute.sendid)
  return sendid_;
}
inline void PBRoute::set_sendid(::google::protobuf::uint64 value) {
  
  sendid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBRoute.sendid)
}

// uint64 recvid = 3;
inline void PBRoute::clear_recvid() {
  recvid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBRoute::recvid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBRoute.recvid)
  return recvid_;
}
inline void PBRoute::set_recvid(::google::protobuf::uint64 value) {
  
  recvid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBRoute.recvid)
}

// -------------------------------------------------------------------

// S2SRouteMessageToClientAck

// .KFMsg.PBRoute pbroute = 1;
inline bool S2SRouteMessageToClientAck::has_pbroute() const {
  return this != internal_default_instance() && pbroute_ != NULL;
}
inline void S2SRouteMessageToClientAck::clear_pbroute() {
  if (GetArenaNoVirtual() == NULL && pbroute_ != NULL) {
    delete pbroute_;
  }
  pbroute_ = NULL;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToClientAck::_internal_pbroute() const {
  return *pbroute_;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToClientAck::pbroute() const {
  const ::KFMsg::PBRoute* p = pbroute_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToClientAck.pbroute)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRoute*>(
      &::KFMsg::_PBRoute_default_instance_);
}
inline ::KFMsg::PBRoute* S2SRouteMessageToClientAck::release_pbroute() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToClientAck.pbroute)
  
  ::KFMsg::PBRoute* temp = pbroute_;
  pbroute_ = NULL;
  return temp;
}
inline ::KFMsg::PBRoute* S2SRouteMessageToClientAck::mutable_pbroute() {
  
  if (pbroute_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRoute>(GetArenaNoVirtual());
    pbroute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToClientAck.pbroute)
  return pbroute_;
}
inline void S2SRouteMessageToClientAck::set_allocated_pbroute(::KFMsg::PBRoute* pbroute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbroute_;
  }
  if (pbroute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroute, submessage_arena);
    }
    
  } else {
    
  }
  pbroute_ = pbroute;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToClientAck.pbroute)
}

// uint32 msgid = 2;
inline void S2SRouteMessageToClientAck::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteMessageToClientAck::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToClientAck.msgid)
  return msgid_;
}
inline void S2SRouteMessageToClientAck::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToClientAck.msgid)
}

// bytes msgdata = 3;
inline void S2SRouteMessageToClientAck::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToClientAck::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToClientAck.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SRouteMessageToClientAck::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToClientAck.msgdata)
}
#if LANG_CXX11
inline void S2SRouteMessageToClientAck::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToClientAck.msgdata)
}
#endif
inline void S2SRouteMessageToClientAck::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToClientAck.msgdata)
}
inline void S2SRouteMessageToClientAck::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToClientAck.msgdata)
}
inline ::std::string* S2SRouteMessageToClientAck::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToClientAck.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToClientAck::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToClientAck.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToClientAck::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToClientAck.msgdata)
}

// -------------------------------------------------------------------

// S2SRouteMessageToNameAllReq

// .KFMsg.PBRoute pbroute = 1;
inline bool S2SRouteMessageToNameAllReq::has_pbroute() const {
  return this != internal_default_instance() && pbroute_ != NULL;
}
inline void S2SRouteMessageToNameAllReq::clear_pbroute() {
  if (GetArenaNoVirtual() == NULL && pbroute_ != NULL) {
    delete pbroute_;
  }
  pbroute_ = NULL;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameAllReq::_internal_pbroute() const {
  return *pbroute_;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameAllReq::pbroute() const {
  const ::KFMsg::PBRoute* p = pbroute_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameAllReq.pbroute)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRoute*>(
      &::KFMsg::_PBRoute_default_instance_);
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameAllReq::release_pbroute() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameAllReq.pbroute)
  
  ::KFMsg::PBRoute* temp = pbroute_;
  pbroute_ = NULL;
  return temp;
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameAllReq::mutable_pbroute() {
  
  if (pbroute_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRoute>(GetArenaNoVirtual());
    pbroute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameAllReq.pbroute)
  return pbroute_;
}
inline void S2SRouteMessageToNameAllReq::set_allocated_pbroute(::KFMsg::PBRoute* pbroute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbroute_;
  }
  if (pbroute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroute, submessage_arena);
    }
    
  } else {
    
  }
  pbroute_ = pbroute;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameAllReq.pbroute)
}

// bytes name = 2;
inline void S2SRouteMessageToNameAllReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameAllReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameAllReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteMessageToNameAllReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameAllReq.name)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameAllReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameAllReq.name)
}
#endif
inline void S2SRouteMessageToNameAllReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameAllReq.name)
}
inline void S2SRouteMessageToNameAllReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameAllReq.name)
}
inline ::std::string* S2SRouteMessageToNameAllReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameAllReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameAllReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameAllReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameAllReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameAllReq.name)
}

// uint32 msgid = 3;
inline void S2SRouteMessageToNameAllReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteMessageToNameAllReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameAllReq.msgid)
  return msgid_;
}
inline void S2SRouteMessageToNameAllReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameAllReq.msgid)
}

// bytes msgdata = 4;
inline void S2SRouteMessageToNameAllReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameAllReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SRouteMessageToNameAllReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameAllReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
}
#endif
inline void S2SRouteMessageToNameAllReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
}
inline void S2SRouteMessageToNameAllReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
}
inline ::std::string* S2SRouteMessageToNameAllReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameAllReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameAllReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameAllReq.msgdata)
}

// -------------------------------------------------------------------

// S2SRouteMessageToNameRandReq

// .KFMsg.PBRoute pbroute = 1;
inline bool S2SRouteMessageToNameRandReq::has_pbroute() const {
  return this != internal_default_instance() && pbroute_ != NULL;
}
inline void S2SRouteMessageToNameRandReq::clear_pbroute() {
  if (GetArenaNoVirtual() == NULL && pbroute_ != NULL) {
    delete pbroute_;
  }
  pbroute_ = NULL;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameRandReq::_internal_pbroute() const {
  return *pbroute_;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameRandReq::pbroute() const {
  const ::KFMsg::PBRoute* p = pbroute_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameRandReq.pbroute)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRoute*>(
      &::KFMsg::_PBRoute_default_instance_);
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameRandReq::release_pbroute() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameRandReq.pbroute)
  
  ::KFMsg::PBRoute* temp = pbroute_;
  pbroute_ = NULL;
  return temp;
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameRandReq::mutable_pbroute() {
  
  if (pbroute_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRoute>(GetArenaNoVirtual());
    pbroute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameRandReq.pbroute)
  return pbroute_;
}
inline void S2SRouteMessageToNameRandReq::set_allocated_pbroute(::KFMsg::PBRoute* pbroute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbroute_;
  }
  if (pbroute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroute, submessage_arena);
    }
    
  } else {
    
  }
  pbroute_ = pbroute;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameRandReq.pbroute)
}

// bytes name = 2;
inline void S2SRouteMessageToNameRandReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameRandReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameRandReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteMessageToNameRandReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameRandReq.name)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameRandReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameRandReq.name)
}
#endif
inline void S2SRouteMessageToNameRandReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameRandReq.name)
}
inline void S2SRouteMessageToNameRandReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameRandReq.name)
}
inline ::std::string* S2SRouteMessageToNameRandReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameRandReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameRandReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameRandReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameRandReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameRandReq.name)
}

// uint32 msgid = 3;
inline void S2SRouteMessageToNameRandReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteMessageToNameRandReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameRandReq.msgid)
  return msgid_;
}
inline void S2SRouteMessageToNameRandReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameRandReq.msgid)
}

// bytes msgdata = 4;
inline void S2SRouteMessageToNameRandReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameRandReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SRouteMessageToNameRandReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameRandReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
}
#endif
inline void S2SRouteMessageToNameRandReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
}
inline void S2SRouteMessageToNameRandReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
}
inline ::std::string* S2SRouteMessageToNameRandReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameRandReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameRandReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameRandReq.msgdata)
}

// -------------------------------------------------------------------

// S2SRouteMessageToNameBalanceReq

// .KFMsg.PBRoute pbroute = 1;
inline bool S2SRouteMessageToNameBalanceReq::has_pbroute() const {
  return this != internal_default_instance() && pbroute_ != NULL;
}
inline void S2SRouteMessageToNameBalanceReq::clear_pbroute() {
  if (GetArenaNoVirtual() == NULL && pbroute_ != NULL) {
    delete pbroute_;
  }
  pbroute_ = NULL;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameBalanceReq::_internal_pbroute() const {
  return *pbroute_;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameBalanceReq::pbroute() const {
  const ::KFMsg::PBRoute* p = pbroute_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameBalanceReq.pbroute)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRoute*>(
      &::KFMsg::_PBRoute_default_instance_);
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameBalanceReq::release_pbroute() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameBalanceReq.pbroute)
  
  ::KFMsg::PBRoute* temp = pbroute_;
  pbroute_ = NULL;
  return temp;
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameBalanceReq::mutable_pbroute() {
  
  if (pbroute_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRoute>(GetArenaNoVirtual());
    pbroute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameBalanceReq.pbroute)
  return pbroute_;
}
inline void S2SRouteMessageToNameBalanceReq::set_allocated_pbroute(::KFMsg::PBRoute* pbroute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbroute_;
  }
  if (pbroute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroute, submessage_arena);
    }
    
  } else {
    
  }
  pbroute_ = pbroute;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameBalanceReq.pbroute)
}

// bytes name = 2;
inline void S2SRouteMessageToNameBalanceReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameBalanceReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameBalanceReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteMessageToNameBalanceReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameBalanceReq.name)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameBalanceReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameBalanceReq.name)
}
#endif
inline void S2SRouteMessageToNameBalanceReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameBalanceReq.name)
}
inline void S2SRouteMessageToNameBalanceReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameBalanceReq.name)
}
inline ::std::string* S2SRouteMessageToNameBalanceReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameBalanceReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameBalanceReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameBalanceReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameBalanceReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameBalanceReq.name)
}

// uint32 msgid = 3;
inline void S2SRouteMessageToNameBalanceReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteMessageToNameBalanceReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameBalanceReq.msgid)
  return msgid_;
}
inline void S2SRouteMessageToNameBalanceReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameBalanceReq.msgid)
}

// bytes msgdata = 4;
inline void S2SRouteMessageToNameBalanceReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameBalanceReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SRouteMessageToNameBalanceReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameBalanceReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
}
#endif
inline void S2SRouteMessageToNameBalanceReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
}
inline void S2SRouteMessageToNameBalanceReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
}
inline ::std::string* S2SRouteMessageToNameBalanceReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameBalanceReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameBalanceReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameBalanceReq.msgdata)
}

// -------------------------------------------------------------------

// S2SRouteMessageToNameObjectReq

// .KFMsg.PBRoute pbroute = 1;
inline bool S2SRouteMessageToNameObjectReq::has_pbroute() const {
  return this != internal_default_instance() && pbroute_ != NULL;
}
inline void S2SRouteMessageToNameObjectReq::clear_pbroute() {
  if (GetArenaNoVirtual() == NULL && pbroute_ != NULL) {
    delete pbroute_;
  }
  pbroute_ = NULL;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameObjectReq::_internal_pbroute() const {
  return *pbroute_;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToNameObjectReq::pbroute() const {
  const ::KFMsg::PBRoute* p = pbroute_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameObjectReq.pbroute)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRoute*>(
      &::KFMsg::_PBRoute_default_instance_);
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameObjectReq::release_pbroute() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameObjectReq.pbroute)
  
  ::KFMsg::PBRoute* temp = pbroute_;
  pbroute_ = NULL;
  return temp;
}
inline ::KFMsg::PBRoute* S2SRouteMessageToNameObjectReq::mutable_pbroute() {
  
  if (pbroute_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRoute>(GetArenaNoVirtual());
    pbroute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameObjectReq.pbroute)
  return pbroute_;
}
inline void S2SRouteMessageToNameObjectReq::set_allocated_pbroute(::KFMsg::PBRoute* pbroute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbroute_;
  }
  if (pbroute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroute, submessage_arena);
    }
    
  } else {
    
  }
  pbroute_ = pbroute;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameObjectReq.pbroute)
}

// bytes name = 2;
inline void S2SRouteMessageToNameObjectReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameObjectReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameObjectReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteMessageToNameObjectReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameObjectReq.name)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameObjectReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameObjectReq.name)
}
#endif
inline void S2SRouteMessageToNameObjectReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameObjectReq.name)
}
inline void S2SRouteMessageToNameObjectReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameObjectReq.name)
}
inline ::std::string* S2SRouteMessageToNameObjectReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameObjectReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameObjectReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameObjectReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameObjectReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameObjectReq.name)
}

// uint32 msgid = 3;
inline void S2SRouteMessageToNameObjectReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteMessageToNameObjectReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameObjectReq.msgid)
  return msgid_;
}
inline void S2SRouteMessageToNameObjectReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameObjectReq.msgid)
}

// bytes msgdata = 4;
inline void S2SRouteMessageToNameObjectReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToNameObjectReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SRouteMessageToNameObjectReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
}
#if LANG_CXX11
inline void S2SRouteMessageToNameObjectReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
}
#endif
inline void S2SRouteMessageToNameObjectReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
}
inline void S2SRouteMessageToNameObjectReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
}
inline ::std::string* S2SRouteMessageToNameObjectReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToNameObjectReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToNameObjectReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToNameObjectReq.msgdata)
}

// -------------------------------------------------------------------

// S2SRouteMessageToServerReq

// .KFMsg.PBRoute pbroute = 1;
inline bool S2SRouteMessageToServerReq::has_pbroute() const {
  return this != internal_default_instance() && pbroute_ != NULL;
}
inline void S2SRouteMessageToServerReq::clear_pbroute() {
  if (GetArenaNoVirtual() == NULL && pbroute_ != NULL) {
    delete pbroute_;
  }
  pbroute_ = NULL;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToServerReq::_internal_pbroute() const {
  return *pbroute_;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToServerReq::pbroute() const {
  const ::KFMsg::PBRoute* p = pbroute_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToServerReq.pbroute)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRoute*>(
      &::KFMsg::_PBRoute_default_instance_);
}
inline ::KFMsg::PBRoute* S2SRouteMessageToServerReq::release_pbroute() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToServerReq.pbroute)
  
  ::KFMsg::PBRoute* temp = pbroute_;
  pbroute_ = NULL;
  return temp;
}
inline ::KFMsg::PBRoute* S2SRouteMessageToServerReq::mutable_pbroute() {
  
  if (pbroute_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRoute>(GetArenaNoVirtual());
    pbroute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToServerReq.pbroute)
  return pbroute_;
}
inline void S2SRouteMessageToServerReq::set_allocated_pbroute(::KFMsg::PBRoute* pbroute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbroute_;
  }
  if (pbroute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroute, submessage_arena);
    }
    
  } else {
    
  }
  pbroute_ = pbroute;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToServerReq.pbroute)
}

// uint64 targetid = 2;
inline void S2SRouteMessageToServerReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteMessageToServerReq::targetid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToServerReq.targetid)
  return targetid_;
}
inline void S2SRouteMessageToServerReq::set_targetid(::google::protobuf::uint64 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToServerReq.targetid)
}

// uint32 msgid = 3;
inline void S2SRouteMessageToServerReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteMessageToServerReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToServerReq.msgid)
  return msgid_;
}
inline void S2SRouteMessageToServerReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToServerReq.msgid)
}

// bytes msgdata = 4;
inline void S2SRouteMessageToServerReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToServerReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToServerReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SRouteMessageToServerReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToServerReq.msgdata)
}
#if LANG_CXX11
inline void S2SRouteMessageToServerReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToServerReq.msgdata)
}
#endif
inline void S2SRouteMessageToServerReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToServerReq.msgdata)
}
inline void S2SRouteMessageToServerReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToServerReq.msgdata)
}
inline ::std::string* S2SRouteMessageToServerReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToServerReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToServerReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToServerReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToServerReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToServerReq.msgdata)
}

// -------------------------------------------------------------------

// S2SRouteMessageToPlayerReq

// .KFMsg.PBRoute pbroute = 1;
inline bool S2SRouteMessageToPlayerReq::has_pbroute() const {
  return this != internal_default_instance() && pbroute_ != NULL;
}
inline void S2SRouteMessageToPlayerReq::clear_pbroute() {
  if (GetArenaNoVirtual() == NULL && pbroute_ != NULL) {
    delete pbroute_;
  }
  pbroute_ = NULL;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToPlayerReq::_internal_pbroute() const {
  return *pbroute_;
}
inline const ::KFMsg::PBRoute& S2SRouteMessageToPlayerReq::pbroute() const {
  const ::KFMsg::PBRoute* p = pbroute_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToPlayerReq.pbroute)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRoute*>(
      &::KFMsg::_PBRoute_default_instance_);
}
inline ::KFMsg::PBRoute* S2SRouteMessageToPlayerReq::release_pbroute() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToPlayerReq.pbroute)
  
  ::KFMsg::PBRoute* temp = pbroute_;
  pbroute_ = NULL;
  return temp;
}
inline ::KFMsg::PBRoute* S2SRouteMessageToPlayerReq::mutable_pbroute() {
  
  if (pbroute_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRoute>(GetArenaNoVirtual());
    pbroute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToPlayerReq.pbroute)
  return pbroute_;
}
inline void S2SRouteMessageToPlayerReq::set_allocated_pbroute(::KFMsg::PBRoute* pbroute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbroute_;
  }
  if (pbroute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroute, submessage_arena);
    }
    
  } else {
    
  }
  pbroute_ = pbroute;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToPlayerReq.pbroute)
}

// uint64 targetid = 2;
inline void S2SRouteMessageToPlayerReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteMessageToPlayerReq::targetid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToPlayerReq.targetid)
  return targetid_;
}
inline void S2SRouteMessageToPlayerReq::set_targetid(::google::protobuf::uint64 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToPlayerReq.targetid)
}

// uint32 msgid = 3;
inline void S2SRouteMessageToPlayerReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteMessageToPlayerReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToPlayerReq.msgid)
  return msgid_;
}
inline void S2SRouteMessageToPlayerReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToPlayerReq.msgid)
}

// bytes msgdata = 4;
inline void S2SRouteMessageToPlayerReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteMessageToPlayerReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SRouteMessageToPlayerReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
}
#if LANG_CXX11
inline void S2SRouteMessageToPlayerReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
}
#endif
inline void S2SRouteMessageToPlayerReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
}
inline void S2SRouteMessageToPlayerReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
}
inline ::std::string* S2SRouteMessageToPlayerReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteMessageToPlayerReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteMessageToPlayerReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteMessageToPlayerReq.msgdata)
}

// -------------------------------------------------------------------

// S2SRouteClientLostToShardReq

// bytes name = 1;
inline void S2SRouteClientLostToShardReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteClientLostToShardReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteClientLostToShardReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteClientLostToShardReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteClientLostToShardReq.name)
}
#if LANG_CXX11
inline void S2SRouteClientLostToShardReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteClientLostToShardReq.name)
}
#endif
inline void S2SRouteClientLostToShardReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteClientLostToShardReq.name)
}
inline void S2SRouteClientLostToShardReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteClientLostToShardReq.name)
}
inline ::std::string* S2SRouteClientLostToShardReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteClientLostToShardReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteClientLostToShardReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteClientLostToShardReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteClientLostToShardReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteClientLostToShardReq.name)
}

// uint64 clientid = 2;
inline void S2SRouteClientLostToShardReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteClientLostToShardReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteClientLostToShardReq.clientid)
  return clientid_;
}
inline void S2SRouteClientLostToShardReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteClientLostToShardReq.clientid)
}

// -------------------------------------------------------------------

// S2SRouteDiscoverToClientReq

// uint64 shardid = 1;
inline void S2SRouteDiscoverToClientReq::clear_shardid() {
  shardid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteDiscoverToClientReq::shardid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteDiscoverToClientReq.shardid)
  return shardid_;
}
inline void S2SRouteDiscoverToClientReq::set_shardid(::google::protobuf::uint64 value) {
  
  shardid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteDiscoverToClientReq.shardid)
}

// -------------------------------------------------------------------

// S2SRouteSyncObjectToProxyReq

// bytes name = 1;
inline void S2SRouteSyncObjectToProxyReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteSyncObjectToProxyReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteSyncObjectToProxyReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteSyncObjectToProxyReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteSyncObjectToProxyReq.name)
}
#if LANG_CXX11
inline void S2SRouteSyncObjectToProxyReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteSyncObjectToProxyReq.name)
}
#endif
inline void S2SRouteSyncObjectToProxyReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteSyncObjectToProxyReq.name)
}
inline void S2SRouteSyncObjectToProxyReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteSyncObjectToProxyReq.name)
}
inline ::std::string* S2SRouteSyncObjectToProxyReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteSyncObjectToProxyReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteSyncObjectToProxyReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteSyncObjectToProxyReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteSyncObjectToProxyReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteSyncObjectToProxyReq.name)
}

// uint64 clientid = 2;
inline void S2SRouteSyncObjectToProxyReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteSyncObjectToProxyReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteSyncObjectToProxyReq.clientid)
  return clientid_;
}
inline void S2SRouteSyncObjectToProxyReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteSyncObjectToProxyReq.clientid)
}

// uint64 shardid = 3;
inline void S2SRouteSyncObjectToProxyReq::clear_shardid() {
  shardid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteSyncObjectToProxyReq::shardid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteSyncObjectToProxyReq.shardid)
  return shardid_;
}
inline void S2SRouteSyncObjectToProxyReq::set_shardid(::google::protobuf::uint64 value) {
  
  shardid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteSyncObjectToProxyReq.shardid)
}

// repeated uint64 objectid = 4;
inline int S2SRouteSyncObjectToProxyReq::objectid_size() const {
  return objectid_.size();
}
inline void S2SRouteSyncObjectToProxyReq::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::uint64 S2SRouteSyncObjectToProxyReq::objectid(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteSyncObjectToProxyReq.objectid)
  return objectid_.Get(index);
}
inline void S2SRouteSyncObjectToProxyReq::set_objectid(int index, ::google::protobuf::uint64 value) {
  objectid_.Set(index, value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteSyncObjectToProxyReq.objectid)
}
inline void S2SRouteSyncObjectToProxyReq::add_objectid(::google::protobuf::uint64 value) {
  objectid_.Add(value);
  // @@protoc_insertion_point(field_add:KFMsg.S2SRouteSyncObjectToProxyReq.objectid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SRouteSyncObjectToProxyReq::objectid() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SRouteSyncObjectToProxyReq.objectid)
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SRouteSyncObjectToProxyReq::mutable_objectid() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SRouteSyncObjectToProxyReq.objectid)
  return &objectid_;
}

// -------------------------------------------------------------------

// S2SRouteSyncObjectToShardReq

// bytes name = 1;
inline void S2SRouteSyncObjectToShardReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteSyncObjectToShardReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteSyncObjectToShardReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteSyncObjectToShardReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteSyncObjectToShardReq.name)
}
#if LANG_CXX11
inline void S2SRouteSyncObjectToShardReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteSyncObjectToShardReq.name)
}
#endif
inline void S2SRouteSyncObjectToShardReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteSyncObjectToShardReq.name)
}
inline void S2SRouteSyncObjectToShardReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteSyncObjectToShardReq.name)
}
inline ::std::string* S2SRouteSyncObjectToShardReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteSyncObjectToShardReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteSyncObjectToShardReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteSyncObjectToShardReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteSyncObjectToShardReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteSyncObjectToShardReq.name)
}

// uint64 clientid = 2;
inline void S2SRouteSyncObjectToShardReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteSyncObjectToShardReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteSyncObjectToShardReq.clientid)
  return clientid_;
}
inline void S2SRouteSyncObjectToShardReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteSyncObjectToShardReq.clientid)
}

// repeated uint64 objectid = 3;
inline int S2SRouteSyncObjectToShardReq::objectid_size() const {
  return objectid_.size();
}
inline void S2SRouteSyncObjectToShardReq::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::uint64 S2SRouteSyncObjectToShardReq::objectid(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteSyncObjectToShardReq.objectid)
  return objectid_.Get(index);
}
inline void S2SRouteSyncObjectToShardReq::set_objectid(int index, ::google::protobuf::uint64 value) {
  objectid_.Set(index, value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteSyncObjectToShardReq.objectid)
}
inline void S2SRouteSyncObjectToShardReq::add_objectid(::google::protobuf::uint64 value) {
  objectid_.Add(value);
  // @@protoc_insertion_point(field_add:KFMsg.S2SRouteSyncObjectToShardReq.objectid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SRouteSyncObjectToShardReq::objectid() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SRouteSyncObjectToShardReq.objectid)
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SRouteSyncObjectToShardReq::mutable_objectid() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SRouteSyncObjectToShardReq.objectid)
  return &objectid_;
}

// -------------------------------------------------------------------

// S2SRouteAddObjectToProxyReq

// bytes name = 1;
inline void S2SRouteAddObjectToProxyReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteAddObjectToProxyReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToProxyReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteAddObjectToProxyReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToProxyReq.name)
}
#if LANG_CXX11
inline void S2SRouteAddObjectToProxyReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteAddObjectToProxyReq.name)
}
#endif
inline void S2SRouteAddObjectToProxyReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteAddObjectToProxyReq.name)
}
inline void S2SRouteAddObjectToProxyReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteAddObjectToProxyReq.name)
}
inline ::std::string* S2SRouteAddObjectToProxyReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteAddObjectToProxyReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteAddObjectToProxyReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteAddObjectToProxyReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteAddObjectToProxyReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteAddObjectToProxyReq.name)
}

// uint64 clientid = 2;
inline void S2SRouteAddObjectToProxyReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteAddObjectToProxyReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToProxyReq.clientid)
  return clientid_;
}
inline void S2SRouteAddObjectToProxyReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToProxyReq.clientid)
}

// uint64 objectid = 3;
inline void S2SRouteAddObjectToProxyReq::clear_objectid() {
  objectid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteAddObjectToProxyReq::objectid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToProxyReq.objectid)
  return objectid_;
}
inline void S2SRouteAddObjectToProxyReq::set_objectid(::google::protobuf::uint64 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToProxyReq.objectid)
}

// uint32 objectcount = 4;
inline void S2SRouteAddObjectToProxyReq::clear_objectcount() {
  objectcount_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteAddObjectToProxyReq::objectcount() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToProxyReq.objectcount)
  return objectcount_;
}
inline void S2SRouteAddObjectToProxyReq::set_objectcount(::google::protobuf::uint32 value) {
  
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToProxyReq.objectcount)
}

// -------------------------------------------------------------------

// S2SRouteAddObjectToShardReq

// bytes name = 1;
inline void S2SRouteAddObjectToShardReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteAddObjectToShardReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToShardReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteAddObjectToShardReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToShardReq.name)
}
#if LANG_CXX11
inline void S2SRouteAddObjectToShardReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteAddObjectToShardReq.name)
}
#endif
inline void S2SRouteAddObjectToShardReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteAddObjectToShardReq.name)
}
inline void S2SRouteAddObjectToShardReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteAddObjectToShardReq.name)
}
inline ::std::string* S2SRouteAddObjectToShardReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteAddObjectToShardReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteAddObjectToShardReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteAddObjectToShardReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteAddObjectToShardReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteAddObjectToShardReq.name)
}

// uint64 clientid = 2;
inline void S2SRouteAddObjectToShardReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteAddObjectToShardReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToShardReq.clientid)
  return clientid_;
}
inline void S2SRouteAddObjectToShardReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToShardReq.clientid)
}

// uint64 objectid = 3;
inline void S2SRouteAddObjectToShardReq::clear_objectid() {
  objectid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteAddObjectToShardReq::objectid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToShardReq.objectid)
  return objectid_;
}
inline void S2SRouteAddObjectToShardReq::set_objectid(::google::protobuf::uint64 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToShardReq.objectid)
}

// uint32 objectcount = 4;
inline void S2SRouteAddObjectToShardReq::clear_objectcount() {
  objectcount_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteAddObjectToShardReq::objectcount() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteAddObjectToShardReq.objectcount)
  return objectcount_;
}
inline void S2SRouteAddObjectToShardReq::set_objectcount(::google::protobuf::uint32 value) {
  
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteAddObjectToShardReq.objectcount)
}

// -------------------------------------------------------------------

// S2SRouteRemoveObjectToProxyReq

// bytes name = 1;
inline void S2SRouteRemoveObjectToProxyReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteRemoveObjectToProxyReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteRemoveObjectToProxyReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
}
#if LANG_CXX11
inline void S2SRouteRemoveObjectToProxyReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
}
#endif
inline void S2SRouteRemoveObjectToProxyReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
}
inline void S2SRouteRemoveObjectToProxyReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
}
inline ::std::string* S2SRouteRemoveObjectToProxyReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteRemoveObjectToProxyReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteRemoveObjectToProxyReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteRemoveObjectToProxyReq.name)
}

// uint64 clientid = 2;
inline void S2SRouteRemoveObjectToProxyReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteRemoveObjectToProxyReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToProxyReq.clientid)
  return clientid_;
}
inline void S2SRouteRemoveObjectToProxyReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToProxyReq.clientid)
}

// uint64 objectid = 3;
inline void S2SRouteRemoveObjectToProxyReq::clear_objectid() {
  objectid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteRemoveObjectToProxyReq::objectid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToProxyReq.objectid)
  return objectid_;
}
inline void S2SRouteRemoveObjectToProxyReq::set_objectid(::google::protobuf::uint64 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToProxyReq.objectid)
}

// uint32 objectcount = 4;
inline void S2SRouteRemoveObjectToProxyReq::clear_objectcount() {
  objectcount_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteRemoveObjectToProxyReq::objectcount() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToProxyReq.objectcount)
  return objectcount_;
}
inline void S2SRouteRemoveObjectToProxyReq::set_objectcount(::google::protobuf::uint32 value) {
  
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToProxyReq.objectcount)
}

// -------------------------------------------------------------------

// S2SRouteRemoveObjectToShardReq

// bytes name = 1;
inline void S2SRouteRemoveObjectToShardReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRouteRemoveObjectToShardReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToShardReq.name)
  return name_.GetNoArena();
}
inline void S2SRouteRemoveObjectToShardReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToShardReq.name)
}
#if LANG_CXX11
inline void S2SRouteRemoveObjectToShardReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRouteRemoveObjectToShardReq.name)
}
#endif
inline void S2SRouteRemoveObjectToShardReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRouteRemoveObjectToShardReq.name)
}
inline void S2SRouteRemoveObjectToShardReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRouteRemoveObjectToShardReq.name)
}
inline ::std::string* S2SRouteRemoveObjectToShardReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRouteRemoveObjectToShardReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRouteRemoveObjectToShardReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRouteRemoveObjectToShardReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRouteRemoveObjectToShardReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRouteRemoveObjectToShardReq.name)
}

// uint64 clientid = 2;
inline void S2SRouteRemoveObjectToShardReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteRemoveObjectToShardReq::clientid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToShardReq.clientid)
  return clientid_;
}
inline void S2SRouteRemoveObjectToShardReq::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToShardReq.clientid)
}

// uint64 objectid = 3;
inline void S2SRouteRemoveObjectToShardReq::clear_objectid() {
  objectid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRouteRemoveObjectToShardReq::objectid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToShardReq.objectid)
  return objectid_;
}
inline void S2SRouteRemoveObjectToShardReq::set_objectid(::google::protobuf::uint64 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToShardReq.objectid)
}

// uint32 objectcount = 4;
inline void S2SRouteRemoveObjectToShardReq::clear_objectcount() {
  objectcount_ = 0u;
}
inline ::google::protobuf::uint32 S2SRouteRemoveObjectToShardReq::objectcount() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRouteRemoveObjectToShardReq.objectcount)
  return objectcount_;
}
inline void S2SRouteRemoveObjectToShardReq::set_objectcount(::google::protobuf::uint32 value) {
  
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRouteRemoveObjectToShardReq.objectcount)
}

// -------------------------------------------------------------------

// S2SRegisterAgentToServerReq

// bytes agentid = 1;
inline void S2SRegisterAgentToServerReq::clear_agentid() {
  agentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::agentid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.agentid)
  return agentid_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_agentid(const ::std::string& value) {
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_agentid(::std::string&& value) {
  
  agentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
#endif
inline void S2SRegisterAgentToServerReq::set_agentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
inline void S2SRegisterAgentToServerReq::set_agentid(const void* value, size_t size) {
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_agentid() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.agentid)
  return agentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_agentid() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.agentid)
  
  return agentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_agentid(::std::string* agentid) {
  if (agentid != NULL) {
    
  } else {
    
  }
  agentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agentid);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.agentid)
}

// bytes localip = 2;
inline void S2SRegisterAgentToServerReq::clear_localip() {
  localip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::localip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.localip)
  return localip_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_localip(const ::std::string& value) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.localip)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_localip(::std::string&& value) {
  
  localip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.localip)
}
#endif
inline void S2SRegisterAgentToServerReq::set_localip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.localip)
}
inline void S2SRegisterAgentToServerReq::set_localip(const void* value, size_t size) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.localip)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_localip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.localip)
  return localip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_localip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.localip)
  
  return localip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_localip(::std::string* localip) {
  if (localip != NULL) {
    
  } else {
    
  }
  localip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.localip)
}

// bytes name = 3;
inline void S2SRegisterAgentToServerReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.name)
  return name_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.name)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.name)
}
#endif
inline void S2SRegisterAgentToServerReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.name)
}
inline void S2SRegisterAgentToServerReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.name)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.name)
}

// bytes type = 4;
inline void S2SRegisterAgentToServerReq::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::type() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.type)
  return type_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.type)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.type)
}
#endif
inline void S2SRegisterAgentToServerReq::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.type)
}
inline void S2SRegisterAgentToServerReq::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.type)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_type() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.type)
}

// uint32 port = 5;
inline void S2SRegisterAgentToServerReq::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 S2SRegisterAgentToServerReq::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.port)
  return port_;
}
inline void S2SRegisterAgentToServerReq::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.port)
}

// bytes service = 6;
inline void S2SRegisterAgentToServerReq::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::service() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.service)
  return service_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.service)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.service)
}
#endif
inline void S2SRegisterAgentToServerReq::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.service)
}
inline void S2SRegisterAgentToServerReq::set_service(const void* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.service)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_service() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.service)
}

// -------------------------------------------------------------------

// PBDeployCommand

// bytes command = 1;
inline void PBDeployCommand::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::command() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.command)
  return command_.GetNoArena();
}
inline void PBDeployCommand::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.command)
}
#if LANG_CXX11
inline void PBDeployCommand::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.command)
}
#endif
inline void PBDeployCommand::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.command)
}
inline void PBDeployCommand::set_command(const void* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.command)
}
inline ::std::string* PBDeployCommand::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_command() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.command)
}

// bytes appname = 2;
inline void PBDeployCommand::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.appname)
  return appname_.GetNoArena();
}
inline void PBDeployCommand::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.appname)
}
#if LANG_CXX11
inline void PBDeployCommand::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.appname)
}
#endif
inline void PBDeployCommand::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.appname)
}
inline void PBDeployCommand::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.appname)
}
inline ::std::string* PBDeployCommand::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.appname)
}

// bytes apptype = 3;
inline void PBDeployCommand::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.apptype)
  return apptype_.GetNoArena();
}
inline void PBDeployCommand::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.apptype)
}
#if LANG_CXX11
inline void PBDeployCommand::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.apptype)
}
#endif
inline void PBDeployCommand::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.apptype)
}
inline void PBDeployCommand::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.apptype)
}
inline ::std::string* PBDeployCommand::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.apptype)
}

// bytes appid = 4;
inline void PBDeployCommand::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.appid)
  return appid_.GetNoArena();
}
inline void PBDeployCommand::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.appid)
}
#if LANG_CXX11
inline void PBDeployCommand::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.appid)
}
#endif
inline void PBDeployCommand::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.appid)
}
inline void PBDeployCommand::set_appid(const void* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.appid)
}
inline ::std::string* PBDeployCommand::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.appid)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_appid() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.appid)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.appid)
}

// uint32 zoneid = 5;
inline void PBDeployCommand::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::google::protobuf::uint32 PBDeployCommand::zoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.zoneid)
  return zoneid_;
}
inline void PBDeployCommand::set_zoneid(::google::protobuf::uint32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.zoneid)
}

// bytes value = 6;
inline void PBDeployCommand::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::value() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.value)
  return value_.GetNoArena();
}
inline void PBDeployCommand::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.value)
}
#if LANG_CXX11
inline void PBDeployCommand::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.value)
}
#endif
inline void PBDeployCommand::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.value)
}
inline void PBDeployCommand::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.value)
}
inline ::std::string* PBDeployCommand::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_value() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.value)
}

// -------------------------------------------------------------------

// S2SDeployCommandToAgentReq

// .KFMsg.PBDeployCommand deploycommand = 1;
inline bool S2SDeployCommandToAgentReq::has_deploycommand() const {
  return this != internal_default_instance() && deploycommand_ != NULL;
}
inline void S2SDeployCommandToAgentReq::clear_deploycommand() {
  if (GetArenaNoVirtual() == NULL && deploycommand_ != NULL) {
    delete deploycommand_;
  }
  deploycommand_ = NULL;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToAgentReq::_internal_deploycommand() const {
  return *deploycommand_;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToAgentReq::deploycommand() const {
  const ::KFMsg::PBDeployCommand* p = deploycommand_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBDeployCommand*>(
      &::KFMsg::_PBDeployCommand_default_instance_);
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToAgentReq::release_deploycommand() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
  
  ::KFMsg::PBDeployCommand* temp = deploycommand_;
  deploycommand_ = NULL;
  return temp;
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToAgentReq::mutable_deploycommand() {
  
  if (deploycommand_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBDeployCommand>(GetArenaNoVirtual());
    deploycommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
  return deploycommand_;
}
inline void S2SDeployCommandToAgentReq::set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deploycommand_;
  }
  if (deploycommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deploycommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deploycommand, submessage_arena);
    }
    
  } else {
    
  }
  deploycommand_ = deploycommand;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
}

// -------------------------------------------------------------------

// S2SDeployCommandToClientReq

// .KFMsg.PBDeployCommand deploycommand = 1;
inline bool S2SDeployCommandToClientReq::has_deploycommand() const {
  return this != internal_default_instance() && deploycommand_ != NULL;
}
inline void S2SDeployCommandToClientReq::clear_deploycommand() {
  if (GetArenaNoVirtual() == NULL && deploycommand_ != NULL) {
    delete deploycommand_;
  }
  deploycommand_ = NULL;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToClientReq::_internal_deploycommand() const {
  return *deploycommand_;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToClientReq::deploycommand() const {
  const ::KFMsg::PBDeployCommand* p = deploycommand_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployCommandToClientReq.deploycommand)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBDeployCommand*>(
      &::KFMsg::_PBDeployCommand_default_instance_);
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToClientReq::release_deploycommand() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployCommandToClientReq.deploycommand)
  
  ::KFMsg::PBDeployCommand* temp = deploycommand_;
  deploycommand_ = NULL;
  return temp;
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToClientReq::mutable_deploycommand() {
  
  if (deploycommand_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBDeployCommand>(GetArenaNoVirtual());
    deploycommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployCommandToClientReq.deploycommand)
  return deploycommand_;
}
inline void S2SDeployCommandToClientReq::set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deploycommand_;
  }
  if (deploycommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deploycommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deploycommand, submessage_arena);
    }
    
  } else {
    
  }
  deploycommand_ = deploycommand;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployCommandToClientReq.deploycommand)
}

// -------------------------------------------------------------------

// S2SDeployToolCommandReq

// .KFMsg.PBDeployCommand deploycommand = 1;
inline bool S2SDeployToolCommandReq::has_deploycommand() const {
  return this != internal_default_instance() && deploycommand_ != NULL;
}
inline void S2SDeployToolCommandReq::clear_deploycommand() {
  if (GetArenaNoVirtual() == NULL && deploycommand_ != NULL) {
    delete deploycommand_;
  }
  deploycommand_ = NULL;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployToolCommandReq::_internal_deploycommand() const {
  return *deploycommand_;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployToolCommandReq::deploycommand() const {
  const ::KFMsg::PBDeployCommand* p = deploycommand_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolCommandReq.deploycommand)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBDeployCommand*>(
      &::KFMsg::_PBDeployCommand_default_instance_);
}
inline ::KFMsg::PBDeployCommand* S2SDeployToolCommandReq::release_deploycommand() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolCommandReq.deploycommand)
  
  ::KFMsg::PBDeployCommand* temp = deploycommand_;
  deploycommand_ = NULL;
  return temp;
}
inline ::KFMsg::PBDeployCommand* S2SDeployToolCommandReq::mutable_deploycommand() {
  
  if (deploycommand_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBDeployCommand>(GetArenaNoVirtual());
    deploycommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolCommandReq.deploycommand)
  return deploycommand_;
}
inline void S2SDeployToolCommandReq::set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deploycommand_;
  }
  if (deploycommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deploycommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deploycommand, submessage_arena);
    }
    
  } else {
    
  }
  deploycommand_ = deploycommand;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolCommandReq.deploycommand)
}

// uint64 time = 2;
inline void S2SDeployToolCommandReq::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SDeployToolCommandReq::time() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolCommandReq.time)
  return time_;
}
inline void S2SDeployToolCommandReq::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolCommandReq.time)
}

// bytes toolid = 3;
inline void S2SDeployToolCommandReq::clear_toolid() {
  toolid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolCommandReq::toolid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolCommandReq.toolid)
  return toolid_.GetNoArena();
}
inline void S2SDeployToolCommandReq::set_toolid(const ::std::string& value) {
  
  toolid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolCommandReq.toolid)
}
#if LANG_CXX11
inline void S2SDeployToolCommandReq::set_toolid(::std::string&& value) {
  
  toolid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolCommandReq.toolid)
}
#endif
inline void S2SDeployToolCommandReq::set_toolid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  toolid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolCommandReq.toolid)
}
inline void S2SDeployToolCommandReq::set_toolid(const void* value, size_t size) {
  
  toolid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolCommandReq.toolid)
}
inline ::std::string* S2SDeployToolCommandReq::mutable_toolid() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolCommandReq.toolid)
  return toolid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolCommandReq::release_toolid() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolCommandReq.toolid)
  
  return toolid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolCommandReq::set_allocated_toolid(::std::string* toolid) {
  if (toolid != NULL) {
    
  } else {
    
  }
  toolid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), toolid);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolCommandReq.toolid)
}

// bytes ip = 4;
inline void S2SDeployToolCommandReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolCommandReq::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolCommandReq.ip)
  return ip_.GetNoArena();
}
inline void S2SDeployToolCommandReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolCommandReq.ip)
}
#if LANG_CXX11
inline void S2SDeployToolCommandReq::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolCommandReq.ip)
}
#endif
inline void S2SDeployToolCommandReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolCommandReq.ip)
}
inline void S2SDeployToolCommandReq::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolCommandReq.ip)
}
inline ::std::string* S2SDeployToolCommandReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolCommandReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolCommandReq::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolCommandReq.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolCommandReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolCommandReq.ip)
}

// -------------------------------------------------------------------

// S2SDeployLogToToolAck

// uint64 agentid = 1;
inline void S2SDeployLogToToolAck::clear_agentid() {
  agentid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SDeployLogToToolAck::agentid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployLogToToolAck.agentid)
  return agentid_;
}
inline void S2SDeployLogToToolAck::set_agentid(::google::protobuf::uint64 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployLogToToolAck.agentid)
}

// bytes content = 2;
inline void S2SDeployLogToToolAck::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployLogToToolAck::content() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployLogToToolAck.content)
  return content_.GetNoArena();
}
inline void S2SDeployLogToToolAck::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployLogToToolAck.content)
}
#if LANG_CXX11
inline void S2SDeployLogToToolAck::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployLogToToolAck.content)
}
#endif
inline void S2SDeployLogToToolAck::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployLogToToolAck.content)
}
inline void S2SDeployLogToToolAck::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployLogToToolAck.content)
}
inline ::std::string* S2SDeployLogToToolAck::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployLogToToolAck.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployLogToToolAck::release_content() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployLogToToolAck.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployLogToToolAck::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployLogToToolAck.content)
}

// -------------------------------------------------------------------

// S2SDeployLogToServerAck

// uint64 agentid = 1;
inline void S2SDeployLogToServerAck::clear_agentid() {
  agentid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SDeployLogToServerAck::agentid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployLogToServerAck.agentid)
  return agentid_;
}
inline void S2SDeployLogToServerAck::set_agentid(::google::protobuf::uint64 value) {
  
  agentid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployLogToServerAck.agentid)
}

// bytes content = 2;
inline void S2SDeployLogToServerAck::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployLogToServerAck::content() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployLogToServerAck.content)
  return content_.GetNoArena();
}
inline void S2SDeployLogToServerAck::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployLogToServerAck.content)
}
#if LANG_CXX11
inline void S2SDeployLogToServerAck::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployLogToServerAck.content)
}
#endif
inline void S2SDeployLogToServerAck::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployLogToServerAck.content)
}
inline void S2SDeployLogToServerAck::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployLogToServerAck.content)
}
inline ::std::string* S2SDeployLogToServerAck::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployLogToServerAck.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployLogToServerAck::release_content() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployLogToServerAck.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployLogToServerAck::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployLogToServerAck.content)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// S2SDeployToolDeleteMySQLReq

// bytes table = 1;
inline void S2SDeployToolDeleteMySQLReq::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolDeleteMySQLReq::table() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolDeleteMySQLReq.table)
  return table_.GetNoArena();
}
inline void S2SDeployToolDeleteMySQLReq::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolDeleteMySQLReq.table)
}
#if LANG_CXX11
inline void S2SDeployToolDeleteMySQLReq::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolDeleteMySQLReq.table)
}
#endif
inline void S2SDeployToolDeleteMySQLReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolDeleteMySQLReq.table)
}
inline void S2SDeployToolDeleteMySQLReq::set_table(const void* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolDeleteMySQLReq.table)
}
inline ::std::string* S2SDeployToolDeleteMySQLReq::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolDeleteMySQLReq.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolDeleteMySQLReq::release_table() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolDeleteMySQLReq.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolDeleteMySQLReq::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolDeleteMySQLReq.table)
}

// map<string, bytes> keys = 2;
inline int S2SDeployToolDeleteMySQLReq::keys_size() const {
  return keys_.size();
}
inline void S2SDeployToolDeleteMySQLReq::clear_keys() {
  keys_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
S2SDeployToolDeleteMySQLReq::keys() const {
  // @@protoc_insertion_point(field_map:KFMsg.S2SDeployToolDeleteMySQLReq.keys)
  return keys_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
S2SDeployToolDeleteMySQLReq::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_map:KFMsg.S2SDeployToolDeleteMySQLReq.keys)
  return keys_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// S2SDeployToolDeleteMySQLAck

// bytes table = 1;
inline void S2SDeployToolDeleteMySQLAck::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolDeleteMySQLAck::table() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolDeleteMySQLAck.table)
  return table_.GetNoArena();
}
inline void S2SDeployToolDeleteMySQLAck::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolDeleteMySQLAck.table)
}
#if LANG_CXX11
inline void S2SDeployToolDeleteMySQLAck::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolDeleteMySQLAck.table)
}
#endif
inline void S2SDeployToolDeleteMySQLAck::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolDeleteMySQLAck.table)
}
inline void S2SDeployToolDeleteMySQLAck::set_table(const void* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolDeleteMySQLAck.table)
}
inline ::std::string* S2SDeployToolDeleteMySQLAck::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolDeleteMySQLAck.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolDeleteMySQLAck::release_table() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolDeleteMySQLAck.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolDeleteMySQLAck::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolDeleteMySQLAck.table)
}

// map<string, bytes> keys = 2;
inline int S2SDeployToolDeleteMySQLAck::keys_size() const {
  return keys_.size();
}
inline void S2SDeployToolDeleteMySQLAck::clear_keys() {
  keys_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
S2SDeployToolDeleteMySQLAck::keys() const {
  // @@protoc_insertion_point(field_map:KFMsg.S2SDeployToolDeleteMySQLAck.keys)
  return keys_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
S2SDeployToolDeleteMySQLAck::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_map:KFMsg.S2SDeployToolDeleteMySQLAck.keys)
  return keys_.MutableMap();
}

// bool result = 3;
inline void S2SDeployToolDeleteMySQLAck::clear_result() {
  result_ = false;
}
inline bool S2SDeployToolDeleteMySQLAck::result() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolDeleteMySQLAck.result)
  return result_;
}
inline void S2SDeployToolDeleteMySQLAck::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolDeleteMySQLAck.result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// S2SDeployToolExecuteMySQLReq

// bytes table = 1;
inline void S2SDeployToolExecuteMySQLReq::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolExecuteMySQLReq::table() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolExecuteMySQLReq.table)
  return table_.GetNoArena();
}
inline void S2SDeployToolExecuteMySQLReq::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolExecuteMySQLReq.table)
}
#if LANG_CXX11
inline void S2SDeployToolExecuteMySQLReq::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolExecuteMySQLReq.table)
}
#endif
inline void S2SDeployToolExecuteMySQLReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolExecuteMySQLReq.table)
}
inline void S2SDeployToolExecuteMySQLReq::set_table(const void* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolExecuteMySQLReq.table)
}
inline ::std::string* S2SDeployToolExecuteMySQLReq::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolExecuteMySQLReq.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolExecuteMySQLReq::release_table() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolExecuteMySQLReq.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolExecuteMySQLReq::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolExecuteMySQLReq.table)
}

// map<string, bytes> values = 2;
inline int S2SDeployToolExecuteMySQLReq::values_size() const {
  return values_.size();
}
inline void S2SDeployToolExecuteMySQLReq::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
S2SDeployToolExecuteMySQLReq::values() const {
  // @@protoc_insertion_point(field_map:KFMsg.S2SDeployToolExecuteMySQLReq.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
S2SDeployToolExecuteMySQLReq::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:KFMsg.S2SDeployToolExecuteMySQLReq.values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// S2SDeployToolExecuteMySQLAck

// bytes table = 1;
inline void S2SDeployToolExecuteMySQLAck::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolExecuteMySQLAck::table() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolExecuteMySQLAck.table)
  return table_.GetNoArena();
}
inline void S2SDeployToolExecuteMySQLAck::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolExecuteMySQLAck.table)
}
#if LANG_CXX11
inline void S2SDeployToolExecuteMySQLAck::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolExecuteMySQLAck.table)
}
#endif
inline void S2SDeployToolExecuteMySQLAck::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolExecuteMySQLAck.table)
}
inline void S2SDeployToolExecuteMySQLAck::set_table(const void* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolExecuteMySQLAck.table)
}
inline ::std::string* S2SDeployToolExecuteMySQLAck::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolExecuteMySQLAck.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolExecuteMySQLAck::release_table() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolExecuteMySQLAck.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolExecuteMySQLAck::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolExecuteMySQLAck.table)
}

// map<string, bytes> values = 2;
inline int S2SDeployToolExecuteMySQLAck::values_size() const {
  return values_.size();
}
inline void S2SDeployToolExecuteMySQLAck::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
S2SDeployToolExecuteMySQLAck::values() const {
  // @@protoc_insertion_point(field_map:KFMsg.S2SDeployToolExecuteMySQLAck.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
S2SDeployToolExecuteMySQLAck::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:KFMsg.S2SDeployToolExecuteMySQLAck.values)
  return values_.MutableMap();
}

// bool result = 3;
inline void S2SDeployToolExecuteMySQLAck::clear_result() {
  result_ = false;
}
inline bool S2SDeployToolExecuteMySQLAck::result() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolExecuteMySQLAck.result)
  return result_;
}
inline void S2SDeployToolExecuteMySQLAck::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolExecuteMySQLAck.result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// S2SDeployToolQueryMySQLReq

// bytes table = 1;
inline void S2SDeployToolQueryMySQLReq::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolQueryMySQLReq::table() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolQueryMySQLReq.table)
  return table_.GetNoArena();
}
inline void S2SDeployToolQueryMySQLReq::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolQueryMySQLReq.table)
}
#if LANG_CXX11
inline void S2SDeployToolQueryMySQLReq::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolQueryMySQLReq.table)
}
#endif
inline void S2SDeployToolQueryMySQLReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolQueryMySQLReq.table)
}
inline void S2SDeployToolQueryMySQLReq::set_table(const void* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolQueryMySQLReq.table)
}
inline ::std::string* S2SDeployToolQueryMySQLReq::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolQueryMySQLReq.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolQueryMySQLReq::release_table() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolQueryMySQLReq.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolQueryMySQLReq::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolQueryMySQLReq.table)
}

// map<string, bytes> keys = 2;
inline int S2SDeployToolQueryMySQLReq::keys_size() const {
  return keys_.size();
}
inline void S2SDeployToolQueryMySQLReq::clear_keys() {
  keys_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
S2SDeployToolQueryMySQLReq::keys() const {
  // @@protoc_insertion_point(field_map:KFMsg.S2SDeployToolQueryMySQLReq.keys)
  return keys_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
S2SDeployToolQueryMySQLReq::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_map:KFMsg.S2SDeployToolQueryMySQLReq.keys)
  return keys_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PBMySQLData

// map<string, bytes> values = 1;
inline int PBMySQLData::values_size() const {
  return values_.size();
}
inline void PBMySQLData::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PBMySQLData::values() const {
  // @@protoc_insertion_point(field_map:KFMsg.PBMySQLData.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PBMySQLData::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:KFMsg.PBMySQLData.values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// PBMySQLDatas

// repeated .KFMsg.PBMySQLData data = 2;
inline int PBMySQLDatas::data_size() const {
  return data_.size();
}
inline void PBMySQLDatas::clear_data() {
  data_.Clear();
}
inline ::KFMsg::PBMySQLData* PBMySQLDatas::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.PBMySQLDatas.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMySQLData >*
PBMySQLDatas::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.PBMySQLDatas.data)
  return &data_;
}
inline const ::KFMsg::PBMySQLData& PBMySQLDatas::data(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.PBMySQLDatas.data)
  return data_.Get(index);
}
inline ::KFMsg::PBMySQLData* PBMySQLDatas::add_data() {
  // @@protoc_insertion_point(field_add:KFMsg.PBMySQLDatas.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMySQLData >&
PBMySQLDatas::data() const {
  // @@protoc_insertion_point(field_list:KFMsg.PBMySQLDatas.data)
  return data_;
}

// -------------------------------------------------------------------

// S2SDeployToolQueryMySQLAck

// bytes table = 1;
inline void S2SDeployToolQueryMySQLAck::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolQueryMySQLAck::table() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolQueryMySQLAck.table)
  return table_.GetNoArena();
}
inline void S2SDeployToolQueryMySQLAck::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolQueryMySQLAck.table)
}
#if LANG_CXX11
inline void S2SDeployToolQueryMySQLAck::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolQueryMySQLAck.table)
}
#endif
inline void S2SDeployToolQueryMySQLAck::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolQueryMySQLAck.table)
}
inline void S2SDeployToolQueryMySQLAck::set_table(const void* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolQueryMySQLAck.table)
}
inline ::std::string* S2SDeployToolQueryMySQLAck::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolQueryMySQLAck.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolQueryMySQLAck::release_table() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolQueryMySQLAck.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolQueryMySQLAck::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolQueryMySQLAck.table)
}

// .KFMsg.PBMySQLDatas datas = 2;
inline bool S2SDeployToolQueryMySQLAck::has_datas() const {
  return this != internal_default_instance() && datas_ != NULL;
}
inline void S2SDeployToolQueryMySQLAck::clear_datas() {
  if (GetArenaNoVirtual() == NULL && datas_ != NULL) {
    delete datas_;
  }
  datas_ = NULL;
}
inline const ::KFMsg::PBMySQLDatas& S2SDeployToolQueryMySQLAck::_internal_datas() const {
  return *datas_;
}
inline const ::KFMsg::PBMySQLDatas& S2SDeployToolQueryMySQLAck::datas() const {
  const ::KFMsg::PBMySQLDatas* p = datas_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolQueryMySQLAck.datas)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBMySQLDatas*>(
      &::KFMsg::_PBMySQLDatas_default_instance_);
}
inline ::KFMsg::PBMySQLDatas* S2SDeployToolQueryMySQLAck::release_datas() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolQueryMySQLAck.datas)
  
  ::KFMsg::PBMySQLDatas* temp = datas_;
  datas_ = NULL;
  return temp;
}
inline ::KFMsg::PBMySQLDatas* S2SDeployToolQueryMySQLAck::mutable_datas() {
  
  if (datas_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBMySQLDatas>(GetArenaNoVirtual());
    datas_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolQueryMySQLAck.datas)
  return datas_;
}
inline void S2SDeployToolQueryMySQLAck::set_allocated_datas(::KFMsg::PBMySQLDatas* datas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete datas_;
  }
  if (datas) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      datas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, datas, submessage_arena);
    }
    
  } else {
    
  }
  datas_ = datas;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolQueryMySQLAck.datas)
}

// bool result = 3;
inline void S2SDeployToolQueryMySQLAck::clear_result() {
  result_ = false;
}
inline bool S2SDeployToolQueryMySQLAck::result() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolQueryMySQLAck.result)
  return result_;
}
inline void S2SDeployToolQueryMySQLAck::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolQueryMySQLAck.result)
}

// -------------------------------------------------------------------

// S2SDeployToolQueryToolIdReq

// bytes ip = 1;
inline void S2SDeployToolQueryToolIdReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SDeployToolQueryToolIdReq::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolQueryToolIdReq.ip)
  return ip_.GetNoArena();
}
inline void S2SDeployToolQueryToolIdReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolQueryToolIdReq.ip)
}
#if LANG_CXX11
inline void S2SDeployToolQueryToolIdReq::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SDeployToolQueryToolIdReq.ip)
}
#endif
inline void S2SDeployToolQueryToolIdReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SDeployToolQueryToolIdReq.ip)
}
inline void S2SDeployToolQueryToolIdReq::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SDeployToolQueryToolIdReq.ip)
}
inline ::std::string* S2SDeployToolQueryToolIdReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployToolQueryToolIdReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SDeployToolQueryToolIdReq::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployToolQueryToolIdReq.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SDeployToolQueryToolIdReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployToolQueryToolIdReq.ip)
}

// -------------------------------------------------------------------

// S2SDeployToolQueryToolIdAck

// uint32 id = 1;
inline void S2SDeployToolQueryToolIdAck::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 S2SDeployToolQueryToolIdAck::id() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployToolQueryToolIdAck.id)
  return id_;
}
inline void S2SDeployToolQueryToolIdAck::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployToolQueryToolIdAck.id)
}

// -------------------------------------------------------------------

// S2SDeployHeartbeatToAgentReq

// uint64 id = 1;
inline void S2SDeployHeartbeatToAgentReq::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SDeployHeartbeatToAgentReq::id() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployHeartbeatToAgentReq.id)
  return id_;
}
inline void S2SDeployHeartbeatToAgentReq::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SDeployHeartbeatToAgentReq.id)
}

// -------------------------------------------------------------------

// PBRemoteLog

// uint32 level = 1;
inline void PBRemoteLog::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 PBRemoteLog::level() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBRemoteLog.level)
  return level_;
}
inline void PBRemoteLog::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBRemoteLog.level)
}

// bytes content = 2;
inline void PBRemoteLog::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBRemoteLog::content() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBRemoteLog.content)
  return content_.GetNoArena();
}
inline void PBRemoteLog::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBRemoteLog.content)
}
#if LANG_CXX11
inline void PBRemoteLog::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBRemoteLog.content)
}
#endif
inline void PBRemoteLog::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBRemoteLog.content)
}
inline void PBRemoteLog::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBRemoteLog.content)
}
inline ::std::string* PBRemoteLog::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBRemoteLog.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBRemoteLog::release_content() {
  // @@protoc_insertion_point(field_release:KFMsg.PBRemoteLog.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBRemoteLog::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBRemoteLog.content)
}

// -------------------------------------------------------------------

// S2SRemoteLogToServerReq

// bytes appname = 1;
inline void S2SRemoteLogToServerReq::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRemoteLogToServerReq::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRemoteLogToServerReq.appname)
  return appname_.GetNoArena();
}
inline void S2SRemoteLogToServerReq::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRemoteLogToServerReq.appname)
}
#if LANG_CXX11
inline void S2SRemoteLogToServerReq::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRemoteLogToServerReq.appname)
}
#endif
inline void S2SRemoteLogToServerReq::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRemoteLogToServerReq.appname)
}
inline void S2SRemoteLogToServerReq::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRemoteLogToServerReq.appname)
}
inline ::std::string* S2SRemoteLogToServerReq::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRemoteLogToServerReq.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRemoteLogToServerReq::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRemoteLogToServerReq.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRemoteLogToServerReq::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRemoteLogToServerReq.appname)
}

// bytes apptype = 2;
inline void S2SRemoteLogToServerReq::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRemoteLogToServerReq::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRemoteLogToServerReq.apptype)
  return apptype_.GetNoArena();
}
inline void S2SRemoteLogToServerReq::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRemoteLogToServerReq.apptype)
}
#if LANG_CXX11
inline void S2SRemoteLogToServerReq::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRemoteLogToServerReq.apptype)
}
#endif
inline void S2SRemoteLogToServerReq::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRemoteLogToServerReq.apptype)
}
inline void S2SRemoteLogToServerReq::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRemoteLogToServerReq.apptype)
}
inline ::std::string* S2SRemoteLogToServerReq::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRemoteLogToServerReq.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRemoteLogToServerReq::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRemoteLogToServerReq.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRemoteLogToServerReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRemoteLogToServerReq.apptype)
}

// bytes strappid = 3;
inline void S2SRemoteLogToServerReq::clear_strappid() {
  strappid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRemoteLogToServerReq::strappid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRemoteLogToServerReq.strappid)
  return strappid_.GetNoArena();
}
inline void S2SRemoteLogToServerReq::set_strappid(const ::std::string& value) {
  
  strappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRemoteLogToServerReq.strappid)
}
#if LANG_CXX11
inline void S2SRemoteLogToServerReq::set_strappid(::std::string&& value) {
  
  strappid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRemoteLogToServerReq.strappid)
}
#endif
inline void S2SRemoteLogToServerReq::set_strappid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRemoteLogToServerReq.strappid)
}
inline void S2SRemoteLogToServerReq::set_strappid(const void* value, size_t size) {
  
  strappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRemoteLogToServerReq.strappid)
}
inline ::std::string* S2SRemoteLogToServerReq::mutable_strappid() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRemoteLogToServerReq.strappid)
  return strappid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRemoteLogToServerReq::release_strappid() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRemoteLogToServerReq.strappid)
  
  return strappid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRemoteLogToServerReq::set_allocated_strappid(::std::string* strappid) {
  if (strappid != NULL) {
    
  } else {
    
  }
  strappid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strappid);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRemoteLogToServerReq.strappid)
}

// uint64 appid = 4;
inline void S2SRemoteLogToServerReq::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRemoteLogToServerReq::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRemoteLogToServerReq.appid)
  return appid_;
}
inline void S2SRemoteLogToServerReq::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRemoteLogToServerReq.appid)
}

// uint32 zoneid = 5;
inline void S2SRemoteLogToServerReq::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::google::protobuf::uint32 S2SRemoteLogToServerReq::zoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRemoteLogToServerReq.zoneid)
  return zoneid_;
}
inline void S2SRemoteLogToServerReq::set_zoneid(::google::protobuf::uint32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRemoteLogToServerReq.zoneid)
}

// repeated .KFMsg.PBRemoteLog logdata = 6;
inline int S2SRemoteLogToServerReq::logdata_size() const {
  return logdata_.size();
}
inline void S2SRemoteLogToServerReq::clear_logdata() {
  logdata_.Clear();
}
inline ::KFMsg::PBRemoteLog* S2SRemoteLogToServerReq::mutable_logdata(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRemoteLogToServerReq.logdata)
  return logdata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemoteLog >*
S2SRemoteLogToServerReq::mutable_logdata() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SRemoteLogToServerReq.logdata)
  return &logdata_;
}
inline const ::KFMsg::PBRemoteLog& S2SRemoteLogToServerReq::logdata(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRemoteLogToServerReq.logdata)
  return logdata_.Get(index);
}
inline ::KFMsg::PBRemoteLog* S2SRemoteLogToServerReq::add_logdata() {
  // @@protoc_insertion_point(field_add:KFMsg.S2SRemoteLogToServerReq.logdata)
  return logdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemoteLog >&
S2SRemoteLogToServerReq::logdata() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SRemoteLogToServerReq.logdata)
  return logdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KFMsg::FrameProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::FrameProtocol>() {
  return ::KFMsg::FrameProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)


#ifdef _MSC_VER
	#pragma warning(  pop  )
#endif
#endif  // PROTOBUF_INCLUDED_FrameMessage_2eproto
