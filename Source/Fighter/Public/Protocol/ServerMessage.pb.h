// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMessage.proto

#ifndef PROTOBUF_INCLUDED_ServerMessage_2eproto
#define PROTOBUF_INCLUDED_ServerMessage_2eproto

#ifdef _MSC_VER
	#pragma warning(push)
	#pragma warning(disable : 4946)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DefineMessage.pb.h"
#include "FrameDefineMessage.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ServerMessage_2eproto LIBPROTOC_EXPORT

namespace protobuf_ServerMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_ServerMessage_2eproto
namespace KFMsg {
class S2SCancelMatchToShardReq;
class S2SCancelMatchToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SCancelMatchToShardReqDefaultTypeInternal _S2SCancelMatchToShardReq_default_instance_;
class S2SCreateRoomToMatchAck;
class S2SCreateRoomToMatchAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SCreateRoomToMatchAckDefaultTypeInternal _S2SCreateRoomToMatchAck_default_instance_;
class S2SCreateRoomToRoomReq;
class S2SCreateRoomToRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SCreateRoomToRoomReqDefaultTypeInternal _S2SCreateRoomToRoomReq_default_instance_;
class S2SFinishRoomToBattleAck;
class S2SFinishRoomToBattleAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SFinishRoomToBattleAckDefaultTypeInternal _S2SFinishRoomToBattleAck_default_instance_;
class S2SFinishRoomToGameReq;
class S2SFinishRoomToGameReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SFinishRoomToGameReqDefaultTypeInternal _S2SFinishRoomToGameReq_default_instance_;
class S2SFinishRoomToRoomReq;
class S2SFinishRoomToRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SFinishRoomToRoomReqDefaultTypeInternal _S2SFinishRoomToRoomReq_default_instance_;
class S2SHeartBeatToRoomReq;
class S2SHeartBeatToRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SHeartBeatToRoomReqDefaultTypeInternal _S2SHeartBeatToRoomReq_default_instance_;
class S2SInformBattleToGameReq;
class S2SInformBattleToGameReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SInformBattleToGameReqDefaultTypeInternal _S2SInformBattleToGameReq_default_instance_;
class S2SInformBattleToRoomAck;
class S2SInformBattleToRoomAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SInformBattleToRoomAckDefaultTypeInternal _S2SInformBattleToRoomAck_default_instance_;
class S2SOpenRoomToBattleReq;
class S2SOpenRoomToBattleReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SOpenRoomToBattleReqDefaultTypeInternal _S2SOpenRoomToBattleReq_default_instance_;
class S2SOpenRoomToRoomAck;
class S2SOpenRoomToRoomAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SOpenRoomToRoomAckDefaultTypeInternal _S2SOpenRoomToRoomAck_default_instance_;
class S2SPlayerBalanceToBattleAck;
class S2SPlayerBalanceToBattleAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SPlayerBalanceToBattleAckDefaultTypeInternal _S2SPlayerBalanceToBattleAck_default_instance_;
class S2SPlayerBalanceToGameReq;
class S2SPlayerBalanceToGameReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SPlayerBalanceToGameReqDefaultTypeInternal _S2SPlayerBalanceToGameReq_default_instance_;
class S2SPlayerBalanceToRoomReq;
class S2SPlayerBalanceToRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SPlayerBalanceToRoomReqDefaultTypeInternal _S2SPlayerBalanceToRoomReq_default_instance_;
class S2SPlayerBalanceToRoomResult;
class S2SPlayerBalanceToRoomResultDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SPlayerBalanceToRoomResultDefaultTypeInternal _S2SPlayerBalanceToRoomResult_default_instance_;
class S2SQueryBalanceToRoomReq;
class S2SQueryBalanceToRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryBalanceToRoomReqDefaultTypeInternal _S2SQueryBalanceToRoomReq_default_instance_;
class S2SQueryMatchToGameAck;
class S2SQueryMatchToGameAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryMatchToGameAckDefaultTypeInternal _S2SQueryMatchToGameAck_default_instance_;
class S2SQueryMatchToMatchReq;
class S2SQueryMatchToMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryMatchToMatchReqDefaultTypeInternal _S2SQueryMatchToMatchReq_default_instance_;
class S2SQueryRoomToGameAck;
class S2SQueryRoomToGameAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryRoomToGameAckDefaultTypeInternal _S2SQueryRoomToGameAck_default_instance_;
class S2SQueryRoomToRoomReq;
class S2SQueryRoomToRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryRoomToRoomReqDefaultTypeInternal _S2SQueryRoomToRoomReq_default_instance_;
class S2SRegisterBattleToBattleAck;
class S2SRegisterBattleToBattleAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRegisterBattleToBattleAckDefaultTypeInternal _S2SRegisterBattleToBattleAck_default_instance_;
class S2SRegisterBattleToRoomReq;
class S2SRegisterBattleToRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRegisterBattleToRoomReqDefaultTypeInternal _S2SRegisterBattleToRoomReq_default_instance_;
class S2SStartMatchToGameAck;
class S2SStartMatchToGameAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SStartMatchToGameAckDefaultTypeInternal _S2SStartMatchToGameAck_default_instance_;
class S2SStartMatchToShardReq;
class S2SStartMatchToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SStartMatchToShardReqDefaultTypeInternal _S2SStartMatchToShardReq_default_instance_;
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::KFMsg::S2SCancelMatchToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SCancelMatchToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SCreateRoomToMatchAck* Arena::CreateMaybeMessage<::KFMsg::S2SCreateRoomToMatchAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SCreateRoomToRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SCreateRoomToRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SFinishRoomToBattleAck* Arena::CreateMaybeMessage<::KFMsg::S2SFinishRoomToBattleAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SFinishRoomToGameReq* Arena::CreateMaybeMessage<::KFMsg::S2SFinishRoomToGameReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SFinishRoomToRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SFinishRoomToRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SHeartBeatToRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SHeartBeatToRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SInformBattleToGameReq* Arena::CreateMaybeMessage<::KFMsg::S2SInformBattleToGameReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SInformBattleToRoomAck* Arena::CreateMaybeMessage<::KFMsg::S2SInformBattleToRoomAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SOpenRoomToBattleReq* Arena::CreateMaybeMessage<::KFMsg::S2SOpenRoomToBattleReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SOpenRoomToRoomAck* Arena::CreateMaybeMessage<::KFMsg::S2SOpenRoomToRoomAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SPlayerBalanceToBattleAck* Arena::CreateMaybeMessage<::KFMsg::S2SPlayerBalanceToBattleAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SPlayerBalanceToGameReq* Arena::CreateMaybeMessage<::KFMsg::S2SPlayerBalanceToGameReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SPlayerBalanceToRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SPlayerBalanceToRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SPlayerBalanceToRoomResult* Arena::CreateMaybeMessage<::KFMsg::S2SPlayerBalanceToRoomResult>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryBalanceToRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SQueryBalanceToRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryMatchToGameAck* Arena::CreateMaybeMessage<::KFMsg::S2SQueryMatchToGameAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryMatchToMatchReq* Arena::CreateMaybeMessage<::KFMsg::S2SQueryMatchToMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryRoomToGameAck* Arena::CreateMaybeMessage<::KFMsg::S2SQueryRoomToGameAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryRoomToRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SQueryRoomToRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRegisterBattleToBattleAck* Arena::CreateMaybeMessage<::KFMsg::S2SRegisterBattleToBattleAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRegisterBattleToRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SRegisterBattleToRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SStartMatchToGameAck* Arena::CreateMaybeMessage<::KFMsg::S2SStartMatchToGameAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SStartMatchToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SStartMatchToShardReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KFMsg {

enum ServerProtocol {
  S2S_SERVER_PROTOCOL_BEGIN = 0,
  S2S_START_MATCH_TO_SHARD_REQ = 31001,
  S2S_START_MATCH_TO_GAME_ACK = 31002,
  S2S_CANCEL_MATCH_TO_SHARD_REQ = 31003,
  S2S_REGISTER_BATTLE_TO_ROOM_REQ = 31101,
  S2S_REGISTER_BATTLE_TO_BATTLE_ACK = 31102,
  S2S_OPEN_ROOM_TO_BATTLE_REQ = 31103,
  S2S_OPEN_ROOM_TO_ROOM_ACK = 31104,
  S2S_FINISH_ROOM_TO_ROOM_REQ = 31105,
  S2S_FINISH_ROOM_TO_BATTLE_ACK = 31106,
  S2S_HEART_BEAT_TO_ROOM_REQ = 31107,
  S2S_PLAYER_BALANCE_TO_ROOM_REQ = 31108,
  S2S_PLAYER_BALANCE_TO_BATTLE_ACK = 31109,
  S2S_CREATE_ROOM_TO_ROOM_REQ = 31201,
  S2S_CREATE_ROOM_TO_MATCH_ACK = 31202,
  S2S_INFORM_BATTLE_TO_GAME_REQ = 31203,
  S2S_INFORM_BATTLE_TO_ROOM_ACK = 31204,
  S2S_QUERY_ROOM_TO_ROOM_REQ = 31205,
  S2S_QUERY_ROOM_TO_GAME_ACK = 31206,
  S2S_FINISH_ROOM_TO_GAME_REQ = 31207,
  S2S_QUERY_MATCH_TO_MATCH_REQ = 31208,
  S2S_QUERY_MATCH_TO_GAME_ACK = 31209,
  S2S_PLAYER_BALANCE_TO_GAME_REQ = 31210,
  S2S_PLAYER_BALANCE_TO_ROOM_RESULT = 31211,
  S2S_QUERY_BALANCE_TO_ROOM_REQ = 31212,
  ServerProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ServerProtocol_IsValid(int value);
const ServerProtocol ServerProtocol_MIN = S2S_SERVER_PROTOCOL_BEGIN;
const ServerProtocol ServerProtocol_MAX = S2S_QUERY_BALANCE_TO_ROOM_REQ;
const int ServerProtocol_ARRAYSIZE = ServerProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ServerProtocol_descriptor();
inline const ::std::string& ServerProtocol_Name(ServerProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerProtocol_descriptor(), value);
}
inline bool ServerProtocol_Parse(
    const ::std::string& name, ServerProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerProtocol>(
    ServerProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SRegisterBattleToRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRegisterBattleToRoomReq) */ {
 public:
  S2SRegisterBattleToRoomReq();
  virtual ~S2SRegisterBattleToRoomReq();

  S2SRegisterBattleToRoomReq(const S2SRegisterBattleToRoomReq& from);

  inline S2SRegisterBattleToRoomReq& operator=(const S2SRegisterBattleToRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRegisterBattleToRoomReq(S2SRegisterBattleToRoomReq&& from) noexcept
    : S2SRegisterBattleToRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SRegisterBattleToRoomReq& operator=(S2SRegisterBattleToRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterBattleToRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRegisterBattleToRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SRegisterBattleToRoomReq*>(
               &_S2SRegisterBattleToRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(S2SRegisterBattleToRoomReq* other);
  friend void swap(S2SRegisterBattleToRoomReq& a, S2SRegisterBattleToRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRegisterBattleToRoomReq* New() const final {
    return CreateMaybeMessage<S2SRegisterBattleToRoomReq>(NULL);
  }

  S2SRegisterBattleToRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRegisterBattleToRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRegisterBattleToRoomReq& from);
  void MergeFrom(const S2SRegisterBattleToRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRegisterBattleToRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // bytes ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 serverid = 1;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterBattleToRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterBattleToBattleAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRegisterBattleToBattleAck) */ {
 public:
  S2SRegisterBattleToBattleAck();
  virtual ~S2SRegisterBattleToBattleAck();

  S2SRegisterBattleToBattleAck(const S2SRegisterBattleToBattleAck& from);

  inline S2SRegisterBattleToBattleAck& operator=(const S2SRegisterBattleToBattleAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRegisterBattleToBattleAck(S2SRegisterBattleToBattleAck&& from) noexcept
    : S2SRegisterBattleToBattleAck() {
    *this = ::std::move(from);
  }

  inline S2SRegisterBattleToBattleAck& operator=(S2SRegisterBattleToBattleAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterBattleToBattleAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRegisterBattleToBattleAck* internal_default_instance() {
    return reinterpret_cast<const S2SRegisterBattleToBattleAck*>(
               &_S2SRegisterBattleToBattleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(S2SRegisterBattleToBattleAck* other);
  friend void swap(S2SRegisterBattleToBattleAck& a, S2SRegisterBattleToBattleAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRegisterBattleToBattleAck* New() const final {
    return CreateMaybeMessage<S2SRegisterBattleToBattleAck>(NULL);
  }

  S2SRegisterBattleToBattleAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRegisterBattleToBattleAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRegisterBattleToBattleAck& from);
  void MergeFrom(const S2SRegisterBattleToBattleAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRegisterBattleToBattleAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterBattleToBattleAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOpenRoomToBattleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SOpenRoomToBattleReq) */ {
 public:
  S2SOpenRoomToBattleReq();
  virtual ~S2SOpenRoomToBattleReq();

  S2SOpenRoomToBattleReq(const S2SOpenRoomToBattleReq& from);

  inline S2SOpenRoomToBattleReq& operator=(const S2SOpenRoomToBattleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SOpenRoomToBattleReq(S2SOpenRoomToBattleReq&& from) noexcept
    : S2SOpenRoomToBattleReq() {
    *this = ::std::move(from);
  }

  inline S2SOpenRoomToBattleReq& operator=(S2SOpenRoomToBattleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOpenRoomToBattleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SOpenRoomToBattleReq* internal_default_instance() {
    return reinterpret_cast<const S2SOpenRoomToBattleReq*>(
               &_S2SOpenRoomToBattleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(S2SOpenRoomToBattleReq* other);
  friend void swap(S2SOpenRoomToBattleReq& a, S2SOpenRoomToBattleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SOpenRoomToBattleReq* New() const final {
    return CreateMaybeMessage<S2SOpenRoomToBattleReq>(NULL);
  }

  S2SOpenRoomToBattleReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SOpenRoomToBattleReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SOpenRoomToBattleReq& from);
  void MergeFrom(const S2SOpenRoomToBattleReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SOpenRoomToBattleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBMatchPlayer pbplayer = 4;
  int pbplayer_size() const;
  void clear_pbplayer();
  static const int kPbplayerFieldNumber = 4;
  ::KFMsg::PBMatchPlayer* mutable_pbplayer(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >*
      mutable_pbplayer();
  const ::KFMsg::PBMatchPlayer& pbplayer(int index) const;
  ::KFMsg::PBMatchPlayer* add_pbplayer();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >&
      pbplayer() const;

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 roomserverid = 3;
  void clear_roomserverid();
  static const int kRoomserveridFieldNumber = 3;
  ::google::protobuf::uint64 roomserverid() const;
  void set_roomserverid(::google::protobuf::uint64 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOpenRoomToBattleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer > pbplayer_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 roomserverid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOpenRoomToRoomAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SOpenRoomToRoomAck) */ {
 public:
  S2SOpenRoomToRoomAck();
  virtual ~S2SOpenRoomToRoomAck();

  S2SOpenRoomToRoomAck(const S2SOpenRoomToRoomAck& from);

  inline S2SOpenRoomToRoomAck& operator=(const S2SOpenRoomToRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SOpenRoomToRoomAck(S2SOpenRoomToRoomAck&& from) noexcept
    : S2SOpenRoomToRoomAck() {
    *this = ::std::move(from);
  }

  inline S2SOpenRoomToRoomAck& operator=(S2SOpenRoomToRoomAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOpenRoomToRoomAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SOpenRoomToRoomAck* internal_default_instance() {
    return reinterpret_cast<const S2SOpenRoomToRoomAck*>(
               &_S2SOpenRoomToRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(S2SOpenRoomToRoomAck* other);
  friend void swap(S2SOpenRoomToRoomAck& a, S2SOpenRoomToRoomAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SOpenRoomToRoomAck* New() const final {
    return CreateMaybeMessage<S2SOpenRoomToRoomAck>(NULL);
  }

  S2SOpenRoomToRoomAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SOpenRoomToRoomAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SOpenRoomToRoomAck& from);
  void MergeFrom(const S2SOpenRoomToRoomAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SOpenRoomToRoomAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOpenRoomToRoomAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SFinishRoomToRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SFinishRoomToRoomReq) */ {
 public:
  S2SFinishRoomToRoomReq();
  virtual ~S2SFinishRoomToRoomReq();

  S2SFinishRoomToRoomReq(const S2SFinishRoomToRoomReq& from);

  inline S2SFinishRoomToRoomReq& operator=(const S2SFinishRoomToRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SFinishRoomToRoomReq(S2SFinishRoomToRoomReq&& from) noexcept
    : S2SFinishRoomToRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SFinishRoomToRoomReq& operator=(S2SFinishRoomToRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SFinishRoomToRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SFinishRoomToRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SFinishRoomToRoomReq*>(
               &_S2SFinishRoomToRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(S2SFinishRoomToRoomReq* other);
  friend void swap(S2SFinishRoomToRoomReq& a, S2SFinishRoomToRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SFinishRoomToRoomReq* New() const final {
    return CreateMaybeMessage<S2SFinishRoomToRoomReq>(NULL);
  }

  S2SFinishRoomToRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SFinishRoomToRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SFinishRoomToRoomReq& from);
  void MergeFrom(const S2SFinishRoomToRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SFinishRoomToRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SFinishRoomToRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SFinishRoomToBattleAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SFinishRoomToBattleAck) */ {
 public:
  S2SFinishRoomToBattleAck();
  virtual ~S2SFinishRoomToBattleAck();

  S2SFinishRoomToBattleAck(const S2SFinishRoomToBattleAck& from);

  inline S2SFinishRoomToBattleAck& operator=(const S2SFinishRoomToBattleAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SFinishRoomToBattleAck(S2SFinishRoomToBattleAck&& from) noexcept
    : S2SFinishRoomToBattleAck() {
    *this = ::std::move(from);
  }

  inline S2SFinishRoomToBattleAck& operator=(S2SFinishRoomToBattleAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SFinishRoomToBattleAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SFinishRoomToBattleAck* internal_default_instance() {
    return reinterpret_cast<const S2SFinishRoomToBattleAck*>(
               &_S2SFinishRoomToBattleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(S2SFinishRoomToBattleAck* other);
  friend void swap(S2SFinishRoomToBattleAck& a, S2SFinishRoomToBattleAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SFinishRoomToBattleAck* New() const final {
    return CreateMaybeMessage<S2SFinishRoomToBattleAck>(NULL);
  }

  S2SFinishRoomToBattleAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SFinishRoomToBattleAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SFinishRoomToBattleAck& from);
  void MergeFrom(const S2SFinishRoomToBattleAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SFinishRoomToBattleAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SFinishRoomToBattleAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SHeartBeatToRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SHeartBeatToRoomReq) */ {
 public:
  S2SHeartBeatToRoomReq();
  virtual ~S2SHeartBeatToRoomReq();

  S2SHeartBeatToRoomReq(const S2SHeartBeatToRoomReq& from);

  inline S2SHeartBeatToRoomReq& operator=(const S2SHeartBeatToRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SHeartBeatToRoomReq(S2SHeartBeatToRoomReq&& from) noexcept
    : S2SHeartBeatToRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SHeartBeatToRoomReq& operator=(S2SHeartBeatToRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SHeartBeatToRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SHeartBeatToRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SHeartBeatToRoomReq*>(
               &_S2SHeartBeatToRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(S2SHeartBeatToRoomReq* other);
  friend void swap(S2SHeartBeatToRoomReq& a, S2SHeartBeatToRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SHeartBeatToRoomReq* New() const final {
    return CreateMaybeMessage<S2SHeartBeatToRoomReq>(NULL);
  }

  S2SHeartBeatToRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SHeartBeatToRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SHeartBeatToRoomReq& from);
  void MergeFrom(const S2SHeartBeatToRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SHeartBeatToRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 serverid = 2;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SHeartBeatToRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerBalanceToRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SPlayerBalanceToRoomReq) */ {
 public:
  S2SPlayerBalanceToRoomReq();
  virtual ~S2SPlayerBalanceToRoomReq();

  S2SPlayerBalanceToRoomReq(const S2SPlayerBalanceToRoomReq& from);

  inline S2SPlayerBalanceToRoomReq& operator=(const S2SPlayerBalanceToRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SPlayerBalanceToRoomReq(S2SPlayerBalanceToRoomReq&& from) noexcept
    : S2SPlayerBalanceToRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SPlayerBalanceToRoomReq& operator=(S2SPlayerBalanceToRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerBalanceToRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SPlayerBalanceToRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SPlayerBalanceToRoomReq*>(
               &_S2SPlayerBalanceToRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(S2SPlayerBalanceToRoomReq* other);
  friend void swap(S2SPlayerBalanceToRoomReq& a, S2SPlayerBalanceToRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SPlayerBalanceToRoomReq* New() const final {
    return CreateMaybeMessage<S2SPlayerBalanceToRoomReq>(NULL);
  }

  S2SPlayerBalanceToRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SPlayerBalanceToRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SPlayerBalanceToRoomReq& from);
  void MergeFrom(const S2SPlayerBalanceToRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SPlayerBalanceToRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBBattleBalance balance = 3;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  private:
  const ::KFMsg::PBBattleBalance& _internal_balance() const;
  public:
  const ::KFMsg::PBBattleBalance& balance() const;
  ::KFMsg::PBBattleBalance* release_balance();
  ::KFMsg::PBBattleBalance* mutable_balance();
  void set_allocated_balance(::KFMsg::PBBattleBalance* balance);

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerBalanceToRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBBattleBalance* balance_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerBalanceToBattleAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SPlayerBalanceToBattleAck) */ {
 public:
  S2SPlayerBalanceToBattleAck();
  virtual ~S2SPlayerBalanceToBattleAck();

  S2SPlayerBalanceToBattleAck(const S2SPlayerBalanceToBattleAck& from);

  inline S2SPlayerBalanceToBattleAck& operator=(const S2SPlayerBalanceToBattleAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SPlayerBalanceToBattleAck(S2SPlayerBalanceToBattleAck&& from) noexcept
    : S2SPlayerBalanceToBattleAck() {
    *this = ::std::move(from);
  }

  inline S2SPlayerBalanceToBattleAck& operator=(S2SPlayerBalanceToBattleAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerBalanceToBattleAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SPlayerBalanceToBattleAck* internal_default_instance() {
    return reinterpret_cast<const S2SPlayerBalanceToBattleAck*>(
               &_S2SPlayerBalanceToBattleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(S2SPlayerBalanceToBattleAck* other);
  friend void swap(S2SPlayerBalanceToBattleAck& a, S2SPlayerBalanceToBattleAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SPlayerBalanceToBattleAck* New() const final {
    return CreateMaybeMessage<S2SPlayerBalanceToBattleAck>(NULL);
  }

  S2SPlayerBalanceToBattleAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SPlayerBalanceToBattleAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SPlayerBalanceToBattleAck& from);
  void MergeFrom(const S2SPlayerBalanceToBattleAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SPlayerBalanceToBattleAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerBalanceToBattleAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SStartMatchToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SStartMatchToShardReq) */ {
 public:
  S2SStartMatchToShardReq();
  virtual ~S2SStartMatchToShardReq();

  S2SStartMatchToShardReq(const S2SStartMatchToShardReq& from);

  inline S2SStartMatchToShardReq& operator=(const S2SStartMatchToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SStartMatchToShardReq(S2SStartMatchToShardReq&& from) noexcept
    : S2SStartMatchToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SStartMatchToShardReq& operator=(S2SStartMatchToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SStartMatchToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SStartMatchToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SStartMatchToShardReq*>(
               &_S2SStartMatchToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(S2SStartMatchToShardReq* other);
  friend void swap(S2SStartMatchToShardReq& a, S2SStartMatchToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SStartMatchToShardReq* New() const final {
    return CreateMaybeMessage<S2SStartMatchToShardReq>(NULL);
  }

  S2SStartMatchToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SStartMatchToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SStartMatchToShardReq& from);
  void MergeFrom(const S2SStartMatchToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SStartMatchToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .KFMsg.PBMatchPlayer pbplayer = 4;
  bool has_pbplayer() const;
  void clear_pbplayer();
  static const int kPbplayerFieldNumber = 4;
  private:
  const ::KFMsg::PBMatchPlayer& _internal_pbplayer() const;
  public:
  const ::KFMsg::PBMatchPlayer& pbplayer() const;
  ::KFMsg::PBMatchPlayer* release_pbplayer();
  ::KFMsg::PBMatchPlayer* mutable_pbplayer();
  void set_allocated_pbplayer(::KFMsg::PBMatchPlayer* pbplayer);

  // uint64 serverid = 3;
  void clear_serverid();
  static const int kServeridFieldNumber = 3;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SStartMatchToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::KFMsg::PBMatchPlayer* pbplayer_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SStartMatchToGameAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SStartMatchToGameAck) */ {
 public:
  S2SStartMatchToGameAck();
  virtual ~S2SStartMatchToGameAck();

  S2SStartMatchToGameAck(const S2SStartMatchToGameAck& from);

  inline S2SStartMatchToGameAck& operator=(const S2SStartMatchToGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SStartMatchToGameAck(S2SStartMatchToGameAck&& from) noexcept
    : S2SStartMatchToGameAck() {
    *this = ::std::move(from);
  }

  inline S2SStartMatchToGameAck& operator=(S2SStartMatchToGameAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SStartMatchToGameAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SStartMatchToGameAck* internal_default_instance() {
    return reinterpret_cast<const S2SStartMatchToGameAck*>(
               &_S2SStartMatchToGameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(S2SStartMatchToGameAck* other);
  friend void swap(S2SStartMatchToGameAck& a, S2SStartMatchToGameAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SStartMatchToGameAck* New() const final {
    return CreateMaybeMessage<S2SStartMatchToGameAck>(NULL);
  }

  S2SStartMatchToGameAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SStartMatchToGameAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SStartMatchToGameAck& from);
  void MergeFrom(const S2SStartMatchToGameAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SStartMatchToGameAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // uint64 playerid = 3;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 4;
  void clear_serverid();
  static const int kServeridFieldNumber = 4;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SStartMatchToGameAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SCancelMatchToShardReq) */ {
 public:
  S2SCancelMatchToShardReq();
  virtual ~S2SCancelMatchToShardReq();

  S2SCancelMatchToShardReq(const S2SCancelMatchToShardReq& from);

  inline S2SCancelMatchToShardReq& operator=(const S2SCancelMatchToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SCancelMatchToShardReq(S2SCancelMatchToShardReq&& from) noexcept
    : S2SCancelMatchToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SCancelMatchToShardReq& operator=(S2SCancelMatchToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SCancelMatchToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SCancelMatchToShardReq*>(
               &_S2SCancelMatchToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(S2SCancelMatchToShardReq* other);
  friend void swap(S2SCancelMatchToShardReq& a, S2SCancelMatchToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SCancelMatchToShardReq* New() const final {
    return CreateMaybeMessage<S2SCancelMatchToShardReq>(NULL);
  }

  S2SCancelMatchToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SCancelMatchToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SCancelMatchToShardReq& from);
  void MergeFrom(const S2SCancelMatchToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SCancelMatchToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateRoomToRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SCreateRoomToRoomReq) */ {
 public:
  S2SCreateRoomToRoomReq();
  virtual ~S2SCreateRoomToRoomReq();

  S2SCreateRoomToRoomReq(const S2SCreateRoomToRoomReq& from);

  inline S2SCreateRoomToRoomReq& operator=(const S2SCreateRoomToRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SCreateRoomToRoomReq(S2SCreateRoomToRoomReq&& from) noexcept
    : S2SCreateRoomToRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SCreateRoomToRoomReq& operator=(S2SCreateRoomToRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateRoomToRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SCreateRoomToRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SCreateRoomToRoomReq*>(
               &_S2SCreateRoomToRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(S2SCreateRoomToRoomReq* other);
  friend void swap(S2SCreateRoomToRoomReq& a, S2SCreateRoomToRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SCreateRoomToRoomReq* New() const final {
    return CreateMaybeMessage<S2SCreateRoomToRoomReq>(NULL);
  }

  S2SCreateRoomToRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SCreateRoomToRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SCreateRoomToRoomReq& from);
  void MergeFrom(const S2SCreateRoomToRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SCreateRoomToRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBMatchPlayer pbplayer = 5;
  int pbplayer_size() const;
  void clear_pbplayer();
  static const int kPbplayerFieldNumber = 5;
  ::KFMsg::PBMatchPlayer* mutable_pbplayer(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >*
      mutable_pbplayer();
  const ::KFMsg::PBMatchPlayer& pbplayer(int index) const;
  ::KFMsg::PBMatchPlayer* add_pbplayer();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >&
      pbplayer() const;

  // bytes version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 serverid = 4;
  void clear_serverid();
  static const int kServeridFieldNumber = 4;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateRoomToRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer > pbplayer_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateRoomToMatchAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SCreateRoomToMatchAck) */ {
 public:
  S2SCreateRoomToMatchAck();
  virtual ~S2SCreateRoomToMatchAck();

  S2SCreateRoomToMatchAck(const S2SCreateRoomToMatchAck& from);

  inline S2SCreateRoomToMatchAck& operator=(const S2SCreateRoomToMatchAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SCreateRoomToMatchAck(S2SCreateRoomToMatchAck&& from) noexcept
    : S2SCreateRoomToMatchAck() {
    *this = ::std::move(from);
  }

  inline S2SCreateRoomToMatchAck& operator=(S2SCreateRoomToMatchAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateRoomToMatchAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SCreateRoomToMatchAck* internal_default_instance() {
    return reinterpret_cast<const S2SCreateRoomToMatchAck*>(
               &_S2SCreateRoomToMatchAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(S2SCreateRoomToMatchAck* other);
  friend void swap(S2SCreateRoomToMatchAck& a, S2SCreateRoomToMatchAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SCreateRoomToMatchAck* New() const final {
    return CreateMaybeMessage<S2SCreateRoomToMatchAck>(NULL);
  }

  S2SCreateRoomToMatchAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SCreateRoomToMatchAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SCreateRoomToMatchAck& from);
  void MergeFrom(const S2SCreateRoomToMatchAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SCreateRoomToMatchAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateRoomToMatchAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SInformBattleToGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SInformBattleToGameReq) */ {
 public:
  S2SInformBattleToGameReq();
  virtual ~S2SInformBattleToGameReq();

  S2SInformBattleToGameReq(const S2SInformBattleToGameReq& from);

  inline S2SInformBattleToGameReq& operator=(const S2SInformBattleToGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SInformBattleToGameReq(S2SInformBattleToGameReq&& from) noexcept
    : S2SInformBattleToGameReq() {
    *this = ::std::move(from);
  }

  inline S2SInformBattleToGameReq& operator=(S2SInformBattleToGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SInformBattleToGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SInformBattleToGameReq* internal_default_instance() {
    return reinterpret_cast<const S2SInformBattleToGameReq*>(
               &_S2SInformBattleToGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(S2SInformBattleToGameReq* other);
  friend void swap(S2SInformBattleToGameReq& a, S2SInformBattleToGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SInformBattleToGameReq* New() const final {
    return CreateMaybeMessage<S2SInformBattleToGameReq>(NULL);
  }

  S2SInformBattleToGameReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SInformBattleToGameReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SInformBattleToGameReq& from);
  void MergeFrom(const S2SInformBattleToGameReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SInformBattleToGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 battleid = 3;
  void clear_battleid();
  static const int kBattleidFieldNumber = 3;
  ::google::protobuf::uint64 battleid() const;
  void set_battleid(::google::protobuf::uint64 value);

  // uint32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SInformBattleToGameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 battleid_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SInformBattleToRoomAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SInformBattleToRoomAck) */ {
 public:
  S2SInformBattleToRoomAck();
  virtual ~S2SInformBattleToRoomAck();

  S2SInformBattleToRoomAck(const S2SInformBattleToRoomAck& from);

  inline S2SInformBattleToRoomAck& operator=(const S2SInformBattleToRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SInformBattleToRoomAck(S2SInformBattleToRoomAck&& from) noexcept
    : S2SInformBattleToRoomAck() {
    *this = ::std::move(from);
  }

  inline S2SInformBattleToRoomAck& operator=(S2SInformBattleToRoomAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SInformBattleToRoomAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SInformBattleToRoomAck* internal_default_instance() {
    return reinterpret_cast<const S2SInformBattleToRoomAck*>(
               &_S2SInformBattleToRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(S2SInformBattleToRoomAck* other);
  friend void swap(S2SInformBattleToRoomAck& a, S2SInformBattleToRoomAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SInformBattleToRoomAck* New() const final {
    return CreateMaybeMessage<S2SInformBattleToRoomAck>(NULL);
  }

  S2SInformBattleToRoomAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SInformBattleToRoomAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SInformBattleToRoomAck& from);
  void MergeFrom(const S2SInformBattleToRoomAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SInformBattleToRoomAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SInformBattleToRoomAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryRoomToRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryRoomToRoomReq) */ {
 public:
  S2SQueryRoomToRoomReq();
  virtual ~S2SQueryRoomToRoomReq();

  S2SQueryRoomToRoomReq(const S2SQueryRoomToRoomReq& from);

  inline S2SQueryRoomToRoomReq& operator=(const S2SQueryRoomToRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryRoomToRoomReq(S2SQueryRoomToRoomReq&& from) noexcept
    : S2SQueryRoomToRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SQueryRoomToRoomReq& operator=(S2SQueryRoomToRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryRoomToRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryRoomToRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SQueryRoomToRoomReq*>(
               &_S2SQueryRoomToRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(S2SQueryRoomToRoomReq* other);
  friend void swap(S2SQueryRoomToRoomReq& a, S2SQueryRoomToRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryRoomToRoomReq* New() const final {
    return CreateMaybeMessage<S2SQueryRoomToRoomReq>(NULL);
  }

  S2SQueryRoomToRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryRoomToRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryRoomToRoomReq& from);
  void MergeFrom(const S2SQueryRoomToRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryRoomToRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryRoomToRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryRoomToGameAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryRoomToGameAck) */ {
 public:
  S2SQueryRoomToGameAck();
  virtual ~S2SQueryRoomToGameAck();

  S2SQueryRoomToGameAck(const S2SQueryRoomToGameAck& from);

  inline S2SQueryRoomToGameAck& operator=(const S2SQueryRoomToGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryRoomToGameAck(S2SQueryRoomToGameAck&& from) noexcept
    : S2SQueryRoomToGameAck() {
    *this = ::std::move(from);
  }

  inline S2SQueryRoomToGameAck& operator=(S2SQueryRoomToGameAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryRoomToGameAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryRoomToGameAck* internal_default_instance() {
    return reinterpret_cast<const S2SQueryRoomToGameAck*>(
               &_S2SQueryRoomToGameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(S2SQueryRoomToGameAck* other);
  friend void swap(S2SQueryRoomToGameAck& a, S2SQueryRoomToGameAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryRoomToGameAck* New() const final {
    return CreateMaybeMessage<S2SQueryRoomToGameAck>(NULL);
  }

  S2SQueryRoomToGameAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryRoomToGameAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryRoomToGameAck& from);
  void MergeFrom(const S2SQueryRoomToGameAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryRoomToGameAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryRoomToGameAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SFinishRoomToGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SFinishRoomToGameReq) */ {
 public:
  S2SFinishRoomToGameReq();
  virtual ~S2SFinishRoomToGameReq();

  S2SFinishRoomToGameReq(const S2SFinishRoomToGameReq& from);

  inline S2SFinishRoomToGameReq& operator=(const S2SFinishRoomToGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SFinishRoomToGameReq(S2SFinishRoomToGameReq&& from) noexcept
    : S2SFinishRoomToGameReq() {
    *this = ::std::move(from);
  }

  inline S2SFinishRoomToGameReq& operator=(S2SFinishRoomToGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SFinishRoomToGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SFinishRoomToGameReq* internal_default_instance() {
    return reinterpret_cast<const S2SFinishRoomToGameReq*>(
               &_S2SFinishRoomToGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(S2SFinishRoomToGameReq* other);
  friend void swap(S2SFinishRoomToGameReq& a, S2SFinishRoomToGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SFinishRoomToGameReq* New() const final {
    return CreateMaybeMessage<S2SFinishRoomToGameReq>(NULL);
  }

  S2SFinishRoomToGameReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SFinishRoomToGameReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SFinishRoomToGameReq& from);
  void MergeFrom(const S2SFinishRoomToGameReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SFinishRoomToGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SFinishRoomToGameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMatchToMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryMatchToMatchReq) */ {
 public:
  S2SQueryMatchToMatchReq();
  virtual ~S2SQueryMatchToMatchReq();

  S2SQueryMatchToMatchReq(const S2SQueryMatchToMatchReq& from);

  inline S2SQueryMatchToMatchReq& operator=(const S2SQueryMatchToMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryMatchToMatchReq(S2SQueryMatchToMatchReq&& from) noexcept
    : S2SQueryMatchToMatchReq() {
    *this = ::std::move(from);
  }

  inline S2SQueryMatchToMatchReq& operator=(S2SQueryMatchToMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMatchToMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryMatchToMatchReq* internal_default_instance() {
    return reinterpret_cast<const S2SQueryMatchToMatchReq*>(
               &_S2SQueryMatchToMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(S2SQueryMatchToMatchReq* other);
  friend void swap(S2SQueryMatchToMatchReq& a, S2SQueryMatchToMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryMatchToMatchReq* New() const final {
    return CreateMaybeMessage<S2SQueryMatchToMatchReq>(NULL);
  }

  S2SQueryMatchToMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryMatchToMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryMatchToMatchReq& from);
  void MergeFrom(const S2SQueryMatchToMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryMatchToMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMatchToMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMatchToGameAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryMatchToGameAck) */ {
 public:
  S2SQueryMatchToGameAck();
  virtual ~S2SQueryMatchToGameAck();

  S2SQueryMatchToGameAck(const S2SQueryMatchToGameAck& from);

  inline S2SQueryMatchToGameAck& operator=(const S2SQueryMatchToGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryMatchToGameAck(S2SQueryMatchToGameAck&& from) noexcept
    : S2SQueryMatchToGameAck() {
    *this = ::std::move(from);
  }

  inline S2SQueryMatchToGameAck& operator=(S2SQueryMatchToGameAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMatchToGameAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryMatchToGameAck* internal_default_instance() {
    return reinterpret_cast<const S2SQueryMatchToGameAck*>(
               &_S2SQueryMatchToGameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(S2SQueryMatchToGameAck* other);
  friend void swap(S2SQueryMatchToGameAck& a, S2SQueryMatchToGameAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryMatchToGameAck* New() const final {
    return CreateMaybeMessage<S2SQueryMatchToGameAck>(NULL);
  }

  S2SQueryMatchToGameAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryMatchToGameAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryMatchToGameAck& from);
  void MergeFrom(const S2SQueryMatchToGameAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryMatchToGameAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMatchToGameAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerBalanceToGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SPlayerBalanceToGameReq) */ {
 public:
  S2SPlayerBalanceToGameReq();
  virtual ~S2SPlayerBalanceToGameReq();

  S2SPlayerBalanceToGameReq(const S2SPlayerBalanceToGameReq& from);

  inline S2SPlayerBalanceToGameReq& operator=(const S2SPlayerBalanceToGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SPlayerBalanceToGameReq(S2SPlayerBalanceToGameReq&& from) noexcept
    : S2SPlayerBalanceToGameReq() {
    *this = ::std::move(from);
  }

  inline S2SPlayerBalanceToGameReq& operator=(S2SPlayerBalanceToGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerBalanceToGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SPlayerBalanceToGameReq* internal_default_instance() {
    return reinterpret_cast<const S2SPlayerBalanceToGameReq*>(
               &_S2SPlayerBalanceToGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(S2SPlayerBalanceToGameReq* other);
  friend void swap(S2SPlayerBalanceToGameReq& a, S2SPlayerBalanceToGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SPlayerBalanceToGameReq* New() const final {
    return CreateMaybeMessage<S2SPlayerBalanceToGameReq>(NULL);
  }

  S2SPlayerBalanceToGameReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SPlayerBalanceToGameReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SPlayerBalanceToGameReq& from);
  void MergeFrom(const S2SPlayerBalanceToGameReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SPlayerBalanceToGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBBattleBalance balance = 3;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  private:
  const ::KFMsg::PBBattleBalance& _internal_balance() const;
  public:
  const ::KFMsg::PBBattleBalance& balance() const;
  ::KFMsg::PBBattleBalance* release_balance();
  ::KFMsg::PBBattleBalance* mutable_balance();
  void set_allocated_balance(::KFMsg::PBBattleBalance* balance);

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerBalanceToGameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBBattleBalance* balance_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerBalanceToRoomResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SPlayerBalanceToRoomResult) */ {
 public:
  S2SPlayerBalanceToRoomResult();
  virtual ~S2SPlayerBalanceToRoomResult();

  S2SPlayerBalanceToRoomResult(const S2SPlayerBalanceToRoomResult& from);

  inline S2SPlayerBalanceToRoomResult& operator=(const S2SPlayerBalanceToRoomResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SPlayerBalanceToRoomResult(S2SPlayerBalanceToRoomResult&& from) noexcept
    : S2SPlayerBalanceToRoomResult() {
    *this = ::std::move(from);
  }

  inline S2SPlayerBalanceToRoomResult& operator=(S2SPlayerBalanceToRoomResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerBalanceToRoomResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SPlayerBalanceToRoomResult* internal_default_instance() {
    return reinterpret_cast<const S2SPlayerBalanceToRoomResult*>(
               &_S2SPlayerBalanceToRoomResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(S2SPlayerBalanceToRoomResult* other);
  friend void swap(S2SPlayerBalanceToRoomResult& a, S2SPlayerBalanceToRoomResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SPlayerBalanceToRoomResult* New() const final {
    return CreateMaybeMessage<S2SPlayerBalanceToRoomResult>(NULL);
  }

  S2SPlayerBalanceToRoomResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SPlayerBalanceToRoomResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SPlayerBalanceToRoomResult& from);
  void MergeFrom(const S2SPlayerBalanceToRoomResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SPlayerBalanceToRoomResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerBalanceToRoomResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryBalanceToRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryBalanceToRoomReq) */ {
 public:
  S2SQueryBalanceToRoomReq();
  virtual ~S2SQueryBalanceToRoomReq();

  S2SQueryBalanceToRoomReq(const S2SQueryBalanceToRoomReq& from);

  inline S2SQueryBalanceToRoomReq& operator=(const S2SQueryBalanceToRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryBalanceToRoomReq(S2SQueryBalanceToRoomReq&& from) noexcept
    : S2SQueryBalanceToRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SQueryBalanceToRoomReq& operator=(S2SQueryBalanceToRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryBalanceToRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryBalanceToRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SQueryBalanceToRoomReq*>(
               &_S2SQueryBalanceToRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(S2SQueryBalanceToRoomReq* other);
  friend void swap(S2SQueryBalanceToRoomReq& a, S2SQueryBalanceToRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryBalanceToRoomReq* New() const final {
    return CreateMaybeMessage<S2SQueryBalanceToRoomReq>(NULL);
  }

  S2SQueryBalanceToRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryBalanceToRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryBalanceToRoomReq& from);
  void MergeFrom(const S2SQueryBalanceToRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryBalanceToRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryBalanceToRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2SRegisterBattleToRoomReq

// uint64 serverid = 1;
inline void S2SRegisterBattleToRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRegisterBattleToRoomReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterBattleToRoomReq.serverid)
  return serverid_;
}
inline void S2SRegisterBattleToRoomReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterBattleToRoomReq.serverid)
}

// bytes version = 2;
inline void S2SRegisterBattleToRoomReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterBattleToRoomReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterBattleToRoomReq.version)
  return version_.GetNoArena();
}
inline void S2SRegisterBattleToRoomReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterBattleToRoomReq.version)
}
#if LANG_CXX11
inline void S2SRegisterBattleToRoomReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterBattleToRoomReq.version)
}
#endif
inline void S2SRegisterBattleToRoomReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterBattleToRoomReq.version)
}
inline void S2SRegisterBattleToRoomReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterBattleToRoomReq.version)
}
inline ::std::string* S2SRegisterBattleToRoomReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterBattleToRoomReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterBattleToRoomReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterBattleToRoomReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterBattleToRoomReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterBattleToRoomReq.version)
}

// bytes ip = 3;
inline void S2SRegisterBattleToRoomReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterBattleToRoomReq::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterBattleToRoomReq.ip)
  return ip_.GetNoArena();
}
inline void S2SRegisterBattleToRoomReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterBattleToRoomReq.ip)
}
#if LANG_CXX11
inline void S2SRegisterBattleToRoomReq::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterBattleToRoomReq.ip)
}
#endif
inline void S2SRegisterBattleToRoomReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterBattleToRoomReq.ip)
}
inline void S2SRegisterBattleToRoomReq::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterBattleToRoomReq.ip)
}
inline ::std::string* S2SRegisterBattleToRoomReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterBattleToRoomReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterBattleToRoomReq::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterBattleToRoomReq.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterBattleToRoomReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterBattleToRoomReq.ip)
}

// uint32 port = 4;
inline void S2SRegisterBattleToRoomReq::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 S2SRegisterBattleToRoomReq::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterBattleToRoomReq.port)
  return port_;
}
inline void S2SRegisterBattleToRoomReq::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterBattleToRoomReq.port)
}

// -------------------------------------------------------------------

// S2SRegisterBattleToBattleAck

// bool result = 1;
inline void S2SRegisterBattleToBattleAck::clear_result() {
  result_ = false;
}
inline bool S2SRegisterBattleToBattleAck::result() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterBattleToBattleAck.result)
  return result_;
}
inline void S2SRegisterBattleToBattleAck::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterBattleToBattleAck.result)
}

// -------------------------------------------------------------------

// S2SOpenRoomToBattleReq

// uint64 roomid = 1;
inline void S2SOpenRoomToBattleReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SOpenRoomToBattleReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SOpenRoomToBattleReq.roomid)
  return roomid_;
}
inline void S2SOpenRoomToBattleReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SOpenRoomToBattleReq.roomid)
}

// uint32 matchid = 2;
inline void S2SOpenRoomToBattleReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SOpenRoomToBattleReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SOpenRoomToBattleReq.matchid)
  return matchid_;
}
inline void S2SOpenRoomToBattleReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SOpenRoomToBattleReq.matchid)
}

// uint64 roomserverid = 3;
inline void S2SOpenRoomToBattleReq::clear_roomserverid() {
  roomserverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SOpenRoomToBattleReq::roomserverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SOpenRoomToBattleReq.roomserverid)
  return roomserverid_;
}
inline void S2SOpenRoomToBattleReq::set_roomserverid(::google::protobuf::uint64 value) {
  
  roomserverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SOpenRoomToBattleReq.roomserverid)
}

// repeated .KFMsg.PBMatchPlayer pbplayer = 4;
inline int S2SOpenRoomToBattleReq::pbplayer_size() const {
  return pbplayer_.size();
}
inline ::KFMsg::PBMatchPlayer* S2SOpenRoomToBattleReq::mutable_pbplayer(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SOpenRoomToBattleReq.pbplayer)
  return pbplayer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >*
S2SOpenRoomToBattleReq::mutable_pbplayer() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SOpenRoomToBattleReq.pbplayer)
  return &pbplayer_;
}
inline const ::KFMsg::PBMatchPlayer& S2SOpenRoomToBattleReq::pbplayer(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SOpenRoomToBattleReq.pbplayer)
  return pbplayer_.Get(index);
}
inline ::KFMsg::PBMatchPlayer* S2SOpenRoomToBattleReq::add_pbplayer() {
  // @@protoc_insertion_point(field_add:KFMsg.S2SOpenRoomToBattleReq.pbplayer)
  return pbplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >&
S2SOpenRoomToBattleReq::pbplayer() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SOpenRoomToBattleReq.pbplayer)
  return pbplayer_;
}

// -------------------------------------------------------------------

// S2SOpenRoomToRoomAck

// uint64 roomid = 1;
inline void S2SOpenRoomToRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SOpenRoomToRoomAck::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SOpenRoomToRoomAck.roomid)
  return roomid_;
}
inline void S2SOpenRoomToRoomAck::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SOpenRoomToRoomAck.roomid)
}

// bool result = 2;
inline void S2SOpenRoomToRoomAck::clear_result() {
  result_ = false;
}
inline bool S2SOpenRoomToRoomAck::result() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SOpenRoomToRoomAck.result)
  return result_;
}
inline void S2SOpenRoomToRoomAck::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SOpenRoomToRoomAck.result)
}

// -------------------------------------------------------------------

// S2SFinishRoomToRoomReq

// uint64 roomid = 1;
inline void S2SFinishRoomToRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SFinishRoomToRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SFinishRoomToRoomReq.roomid)
  return roomid_;
}
inline void S2SFinishRoomToRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SFinishRoomToRoomReq.roomid)
}

// -------------------------------------------------------------------

// S2SFinishRoomToBattleAck

// uint64 roomid = 1;
inline void S2SFinishRoomToBattleAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SFinishRoomToBattleAck::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SFinishRoomToBattleAck.roomid)
  return roomid_;
}
inline void S2SFinishRoomToBattleAck::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SFinishRoomToBattleAck.roomid)
}

// -------------------------------------------------------------------

// S2SHeartBeatToRoomReq

// uint64 roomid = 1;
inline void S2SHeartBeatToRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SHeartBeatToRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SHeartBeatToRoomReq.roomid)
  return roomid_;
}
inline void S2SHeartBeatToRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SHeartBeatToRoomReq.roomid)
}

// uint64 serverid = 2;
inline void S2SHeartBeatToRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SHeartBeatToRoomReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SHeartBeatToRoomReq.serverid)
  return serverid_;
}
inline void S2SHeartBeatToRoomReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SHeartBeatToRoomReq.serverid)
}

// -------------------------------------------------------------------

// S2SPlayerBalanceToRoomReq

// uint64 roomid = 1;
inline void S2SPlayerBalanceToRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToRoomReq.roomid)
  return roomid_;
}
inline void S2SPlayerBalanceToRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToRoomReq.roomid)
}

// uint64 playerid = 2;
inline void S2SPlayerBalanceToRoomReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToRoomReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToRoomReq.playerid)
  return playerid_;
}
inline void S2SPlayerBalanceToRoomReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToRoomReq.playerid)
}

// .KFMsg.PBBattleBalance balance = 3;
inline bool S2SPlayerBalanceToRoomReq::has_balance() const {
  return this != internal_default_instance() && balance_ != NULL;
}
inline const ::KFMsg::PBBattleBalance& S2SPlayerBalanceToRoomReq::_internal_balance() const {
  return *balance_;
}
inline const ::KFMsg::PBBattleBalance& S2SPlayerBalanceToRoomReq::balance() const {
  const ::KFMsg::PBBattleBalance* p = balance_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToRoomReq.balance)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBBattleBalance*>(
      &::KFMsg::_PBBattleBalance_default_instance_);
}
inline ::KFMsg::PBBattleBalance* S2SPlayerBalanceToRoomReq::release_balance() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SPlayerBalanceToRoomReq.balance)
  
  ::KFMsg::PBBattleBalance* temp = balance_;
  balance_ = NULL;
  return temp;
}
inline ::KFMsg::PBBattleBalance* S2SPlayerBalanceToRoomReq::mutable_balance() {
  
  if (balance_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBBattleBalance>(GetArenaNoVirtual());
    balance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SPlayerBalanceToRoomReq.balance)
  return balance_;
}
inline void S2SPlayerBalanceToRoomReq::set_allocated_balance(::KFMsg::PBBattleBalance* balance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(balance_);
  }
  if (balance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      balance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, balance, submessage_arena);
    }
    
  } else {
    
  }
  balance_ = balance;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SPlayerBalanceToRoomReq.balance)
}

// -------------------------------------------------------------------

// S2SPlayerBalanceToBattleAck

// uint64 roomid = 1;
inline void S2SPlayerBalanceToBattleAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToBattleAck::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToBattleAck.roomid)
  return roomid_;
}
inline void S2SPlayerBalanceToBattleAck::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToBattleAck.roomid)
}

// uint64 playerid = 2;
inline void S2SPlayerBalanceToBattleAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToBattleAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToBattleAck.playerid)
  return playerid_;
}
inline void S2SPlayerBalanceToBattleAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToBattleAck.playerid)
}

// -------------------------------------------------------------------

// S2SStartMatchToShardReq

// bytes version = 1;
inline void S2SStartMatchToShardReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SStartMatchToShardReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToShardReq.version)
  return version_.GetNoArena();
}
inline void S2SStartMatchToShardReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SStartMatchToShardReq.version)
}
#if LANG_CXX11
inline void S2SStartMatchToShardReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SStartMatchToShardReq.version)
}
#endif
inline void S2SStartMatchToShardReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SStartMatchToShardReq.version)
}
inline void S2SStartMatchToShardReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SStartMatchToShardReq.version)
}
inline ::std::string* S2SStartMatchToShardReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SStartMatchToShardReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SStartMatchToShardReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SStartMatchToShardReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SStartMatchToShardReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SStartMatchToShardReq.version)
}

// uint32 matchid = 2;
inline void S2SStartMatchToShardReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SStartMatchToShardReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToShardReq.matchid)
  return matchid_;
}
inline void S2SStartMatchToShardReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SStartMatchToShardReq.matchid)
}

// uint64 serverid = 3;
inline void S2SStartMatchToShardReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SStartMatchToShardReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToShardReq.serverid)
  return serverid_;
}
inline void S2SStartMatchToShardReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SStartMatchToShardReq.serverid)
}

// .KFMsg.PBMatchPlayer pbplayer = 4;
inline bool S2SStartMatchToShardReq::has_pbplayer() const {
  return this != internal_default_instance() && pbplayer_ != NULL;
}
inline const ::KFMsg::PBMatchPlayer& S2SStartMatchToShardReq::_internal_pbplayer() const {
  return *pbplayer_;
}
inline const ::KFMsg::PBMatchPlayer& S2SStartMatchToShardReq::pbplayer() const {
  const ::KFMsg::PBMatchPlayer* p = pbplayer_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToShardReq.pbplayer)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBMatchPlayer*>(
      &::KFMsg::_PBMatchPlayer_default_instance_);
}
inline ::KFMsg::PBMatchPlayer* S2SStartMatchToShardReq::release_pbplayer() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SStartMatchToShardReq.pbplayer)
  
  ::KFMsg::PBMatchPlayer* temp = pbplayer_;
  pbplayer_ = NULL;
  return temp;
}
inline ::KFMsg::PBMatchPlayer* S2SStartMatchToShardReq::mutable_pbplayer() {
  
  if (pbplayer_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBMatchPlayer>(GetArenaNoVirtual());
    pbplayer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SStartMatchToShardReq.pbplayer)
  return pbplayer_;
}
inline void S2SStartMatchToShardReq::set_allocated_pbplayer(::KFMsg::PBMatchPlayer* pbplayer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pbplayer_);
  }
  if (pbplayer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbplayer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbplayer, submessage_arena);
    }
    
  } else {
    
  }
  pbplayer_ = pbplayer;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SStartMatchToShardReq.pbplayer)
}

// -------------------------------------------------------------------

// S2SStartMatchToGameAck

// uint32 result = 1;
inline void S2SStartMatchToGameAck::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 S2SStartMatchToGameAck::result() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToGameAck.result)
  return result_;
}
inline void S2SStartMatchToGameAck::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SStartMatchToGameAck.result)
}

// uint32 matchid = 2;
inline void S2SStartMatchToGameAck::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SStartMatchToGameAck::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToGameAck.matchid)
  return matchid_;
}
inline void S2SStartMatchToGameAck::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SStartMatchToGameAck.matchid)
}

// uint64 playerid = 3;
inline void S2SStartMatchToGameAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SStartMatchToGameAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToGameAck.playerid)
  return playerid_;
}
inline void S2SStartMatchToGameAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SStartMatchToGameAck.playerid)
}

// uint64 serverid = 4;
inline void S2SStartMatchToGameAck::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SStartMatchToGameAck::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SStartMatchToGameAck.serverid)
  return serverid_;
}
inline void S2SStartMatchToGameAck::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SStartMatchToGameAck.serverid)
}

// -------------------------------------------------------------------

// S2SCancelMatchToShardReq

// uint32 matchid = 1;
inline void S2SCancelMatchToShardReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SCancelMatchToShardReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToShardReq.matchid)
  return matchid_;
}
inline void S2SCancelMatchToShardReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToShardReq.matchid)
}

// uint64 playerid = 2;
inline void S2SCancelMatchToShardReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCancelMatchToShardReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToShardReq.playerid)
  return playerid_;
}
inline void S2SCancelMatchToShardReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToShardReq.playerid)
}

// -------------------------------------------------------------------

// S2SCreateRoomToRoomReq

// uint32 matchid = 1;
inline void S2SCreateRoomToRoomReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SCreateRoomToRoomReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCreateRoomToRoomReq.matchid)
  return matchid_;
}
inline void S2SCreateRoomToRoomReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCreateRoomToRoomReq.matchid)
}

// uint64 roomid = 2;
inline void S2SCreateRoomToRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCreateRoomToRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCreateRoomToRoomReq.roomid)
  return roomid_;
}
inline void S2SCreateRoomToRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCreateRoomToRoomReq.roomid)
}

// bytes version = 3;
inline void S2SCreateRoomToRoomReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SCreateRoomToRoomReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCreateRoomToRoomReq.version)
  return version_.GetNoArena();
}
inline void S2SCreateRoomToRoomReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SCreateRoomToRoomReq.version)
}
#if LANG_CXX11
inline void S2SCreateRoomToRoomReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SCreateRoomToRoomReq.version)
}
#endif
inline void S2SCreateRoomToRoomReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SCreateRoomToRoomReq.version)
}
inline void S2SCreateRoomToRoomReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SCreateRoomToRoomReq.version)
}
inline ::std::string* S2SCreateRoomToRoomReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SCreateRoomToRoomReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SCreateRoomToRoomReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SCreateRoomToRoomReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SCreateRoomToRoomReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SCreateRoomToRoomReq.version)
}

// uint64 serverid = 4;
inline void S2SCreateRoomToRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCreateRoomToRoomReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCreateRoomToRoomReq.serverid)
  return serverid_;
}
inline void S2SCreateRoomToRoomReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCreateRoomToRoomReq.serverid)
}

// repeated .KFMsg.PBMatchPlayer pbplayer = 5;
inline int S2SCreateRoomToRoomReq::pbplayer_size() const {
  return pbplayer_.size();
}
inline ::KFMsg::PBMatchPlayer* S2SCreateRoomToRoomReq::mutable_pbplayer(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SCreateRoomToRoomReq.pbplayer)
  return pbplayer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >*
S2SCreateRoomToRoomReq::mutable_pbplayer() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SCreateRoomToRoomReq.pbplayer)
  return &pbplayer_;
}
inline const ::KFMsg::PBMatchPlayer& S2SCreateRoomToRoomReq::pbplayer(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCreateRoomToRoomReq.pbplayer)
  return pbplayer_.Get(index);
}
inline ::KFMsg::PBMatchPlayer* S2SCreateRoomToRoomReq::add_pbplayer() {
  // @@protoc_insertion_point(field_add:KFMsg.S2SCreateRoomToRoomReq.pbplayer)
  return pbplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchPlayer >&
S2SCreateRoomToRoomReq::pbplayer() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SCreateRoomToRoomReq.pbplayer)
  return pbplayer_;
}

// -------------------------------------------------------------------

// S2SCreateRoomToMatchAck

// uint64 roomid = 1;
inline void S2SCreateRoomToMatchAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCreateRoomToMatchAck::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCreateRoomToMatchAck.roomid)
  return roomid_;
}
inline void S2SCreateRoomToMatchAck::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCreateRoomToMatchAck.roomid)
}

// -------------------------------------------------------------------

// S2SInformBattleToGameReq

// uint64 playerid = 1;
inline void S2SInformBattleToGameReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SInformBattleToGameReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SInformBattleToGameReq.playerid)
  return playerid_;
}
inline void S2SInformBattleToGameReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SInformBattleToGameReq.playerid)
}

// uint64 roomid = 2;
inline void S2SInformBattleToGameReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SInformBattleToGameReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SInformBattleToGameReq.roomid)
  return roomid_;
}
inline void S2SInformBattleToGameReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SInformBattleToGameReq.roomid)
}

// uint64 battleid = 3;
inline void S2SInformBattleToGameReq::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SInformBattleToGameReq::battleid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SInformBattleToGameReq.battleid)
  return battleid_;
}
inline void S2SInformBattleToGameReq::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SInformBattleToGameReq.battleid)
}

// bytes ip = 4;
inline void S2SInformBattleToGameReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SInformBattleToGameReq::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SInformBattleToGameReq.ip)
  return ip_.GetNoArena();
}
inline void S2SInformBattleToGameReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SInformBattleToGameReq.ip)
}
#if LANG_CXX11
inline void S2SInformBattleToGameReq::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SInformBattleToGameReq.ip)
}
#endif
inline void S2SInformBattleToGameReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SInformBattleToGameReq.ip)
}
inline void S2SInformBattleToGameReq::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SInformBattleToGameReq.ip)
}
inline ::std::string* S2SInformBattleToGameReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SInformBattleToGameReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SInformBattleToGameReq::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SInformBattleToGameReq.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SInformBattleToGameReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SInformBattleToGameReq.ip)
}

// uint32 port = 5;
inline void S2SInformBattleToGameReq::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 S2SInformBattleToGameReq::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SInformBattleToGameReq.port)
  return port_;
}
inline void S2SInformBattleToGameReq::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SInformBattleToGameReq.port)
}

// -------------------------------------------------------------------

// S2SInformBattleToRoomAck

// uint64 playerid = 1;
inline void S2SInformBattleToRoomAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SInformBattleToRoomAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SInformBattleToRoomAck.playerid)
  return playerid_;
}
inline void S2SInformBattleToRoomAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SInformBattleToRoomAck.playerid)
}

// uint64 roomid = 2;
inline void S2SInformBattleToRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SInformBattleToRoomAck::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SInformBattleToRoomAck.roomid)
  return roomid_;
}
inline void S2SInformBattleToRoomAck::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SInformBattleToRoomAck.roomid)
}

// -------------------------------------------------------------------

// S2SQueryRoomToRoomReq

// uint64 playerid = 1;
inline void S2SQueryRoomToRoomReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToRoomReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToRoomReq.playerid)
  return playerid_;
}
inline void S2SQueryRoomToRoomReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToRoomReq.playerid)
}

// uint64 roomid = 2;
inline void S2SQueryRoomToRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToRoomReq.roomid)
  return roomid_;
}
inline void S2SQueryRoomToRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToRoomReq.roomid)
}

// -------------------------------------------------------------------

// S2SQueryRoomToGameAck

// uint64 playerid = 1;
inline void S2SQueryRoomToGameAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToGameAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToGameAck.playerid)
  return playerid_;
}
inline void S2SQueryRoomToGameAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToGameAck.playerid)
}

// -------------------------------------------------------------------

// S2SFinishRoomToGameReq

// uint64 playerid = 1;
inline void S2SFinishRoomToGameReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SFinishRoomToGameReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SFinishRoomToGameReq.playerid)
  return playerid_;
}
inline void S2SFinishRoomToGameReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SFinishRoomToGameReq.playerid)
}

// uint64 roomid = 2;
inline void S2SFinishRoomToGameReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SFinishRoomToGameReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SFinishRoomToGameReq.roomid)
  return roomid_;
}
inline void S2SFinishRoomToGameReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SFinishRoomToGameReq.roomid)
}

// -------------------------------------------------------------------

// S2SQueryMatchToMatchReq

// uint64 playerid = 1;
inline void S2SQueryMatchToMatchReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryMatchToMatchReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchToMatchReq.playerid)
  return playerid_;
}
inline void S2SQueryMatchToMatchReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchToMatchReq.playerid)
}

// uint32 matchid = 2;
inline void S2SQueryMatchToMatchReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SQueryMatchToMatchReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchToMatchReq.matchid)
  return matchid_;
}
inline void S2SQueryMatchToMatchReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchToMatchReq.matchid)
}

// -------------------------------------------------------------------

// S2SQueryMatchToGameAck

// uint64 playerid = 1;
inline void S2SQueryMatchToGameAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryMatchToGameAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchToGameAck.playerid)
  return playerid_;
}
inline void S2SQueryMatchToGameAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchToGameAck.playerid)
}

// -------------------------------------------------------------------

// S2SPlayerBalanceToGameReq

// uint64 roomid = 1;
inline void S2SPlayerBalanceToGameReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToGameReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToGameReq.roomid)
  return roomid_;
}
inline void S2SPlayerBalanceToGameReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToGameReq.roomid)
}

// uint64 playerid = 2;
inline void S2SPlayerBalanceToGameReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToGameReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToGameReq.playerid)
  return playerid_;
}
inline void S2SPlayerBalanceToGameReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToGameReq.playerid)
}

// .KFMsg.PBBattleBalance balance = 3;
inline bool S2SPlayerBalanceToGameReq::has_balance() const {
  return this != internal_default_instance() && balance_ != NULL;
}
inline const ::KFMsg::PBBattleBalance& S2SPlayerBalanceToGameReq::_internal_balance() const {
  return *balance_;
}
inline const ::KFMsg::PBBattleBalance& S2SPlayerBalanceToGameReq::balance() const {
  const ::KFMsg::PBBattleBalance* p = balance_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToGameReq.balance)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBBattleBalance*>(
      &::KFMsg::_PBBattleBalance_default_instance_);
}
inline ::KFMsg::PBBattleBalance* S2SPlayerBalanceToGameReq::release_balance() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SPlayerBalanceToGameReq.balance)
  
  ::KFMsg::PBBattleBalance* temp = balance_;
  balance_ = NULL;
  return temp;
}
inline ::KFMsg::PBBattleBalance* S2SPlayerBalanceToGameReq::mutable_balance() {
  
  if (balance_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBBattleBalance>(GetArenaNoVirtual());
    balance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SPlayerBalanceToGameReq.balance)
  return balance_;
}
inline void S2SPlayerBalanceToGameReq::set_allocated_balance(::KFMsg::PBBattleBalance* balance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(balance_);
  }
  if (balance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      balance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, balance, submessage_arena);
    }
    
  } else {
    
  }
  balance_ = balance;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SPlayerBalanceToGameReq.balance)
}

// -------------------------------------------------------------------

// S2SPlayerBalanceToRoomResult

// uint64 roomid = 1;
inline void S2SPlayerBalanceToRoomResult::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToRoomResult::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToRoomResult.roomid)
  return roomid_;
}
inline void S2SPlayerBalanceToRoomResult::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToRoomResult.roomid)
}

// uint64 playerid = 2;
inline void S2SPlayerBalanceToRoomResult::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerBalanceToRoomResult::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerBalanceToRoomResult.playerid)
  return playerid_;
}
inline void S2SPlayerBalanceToRoomResult::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerBalanceToRoomResult.playerid)
}

// -------------------------------------------------------------------

// S2SQueryBalanceToRoomReq

// uint64 playerid = 1;
inline void S2SQueryBalanceToRoomReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryBalanceToRoomReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryBalanceToRoomReq.playerid)
  return playerid_;
}
inline void S2SQueryBalanceToRoomReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryBalanceToRoomReq.playerid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KFMsg::ServerProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::ServerProtocol>() {
  return ::KFMsg::ServerProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)


#ifdef _MSC_VER
	#pragma warning(  pop  )
#endif
#endif  // PROTOBUF_INCLUDED_ServerMessage_2eproto
